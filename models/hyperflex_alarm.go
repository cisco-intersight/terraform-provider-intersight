// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperflexAlarm Hyperflex:Alarm
//
// swagger:model hyperflexAlarm
type HyperflexAlarm struct {
	MoBaseMo

	// acknowledged
	// Read Only: true
	Acknowledged *bool `json:"Acknowledged,omitempty"`

	// acknowledged by
	// Read Only: true
	AcknowledgedBy string `json:"AcknowledgedBy,omitempty"`

	// acknowledged time
	// Read Only: true
	AcknowledgedTime int64 `json:"AcknowledgedTime,omitempty"`

	// acknowledged time as utc
	// Read Only: true
	AcknowledgedTimeAsUtc string `json:"AcknowledgedTimeAsUtc,omitempty"`

	// A collection of references to the [hyperflex.Cluster](mo://hyperflex.Cluster) Managed Object.
	// When this managed object is deleted, the referenced [hyperflex.Cluster](mo://hyperflex.Cluster) MO unsets its reference to this deleted MO.
	// Read Only: true
	Cluster *HyperflexClusterRef `json:"Cluster,omitempty"`

	// description
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// entity data
	// Read Only: true
	EntityData string `json:"EntityData,omitempty"`

	// entity name
	// Read Only: true
	EntityName string `json:"EntityName,omitempty"`

	// entity type
	// Read Only: true
	// Enum: [UNKNOWN DISK NODE CLUSTER DATASTORE ZONE VIRTUALMACHINE]
	EntityType string `json:"EntityType,omitempty"`

	// entity uu Id
	// Read Only: true
	EntityUuID string `json:"EntityUuId,omitempty"`

	// message
	// Read Only: true
	Message string `json:"Message,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// status
	// Read Only: true
	// Enum: [UNKNOWN CLEARED INFO WARNING CRITICAL]
	Status string `json:"Status,omitempty"`

	// triggered time
	// Read Only: true
	TriggeredTime int64 `json:"TriggeredTime,omitempty"`

	// triggered time as utc
	// Read Only: true
	TriggeredTimeAsUtc string `json:"TriggeredTimeAsUtc,omitempty"`

	// Uuid
	// Read Only: true
	UUID string `json:"Uuid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexAlarm) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Acknowledged *bool `json:"Acknowledged,omitempty"`

		AcknowledgedBy string `json:"AcknowledgedBy,omitempty"`

		AcknowledgedTime int64 `json:"AcknowledgedTime,omitempty"`

		AcknowledgedTimeAsUtc string `json:"AcknowledgedTimeAsUtc,omitempty"`

		Cluster *HyperflexClusterRef `json:"Cluster,omitempty"`

		Description string `json:"Description,omitempty"`

		EntityData string `json:"EntityData,omitempty"`

		EntityName string `json:"EntityName,omitempty"`

		EntityType string `json:"EntityType,omitempty"`

		EntityUuID string `json:"EntityUuId,omitempty"`

		Message string `json:"Message,omitempty"`

		Name string `json:"Name,omitempty"`

		Status string `json:"Status,omitempty"`

		TriggeredTime int64 `json:"TriggeredTime,omitempty"`

		TriggeredTimeAsUtc string `json:"TriggeredTimeAsUtc,omitempty"`

		UUID string `json:"Uuid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Acknowledged = dataAO1.Acknowledged

	m.AcknowledgedBy = dataAO1.AcknowledgedBy

	m.AcknowledgedTime = dataAO1.AcknowledgedTime

	m.AcknowledgedTimeAsUtc = dataAO1.AcknowledgedTimeAsUtc

	m.Cluster = dataAO1.Cluster

	m.Description = dataAO1.Description

	m.EntityData = dataAO1.EntityData

	m.EntityName = dataAO1.EntityName

	m.EntityType = dataAO1.EntityType

	m.EntityUuID = dataAO1.EntityUuID

	m.Message = dataAO1.Message

	m.Name = dataAO1.Name

	m.Status = dataAO1.Status

	m.TriggeredTime = dataAO1.TriggeredTime

	m.TriggeredTimeAsUtc = dataAO1.TriggeredTimeAsUtc

	m.UUID = dataAO1.UUID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexAlarm) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Acknowledged *bool `json:"Acknowledged,omitempty"`

		AcknowledgedBy string `json:"AcknowledgedBy,omitempty"`

		AcknowledgedTime int64 `json:"AcknowledgedTime,omitempty"`

		AcknowledgedTimeAsUtc string `json:"AcknowledgedTimeAsUtc,omitempty"`

		Cluster *HyperflexClusterRef `json:"Cluster,omitempty"`

		Description string `json:"Description,omitempty"`

		EntityData string `json:"EntityData,omitempty"`

		EntityName string `json:"EntityName,omitempty"`

		EntityType string `json:"EntityType,omitempty"`

		EntityUuID string `json:"EntityUuId,omitempty"`

		Message string `json:"Message,omitempty"`

		Name string `json:"Name,omitempty"`

		Status string `json:"Status,omitempty"`

		TriggeredTime int64 `json:"TriggeredTime,omitempty"`

		TriggeredTimeAsUtc string `json:"TriggeredTimeAsUtc,omitempty"`

		UUID string `json:"Uuid,omitempty"`
	}

	dataAO1.Acknowledged = m.Acknowledged

	dataAO1.AcknowledgedBy = m.AcknowledgedBy

	dataAO1.AcknowledgedTime = m.AcknowledgedTime

	dataAO1.AcknowledgedTimeAsUtc = m.AcknowledgedTimeAsUtc

	dataAO1.Cluster = m.Cluster

	dataAO1.Description = m.Description

	dataAO1.EntityData = m.EntityData

	dataAO1.EntityName = m.EntityName

	dataAO1.EntityType = m.EntityType

	dataAO1.EntityUuID = m.EntityUuID

	dataAO1.Message = m.Message

	dataAO1.Name = m.Name

	dataAO1.Status = m.Status

	dataAO1.TriggeredTime = m.TriggeredTime

	dataAO1.TriggeredTimeAsUtc = m.TriggeredTimeAsUtc

	dataAO1.UUID = m.UUID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex alarm
func (m *HyperflexAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexAlarm) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cluster")
			}
			return err
		}
	}

	return nil
}

var hyperflexAlarmTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","DISK","NODE","CLUSTER","DATASTORE","ZONE","VIRTUALMACHINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexAlarmTypeEntityTypePropEnum = append(hyperflexAlarmTypeEntityTypePropEnum, v)
	}
}

// property enum
func (m *HyperflexAlarm) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexAlarmTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexAlarm) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("EntityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

var hyperflexAlarmTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","CLEARED","INFO","WARNING","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexAlarmTypeStatusPropEnum = append(hyperflexAlarmTypeStatusPropEnum, v)
	}
}

// property enum
func (m *HyperflexAlarm) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexAlarmTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexAlarm) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexAlarm) UnmarshalBinary(b []byte) error {
	var res HyperflexAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
