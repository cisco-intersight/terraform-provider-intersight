// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContentTextParameter Content:Text Parameter
//
// Concrete implementation of BaseParameter for Text content.
//
// swagger:model contentTextParameter
type ContentTextParameter struct {
	ContentBaseParameter

	// Data to be extracted from text content can be simple type or complex type or collection of
	// simple/complex types. Complex types are group of simple or complex type.
	// Delimiter is required to stop parsing list and complex data types.
	// isDelimiter specifies whether given TextParameter is a delimiter or regular rule to capture
	// the text data.
	IsDelimiter *bool `json:"IsDelimiter,omitempty"`

	// Set to true of the next value to capture resides on the same text line of current match.
	// By default textFSM engine gets the next text line on finding the first match.
	IsNextCaptureOnSameLine *bool `json:"IsNextCaptureOnSameLine,omitempty"`

	// Regular expression of the line containing the data to be extracted from text content.
	RegexLine string `json:"RegexLine,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContentTextParameter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ContentBaseParameter
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ContentBaseParameter = aO0

	// AO1
	var dataAO1 struct {
		IsDelimiter *bool `json:"IsDelimiter,omitempty"`

		IsNextCaptureOnSameLine *bool `json:"IsNextCaptureOnSameLine,omitempty"`

		RegexLine string `json:"RegexLine,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IsDelimiter = dataAO1.IsDelimiter

	m.IsNextCaptureOnSameLine = dataAO1.IsNextCaptureOnSameLine

	m.RegexLine = dataAO1.RegexLine

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContentTextParameter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ContentBaseParameter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IsDelimiter *bool `json:"IsDelimiter,omitempty"`

		IsNextCaptureOnSameLine *bool `json:"IsNextCaptureOnSameLine,omitempty"`

		RegexLine string `json:"RegexLine,omitempty"`
	}

	dataAO1.IsDelimiter = m.IsDelimiter

	dataAO1.IsNextCaptureOnSameLine = m.IsNextCaptureOnSameLine

	dataAO1.RegexLine = m.RegexLine

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content text parameter
func (m *ContentTextParameter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ContentBaseParameter
	if err := m.ContentBaseParameter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ContentTextParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentTextParameter) UnmarshalBinary(b []byte) error {
	var res ContentTextParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
