// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowInternalProperties Workflow:Internal Properties
//
// Internal properties for a task definition which are not editable by the user.
//
// swagger:model workflowInternalProperties
type WorkflowInternalProperties struct {
	MoBaseComplexType

	WorkflowInternalPropertiesAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowInternalProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowInternalPropertiesAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowInternalPropertiesAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowInternalProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowInternalPropertiesAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow internal properties
func (m *WorkflowInternalProperties) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowInternalPropertiesAO1P1
	if err := m.WorkflowInternalPropertiesAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowInternalProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowInternalProperties) UnmarshalBinary(b []byte) error {
	var res WorkflowInternalProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowInternalPropertiesAO1P1 workflow internal properties a o1 p1
//
// swagger:model WorkflowInternalPropertiesAO1P1
type WorkflowInternalPropertiesAO1P1 struct {

	// This field will hold the base task type like HttpBaseTask or RemoteAnsibleBaseTask.
	// Read Only: true
	BaseTaskType string `json:"BaseTaskType,omitempty"`

	// This field will hold any constraints a concrete task definition will specify in order to limit the environment where the task can execute.
	// Read Only: true
	Constraints *WorkflowTaskConstraints `json:"Constraints,omitempty"`

	// Denotes this is an internal task. Internal tasks will be hidden from the UI when executing a workflow.
	// Read Only: true
	Internal *bool `json:"Internal,omitempty"`

	// The service that owns and is responsible for execution of the task.
	// Read Only: true
	Owner string `json:"Owner,omitempty"`

	// workflow internal properties a o1 p1
	WorkflowInternalPropertiesAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowInternalPropertiesAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// This field will hold the base task type like HttpBaseTask or RemoteAnsibleBaseTask.
		// Read Only: true
		BaseTaskType string `json:"BaseTaskType,omitempty"`

		// This field will hold any constraints a concrete task definition will specify in order to limit the environment where the task can execute.
		// Read Only: true
		Constraints *WorkflowTaskConstraints `json:"Constraints,omitempty"`

		// Denotes this is an internal task. Internal tasks will be hidden from the UI when executing a workflow.
		// Read Only: true
		Internal *bool `json:"Internal,omitempty"`

		// The service that owns and is responsible for execution of the task.
		// Read Only: true
		Owner string `json:"Owner,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowInternalPropertiesAO1P1

	rcv.BaseTaskType = stage1.BaseTaskType
	rcv.Constraints = stage1.Constraints
	rcv.Internal = stage1.Internal
	rcv.Owner = stage1.Owner
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "BaseTaskType")
	delete(stage2, "Constraints")
	delete(stage2, "Internal")
	delete(stage2, "Owner")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowInternalPropertiesAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowInternalPropertiesAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// This field will hold the base task type like HttpBaseTask or RemoteAnsibleBaseTask.
		// Read Only: true
		BaseTaskType string `json:"BaseTaskType,omitempty"`

		// This field will hold any constraints a concrete task definition will specify in order to limit the environment where the task can execute.
		// Read Only: true
		Constraints *WorkflowTaskConstraints `json:"Constraints,omitempty"`

		// Denotes this is an internal task. Internal tasks will be hidden from the UI when executing a workflow.
		// Read Only: true
		Internal *bool `json:"Internal,omitempty"`

		// The service that owns and is responsible for execution of the task.
		// Read Only: true
		Owner string `json:"Owner,omitempty"`
	}

	stage1.BaseTaskType = m.BaseTaskType
	stage1.Constraints = m.Constraints
	stage1.Internal = m.Internal
	stage1.Owner = m.Owner

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowInternalPropertiesAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowInternalPropertiesAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow internal properties a o1 p1
func (m *WorkflowInternalPropertiesAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowInternalPropertiesAO1P1) validateConstraints(formats strfmt.Registry) error {

	if swag.IsZero(m.Constraints) { // not required
		return nil
	}

	if m.Constraints != nil {
		if err := m.Constraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constraints")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowInternalPropertiesAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowInternalPropertiesAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowInternalPropertiesAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
