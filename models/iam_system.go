// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamSystem Iam:System
//
// System is the top level object in the Intersight. All other objects which can be accessed globally are added to system object, like privilege sets and privileges can be shared by multiple roles and privilege sets.
//
// swagger:model iamSystem
type IamSystem struct {
	MoBaseMo

	// Privileges defined in end point devices such as UCS Fabric Interconnect, IMC, and HyperFlex managed by Intersight. These privileges are assigned to Intersight users using end point roles to perform operations such as GUI/CLI cross launch.
	// Read Only: true
	EndPointPrivileges []*IamEndPointPrivilegeRef `json:"EndPointPrivileges"`

	// Roles defined in end point devices such as UCS Fabric Interconnect, IMC, HyperFlex managed by Intersight. These roles are assigned to Intersight users to perform end point operations such as GUI/CLI cross launch.
	// Read Only: true
	EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

	// Default Cisco IdP used for SAML authentication.
	// Read Only: true
	Idp *IamIdpRef `json:"Idp,omitempty"`

	// Privilege set is a collection of privileges. Privilege sets are assigned to a user using roles.
	// Read Only: true
	PrivilegeSets []*IamPrivilegeSetRef `json:"PrivilegeSets"`

	// Privileges are assigned to a user using privilege sets and roles. Privileges define user permissions and the actions a user can perform in Intersight.
	// Read Only: true
	Privileges []*IamPrivilegeRef `json:"Privileges"`

	// A role is a collection of privilege sets that are assigned to a user using a permission object.
	// Read Only: true
	Roles []*IamRoleRef `json:"Roles"`

	// SAML service provider which holds the SAML entity ID of the Intersight Service Provider and the metadata to integrate with the IdPs.
	ServiceProvider *IamServiceProviderRef `json:"ServiceProvider,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamSystem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		EndPointPrivileges []*IamEndPointPrivilegeRef `json:"EndPointPrivileges"`

		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Idp *IamIdpRef `json:"Idp,omitempty"`

		PrivilegeSets []*IamPrivilegeSetRef `json:"PrivilegeSets"`

		Privileges []*IamPrivilegeRef `json:"Privileges"`

		Roles []*IamRoleRef `json:"Roles"`

		ServiceProvider *IamServiceProviderRef `json:"ServiceProvider,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EndPointPrivileges = dataAO1.EndPointPrivileges

	m.EndPointRoles = dataAO1.EndPointRoles

	m.Idp = dataAO1.Idp

	m.PrivilegeSets = dataAO1.PrivilegeSets

	m.Privileges = dataAO1.Privileges

	m.Roles = dataAO1.Roles

	m.ServiceProvider = dataAO1.ServiceProvider

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamSystem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EndPointPrivileges []*IamEndPointPrivilegeRef `json:"EndPointPrivileges"`

		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Idp *IamIdpRef `json:"Idp,omitempty"`

		PrivilegeSets []*IamPrivilegeSetRef `json:"PrivilegeSets"`

		Privileges []*IamPrivilegeRef `json:"Privileges"`

		Roles []*IamRoleRef `json:"Roles"`

		ServiceProvider *IamServiceProviderRef `json:"ServiceProvider,omitempty"`
	}

	dataAO1.EndPointPrivileges = m.EndPointPrivileges

	dataAO1.EndPointRoles = m.EndPointRoles

	dataAO1.Idp = m.Idp

	dataAO1.PrivilegeSets = m.PrivilegeSets

	dataAO1.Privileges = m.Privileges

	dataAO1.Roles = m.Roles

	dataAO1.ServiceProvider = m.ServiceProvider

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam system
func (m *IamSystem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointPrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegeSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamSystem) validateEndPointPrivileges(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointPrivileges) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPointPrivileges); i++ {
		if swag.IsZero(m.EndPointPrivileges[i]) { // not required
			continue
		}

		if m.EndPointPrivileges[i] != nil {
			if err := m.EndPointPrivileges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EndPointPrivileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamSystem) validateEndPointRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPointRoles); i++ {
		if swag.IsZero(m.EndPointRoles[i]) { // not required
			continue
		}

		if m.EndPointRoles[i] != nil {
			if err := m.EndPointRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EndPointRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamSystem) validateIdp(formats strfmt.Registry) error {

	if swag.IsZero(m.Idp) { // not required
		return nil
	}

	if m.Idp != nil {
		if err := m.Idp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Idp")
			}
			return err
		}
	}

	return nil
}

func (m *IamSystem) validatePrivilegeSets(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivilegeSets) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivilegeSets); i++ {
		if swag.IsZero(m.PrivilegeSets[i]) { // not required
			continue
		}

		if m.PrivilegeSets[i] != nil {
			if err := m.PrivilegeSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PrivilegeSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamSystem) validatePrivileges(formats strfmt.Registry) error {

	if swag.IsZero(m.Privileges) { // not required
		return nil
	}

	for i := 0; i < len(m.Privileges); i++ {
		if swag.IsZero(m.Privileges[i]) { // not required
			continue
		}

		if m.Privileges[i] != nil {
			if err := m.Privileges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamSystem) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamSystem) validateServiceProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceProvider) { // not required
		return nil
	}

	if m.ServiceProvider != nil {
		if err := m.ServiceProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceProvider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamSystem) UnmarshalBinary(b []byte) error {
	var res IamSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
