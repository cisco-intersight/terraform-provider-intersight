// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualizationHypervisorManager Virtualization:Hypervisor Manager
//
// The basic hypervisor manager. Serves as a management layer for all hypervisors. A hypervisor manager contains datacenters, and datacenters contain all other entities such as Host, Portgroups, Virtual Machines, etc.
//
// swagger:model virtualizationHypervisorManager
type VirtualizationHypervisorManager struct {
	MoBaseMo

	// Identity of the hypervisor (not manipulated by user). It could be a UUID too. Example - c917093f-5443-4748-bc09-eec72ded7608.
	// Read Only: true
	Identity string `json:"Identity,omitempty"`

	// The user provided name for the hypervisor manager (for example, vCenterIreland). Usually, this name is subject to manipulations by user. It is not the identity of the hypervisor.
	Name string `json:"Name,omitempty"`

	// Every inventory object comes from a device endpoint. The identity of that device is captured here so that any entity that needs to send a request to that device can just get to it via the inventory object.
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Release version of the Hypervisor Manger (VMware vCenter Server 6.0.0 build-4541947).
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationHypervisorManager) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Identity string `json:"Identity,omitempty"`

		Name string `json:"Name,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Identity = dataAO1.Identity

	m.Name = dataAO1.Name

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationHypervisorManager) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Identity string `json:"Identity,omitempty"`

		Name string `json:"Name,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.Identity = m.Identity

	dataAO1.Name = m.Name

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization hypervisor manager
func (m *VirtualizationHypervisorManager) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationHypervisorManager) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationHypervisorManager) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationHypervisorManager) UnmarshalBinary(b []byte) error {
	var res VirtualizationHypervisorManager
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
