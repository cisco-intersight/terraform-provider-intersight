// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComputePhysical Compute:Physical
//
// Abstract class for all physical servers.
//
// swagger:model computePhysical
type ComputePhysical struct {
	EquipmentBase

	// admin power state
	// Read Only: true
	AdminPowerState string `json:"AdminPowerState,omitempty"`

	// asset tag
	// Read Only: true
	AssetTag string `json:"AssetTag,omitempty"`

	// available memory
	// Read Only: true
	AvailableMemory int64 `json:"AvailableMemory,omitempty"`

	// fault summary
	FaultSummary int64 `json:"FaultSummary,omitempty"`

	// KVM address of the device.
	KvmIPAddresses []*ComputeIPAddress `json:"KvmIpAddresses"`

	// memory speed
	// Read Only: true
	MemorySpeed string `json:"MemorySpeed,omitempty"`

	// Management address of the server.
	MgmtIPAddress string `json:"MgmtIpAddress,omitempty"`

	// Total number of Adaptors available.
	// Read Only: true
	NumAdaptors int64 `json:"NumAdaptors,omitempty"`

	// Total number of CPU cores available.
	// Read Only: true
	NumCPUCores int64 `json:"NumCpuCores,omitempty"`

	// Number of CPU cores enabled.
	// Read Only: true
	NumCPUCoresEnabled int64 `json:"NumCpuCoresEnabled,omitempty"`

	// Total number of CPU's available.
	// Read Only: true
	NumCpus int64 `json:"NumCpus,omitempty"`

	// Number of Ethernet Host Interfaces.
	// Read Only: true
	NumEthHostInterfaces int64 `json:"NumEthHostInterfaces,omitempty"`

	// Number of Fibre channel Host Interfaces.
	// Read Only: true
	NumFcHostInterfaces int64 `json:"NumFcHostInterfaces,omitempty"`

	// Number of threads enabled.
	// Read Only: true
	NumThreads int64 `json:"NumThreads,omitempty"`

	// oper power state
	// Read Only: true
	OperPowerState string `json:"OperPowerState,omitempty"`

	// oper state
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// operability
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// Platform type of the device.
	PlatformType string `json:"PlatformType,omitempty"`

	// presence
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// The service profile assigned.
	// Read Only: true
	ServiceProfile string `json:"ServiceProfile,omitempty"`

	// total memory
	// Read Only: true
	TotalMemory int64 `json:"TotalMemory,omitempty"`

	// user label
	// Read Only: true
	UserLabel string `json:"UserLabel,omitempty"`

	// Uuid
	// Read Only: true
	UUID string `json:"Uuid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComputePhysical) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		AdminPowerState string `json:"AdminPowerState,omitempty"`

		AssetTag string `json:"AssetTag,omitempty"`

		AvailableMemory int64 `json:"AvailableMemory,omitempty"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		KvmIPAddresses []*ComputeIPAddress `json:"KvmIpAddresses"`

		MemorySpeed string `json:"MemorySpeed,omitempty"`

		MgmtIPAddress string `json:"MgmtIpAddress,omitempty"`

		NumAdaptors int64 `json:"NumAdaptors,omitempty"`

		NumCPUCores int64 `json:"NumCpuCores,omitempty"`

		NumCPUCoresEnabled int64 `json:"NumCpuCoresEnabled,omitempty"`

		NumCpus int64 `json:"NumCpus,omitempty"`

		NumEthHostInterfaces int64 `json:"NumEthHostInterfaces,omitempty"`

		NumFcHostInterfaces int64 `json:"NumFcHostInterfaces,omitempty"`

		NumThreads int64 `json:"NumThreads,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`

		Presence string `json:"Presence,omitempty"`

		ServiceProfile string `json:"ServiceProfile,omitempty"`

		TotalMemory int64 `json:"TotalMemory,omitempty"`

		UserLabel string `json:"UserLabel,omitempty"`

		UUID string `json:"Uuid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdminPowerState = dataAO1.AdminPowerState

	m.AssetTag = dataAO1.AssetTag

	m.AvailableMemory = dataAO1.AvailableMemory

	m.FaultSummary = dataAO1.FaultSummary

	m.KvmIPAddresses = dataAO1.KvmIPAddresses

	m.MemorySpeed = dataAO1.MemorySpeed

	m.MgmtIPAddress = dataAO1.MgmtIPAddress

	m.NumAdaptors = dataAO1.NumAdaptors

	m.NumCPUCores = dataAO1.NumCPUCores

	m.NumCPUCoresEnabled = dataAO1.NumCPUCoresEnabled

	m.NumCpus = dataAO1.NumCpus

	m.NumEthHostInterfaces = dataAO1.NumEthHostInterfaces

	m.NumFcHostInterfaces = dataAO1.NumFcHostInterfaces

	m.NumThreads = dataAO1.NumThreads

	m.OperPowerState = dataAO1.OperPowerState

	m.OperState = dataAO1.OperState

	m.Operability = dataAO1.Operability

	m.PlatformType = dataAO1.PlatformType

	m.Presence = dataAO1.Presence

	m.ServiceProfile = dataAO1.ServiceProfile

	m.TotalMemory = dataAO1.TotalMemory

	m.UserLabel = dataAO1.UserLabel

	m.UUID = dataAO1.UUID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComputePhysical) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdminPowerState string `json:"AdminPowerState,omitempty"`

		AssetTag string `json:"AssetTag,omitempty"`

		AvailableMemory int64 `json:"AvailableMemory,omitempty"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		KvmIPAddresses []*ComputeIPAddress `json:"KvmIpAddresses"`

		MemorySpeed string `json:"MemorySpeed,omitempty"`

		MgmtIPAddress string `json:"MgmtIpAddress,omitempty"`

		NumAdaptors int64 `json:"NumAdaptors,omitempty"`

		NumCPUCores int64 `json:"NumCpuCores,omitempty"`

		NumCPUCoresEnabled int64 `json:"NumCpuCoresEnabled,omitempty"`

		NumCpus int64 `json:"NumCpus,omitempty"`

		NumEthHostInterfaces int64 `json:"NumEthHostInterfaces,omitempty"`

		NumFcHostInterfaces int64 `json:"NumFcHostInterfaces,omitempty"`

		NumThreads int64 `json:"NumThreads,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`

		Presence string `json:"Presence,omitempty"`

		ServiceProfile string `json:"ServiceProfile,omitempty"`

		TotalMemory int64 `json:"TotalMemory,omitempty"`

		UserLabel string `json:"UserLabel,omitempty"`

		UUID string `json:"Uuid,omitempty"`
	}

	dataAO1.AdminPowerState = m.AdminPowerState

	dataAO1.AssetTag = m.AssetTag

	dataAO1.AvailableMemory = m.AvailableMemory

	dataAO1.FaultSummary = m.FaultSummary

	dataAO1.KvmIPAddresses = m.KvmIPAddresses

	dataAO1.MemorySpeed = m.MemorySpeed

	dataAO1.MgmtIPAddress = m.MgmtIPAddress

	dataAO1.NumAdaptors = m.NumAdaptors

	dataAO1.NumCPUCores = m.NumCPUCores

	dataAO1.NumCPUCoresEnabled = m.NumCPUCoresEnabled

	dataAO1.NumCpus = m.NumCpus

	dataAO1.NumEthHostInterfaces = m.NumEthHostInterfaces

	dataAO1.NumFcHostInterfaces = m.NumFcHostInterfaces

	dataAO1.NumThreads = m.NumThreads

	dataAO1.OperPowerState = m.OperPowerState

	dataAO1.OperState = m.OperState

	dataAO1.Operability = m.Operability

	dataAO1.PlatformType = m.PlatformType

	dataAO1.Presence = m.Presence

	dataAO1.ServiceProfile = m.ServiceProfile

	dataAO1.TotalMemory = m.TotalMemory

	dataAO1.UserLabel = m.UserLabel

	dataAO1.UUID = m.UUID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this compute physical
func (m *ComputePhysical) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputePhysical) validateKvmIPAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.KvmIPAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.KvmIPAddresses); i++ {
		if swag.IsZero(m.KvmIPAddresses[i]) { // not required
			continue
		}

		if m.KvmIPAddresses[i] != nil {
			if err := m.KvmIPAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("KvmIpAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputePhysical) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputePhysical) UnmarshalBinary(b []byte) error {
	var res ComputePhysical
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
