// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AaaAuditRecord Aaa:Audit Record
//
// AuditRecord presents the configuration changes made by the user per transaction.
//
// swagger:model aaaAuditRecord
type AaaAuditRecord struct {
	AaaAbstractAuditRecord

	// The account of the user who performed the operation.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The email of the associated user that made the change.  In case the user is later deleted, we still have some reference to the information.
	Email string `json:"Email,omitempty"`

	// The instance id of AuditRecordLocal, which is used to identify if the comming AuditRecordLocal was already processed before.
	InstID string `json:"InstId,omitempty"`

	// The sessions of the user who performed the operation.
	// Read Only: true
	Sessions *IamSessionRef `json:"Sessions,omitempty"`

	// The source IP of the client.
	SourceIP string `json:"SourceIp,omitempty"`

	// The creation time of AuditRecordLocal, which is the time when the affected MO was created/modified/deleted.
	// Read Only: true
	// Format: date-time
	Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

	// The user who performed the operation.
	// Read Only: true
	User *IamUserRef `json:"User,omitempty"`

	// The userId or the email of the associated user that made the change. In case that user is later deleted, we still have some reference to the information.
	UserIDOrEmail string `json:"UserIdOrEmail,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AaaAuditRecord) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AaaAbstractAuditRecord
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AaaAbstractAuditRecord = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Email string `json:"Email,omitempty"`

		InstID string `json:"InstId,omitempty"`

		Sessions *IamSessionRef `json:"Sessions,omitempty"`

		SourceIP string `json:"SourceIp,omitempty"`

		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		User *IamUserRef `json:"User,omitempty"`

		UserIDOrEmail string `json:"UserIdOrEmail,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Email = dataAO1.Email

	m.InstID = dataAO1.InstID

	m.Sessions = dataAO1.Sessions

	m.SourceIP = dataAO1.SourceIP

	m.Timestamp = dataAO1.Timestamp

	m.User = dataAO1.User

	m.UserIDOrEmail = dataAO1.UserIDOrEmail

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AaaAuditRecord) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AaaAbstractAuditRecord)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Email string `json:"Email,omitempty"`

		InstID string `json:"InstId,omitempty"`

		Sessions *IamSessionRef `json:"Sessions,omitempty"`

		SourceIP string `json:"SourceIp,omitempty"`

		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		User *IamUserRef `json:"User,omitempty"`

		UserIDOrEmail string `json:"UserIdOrEmail,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Email = m.Email

	dataAO1.InstID = m.InstID

	dataAO1.Sessions = m.Sessions

	dataAO1.SourceIP = m.SourceIP

	dataAO1.Timestamp = m.Timestamp

	dataAO1.User = m.User

	dataAO1.UserIDOrEmail = m.UserIDOrEmail

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this aaa audit record
func (m *AaaAuditRecord) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AaaAbstractAuditRecord
	if err := m.AaaAbstractAuditRecord.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AaaAuditRecord) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *AaaAuditRecord) validateSessions(formats strfmt.Registry) error {

	if swag.IsZero(m.Sessions) { // not required
		return nil
	}

	if m.Sessions != nil {
		if err := m.Sessions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Sessions")
			}
			return err
		}
	}

	return nil
}

func (m *AaaAuditRecord) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AaaAuditRecord) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AaaAuditRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AaaAuditRecord) UnmarshalBinary(b []byte) error {
	var res AaaAuditRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
