// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HyperflexNodeConfigPolicy Node IP and Hostname
//
// A policy specifying node details such as management and storage data IP ranges. For HyperFlex Edge, storage data IP range is pre-defined.
//
// swagger:model hyperflexNodeConfigPolicy
type HyperflexNodeConfigPolicy struct {
	PolicyAbstractPolicy

	// List of cluster profiles using this policy.
	ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

	// The range of storage data IPs to be assigned to the nodes.
	DataIPRange *HyperflexIPAddrRange `json:"DataIpRange,omitempty"`

	// The range of storage management IPs to be assigned to the nodes.
	HxdpIPRange *HyperflexIPAddrRange `json:"HxdpIpRange,omitempty"`

	// The range of management IPs to be assigned to the nodes.
	MgmtIPRange *HyperflexIPAddrRange `json:"MgmtIpRange,omitempty"`

	// The node name prefix that is used to automatically generate the default hostname for each server.
	// A dash (-) will be appended to the prefix followed by the node number to form a hostname.
	// This default naming scheme can be manually overridden in the node configuration.
	// The maximum length of a prefix is 60, must only contain alphanumeric characters or dash (-), and must
	// start with an alphanumeric character.
	NodeNamePrefix string `json:"NodeNamePrefix,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexNodeConfigPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

		DataIPRange *HyperflexIPAddrRange `json:"DataIpRange,omitempty"`

		HxdpIPRange *HyperflexIPAddrRange `json:"HxdpIpRange,omitempty"`

		MgmtIPRange *HyperflexIPAddrRange `json:"MgmtIpRange,omitempty"`

		NodeNamePrefix string `json:"NodeNamePrefix,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ClusterProfiles = dataAO1.ClusterProfiles

	m.DataIPRange = dataAO1.DataIPRange

	m.HxdpIPRange = dataAO1.HxdpIPRange

	m.MgmtIPRange = dataAO1.MgmtIPRange

	m.NodeNamePrefix = dataAO1.NodeNamePrefix

	m.Organization = dataAO1.Organization

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexNodeConfigPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

		DataIPRange *HyperflexIPAddrRange `json:"DataIpRange,omitempty"`

		HxdpIPRange *HyperflexIPAddrRange `json:"HxdpIpRange,omitempty"`

		MgmtIPRange *HyperflexIPAddrRange `json:"MgmtIpRange,omitempty"`

		NodeNamePrefix string `json:"NodeNamePrefix,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`
	}

	dataAO1.ClusterProfiles = m.ClusterProfiles

	dataAO1.DataIPRange = m.DataIPRange

	dataAO1.HxdpIPRange = m.HxdpIPRange

	dataAO1.MgmtIPRange = m.MgmtIPRange

	dataAO1.NodeNamePrefix = m.NodeNamePrefix

	dataAO1.Organization = m.Organization

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex node config policy
func (m *HyperflexNodeConfigPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataIPRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHxdpIPRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMgmtIPRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexNodeConfigPolicy) validateClusterProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProfiles); i++ {
		if swag.IsZero(m.ClusterProfiles[i]) { // not required
			continue
		}

		if m.ClusterProfiles[i] != nil {
			if err := m.ClusterProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ClusterProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HyperflexNodeConfigPolicy) validateDataIPRange(formats strfmt.Registry) error {

	if swag.IsZero(m.DataIPRange) { // not required
		return nil
	}

	if m.DataIPRange != nil {
		if err := m.DataIPRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DataIpRange")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexNodeConfigPolicy) validateHxdpIPRange(formats strfmt.Registry) error {

	if swag.IsZero(m.HxdpIPRange) { // not required
		return nil
	}

	if m.HxdpIPRange != nil {
		if err := m.HxdpIPRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HxdpIpRange")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexNodeConfigPolicy) validateMgmtIPRange(formats strfmt.Registry) error {

	if swag.IsZero(m.MgmtIPRange) { // not required
		return nil
	}

	if m.MgmtIPRange != nil {
		if err := m.MgmtIPRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MgmtIpRange")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexNodeConfigPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexNodeConfigPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexNodeConfigPolicy) UnmarshalBinary(b []byte) error {
	var res HyperflexNodeConfigPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
