// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageGenericArray Storage:Generic Array
//
// Abstract object which contains common attributes of a storage array. Every storage array should inherit from this object.
//
// swagger:model storageGenericArray
type StorageGenericArray struct {
	EquipmentAbstractDevice

	// Storage utilization of an array, it contains total capacity, available capacity, used capacity and free capacity.
	// Read Only: true
	StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageGenericArray) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentAbstractDevice
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentAbstractDevice = aO0

	// AO1
	var dataAO1 struct {
		StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.StorageUtilization = dataAO1.StorageUtilization

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageGenericArray) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentAbstractDevice)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`
	}

	dataAO1.StorageUtilization = m.StorageUtilization

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage generic array
func (m *StorageGenericArray) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentAbstractDevice
	if err := m.EquipmentAbstractDevice.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageGenericArray) validateStorageUtilization(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUtilization) { // not required
		return nil
	}

	if m.StorageUtilization != nil {
		if err := m.StorageUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageUtilization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageGenericArray) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageGenericArray) UnmarshalBinary(b []byte) error {
	var res StorageGenericArray
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
