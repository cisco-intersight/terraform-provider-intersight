// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VnicTCPOffloadSettings TCP Offload
//
// The TCP offload settings decide whether to offload the TCP related network functions from the CPU to the network hardware or not. These options help reduce the CPU overhead and increase the network throughput.
//
// swagger:model vnicTcpOffloadSettings
type VnicTCPOffloadSettings struct {
	MoBaseComplexType

	VnicTCPOffloadSettingsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicTCPOffloadSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 VnicTCPOffloadSettingsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.VnicTCPOffloadSettingsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicTCPOffloadSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.VnicTCPOffloadSettingsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic Tcp offload settings
func (m *VnicTCPOffloadSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VnicTCPOffloadSettingsAO1P1
	if err := m.VnicTCPOffloadSettingsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicTCPOffloadSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicTCPOffloadSettings) UnmarshalBinary(b []byte) error {
	var res VnicTCPOffloadSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VnicTCPOffloadSettingsAO1P1 vnic TCP offload settings a o1 p1
//
// swagger:model VnicTCPOffloadSettingsAO1P1
type VnicTCPOffloadSettingsAO1P1 struct {

	// Enables the reassembly of segmented packets in hardware before sending them to the CPU.
	LargeReceive *bool `json:"LargeReceive,omitempty"`

	// Enables the CPU to send large packets to the hardware for segmentation.
	LargeSend *bool `json:"LargeSend,omitempty"`

	// When enabled, the CPU sends all packet checksums to the hardware for validation.
	RxChecksum *bool `json:"RxChecksum,omitempty"`

	// When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.
	TxChecksum *bool `json:"TxChecksum,omitempty"`

	// vnic TCP offload settings a o1 p1
	VnicTCPOffloadSettingsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *VnicTCPOffloadSettingsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Enables the reassembly of segmented packets in hardware before sending them to the CPU.
		LargeReceive *bool `json:"LargeReceive,omitempty"`

		// Enables the CPU to send large packets to the hardware for segmentation.
		LargeSend *bool `json:"LargeSend,omitempty"`

		// When enabled, the CPU sends all packet checksums to the hardware for validation.
		RxChecksum *bool `json:"RxChecksum,omitempty"`

		// When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.
		TxChecksum *bool `json:"TxChecksum,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv VnicTCPOffloadSettingsAO1P1

	rcv.LargeReceive = stage1.LargeReceive
	rcv.LargeSend = stage1.LargeSend
	rcv.RxChecksum = stage1.RxChecksum
	rcv.TxChecksum = stage1.TxChecksum
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "LargeReceive")
	delete(stage2, "LargeSend")
	delete(stage2, "RxChecksum")
	delete(stage2, "TxChecksum")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.VnicTCPOffloadSettingsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m VnicTCPOffloadSettingsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Enables the reassembly of segmented packets in hardware before sending them to the CPU.
		LargeReceive *bool `json:"LargeReceive,omitempty"`

		// Enables the CPU to send large packets to the hardware for segmentation.
		LargeSend *bool `json:"LargeSend,omitempty"`

		// When enabled, the CPU sends all packet checksums to the hardware for validation.
		RxChecksum *bool `json:"RxChecksum,omitempty"`

		// When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.
		TxChecksum *bool `json:"TxChecksum,omitempty"`
	}

	stage1.LargeReceive = m.LargeReceive
	stage1.LargeSend = m.LargeSend
	stage1.RxChecksum = m.RxChecksum
	stage1.TxChecksum = m.TxChecksum

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.VnicTCPOffloadSettingsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.VnicTCPOffloadSettingsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this vnic TCP offload settings a o1 p1
func (m *VnicTCPOffloadSettingsAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VnicTCPOffloadSettingsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicTCPOffloadSettingsAO1P1) UnmarshalBinary(b []byte) error {
	var res VnicTCPOffloadSettingsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
