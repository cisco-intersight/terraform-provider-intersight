// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplianceBackupPolicy Appliance:Backup Policy
//
// BackupPolicy stores the Intersight Appliance's backup policy. There will be only
// one BackupPolicy managed object in the Intersight Appliance. Default backup policy
// managed object is created during the Intersight Appliance setup, and it is configured
// in the manual backup mode.
//
// swagger:model applianceBackupPolicy
type ApplianceBackupPolicy struct {
	ApplianceBackupBase

	// BackupPolicy managed object to Account relationship.
	Account *IamAccountRef `json:"Account,omitempty"`

	// The next backup time set by the backup scheduler. Backup scheduler calculates the next backup time with the user-defined schedule set in the Schedule field.
	// Read Only: true
	// Format: date-time
	BackupTime strfmt.DateTime `json:"BackupTime,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Backup mode of the appliance. Automatic backups of the appliance are not initiated if this property is set to 'true' and the backup schedule field is ignored.
	ManualBackup *bool `json:"ManualBackup,omitempty"`

	// Password to authenticate the file server.
	Password string `json:"Password,omitempty"`

	// Schedule to create a backup of the Intersight Appliance. Manualbackup field must be set to 'false' for this schedule to be active.
	Schedule *OnpremSchedule `json:"Schedule,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceBackupPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ApplianceBackupBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ApplianceBackupBase = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		BackupTime strfmt.DateTime `json:"BackupTime,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		ManualBackup *bool `json:"ManualBackup,omitempty"`

		Password string `json:"Password,omitempty"`

		Schedule *OnpremSchedule `json:"Schedule,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.BackupTime = dataAO1.BackupTime

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.ManualBackup = dataAO1.ManualBackup

	m.Password = dataAO1.Password

	m.Schedule = dataAO1.Schedule

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceBackupPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ApplianceBackupBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		BackupTime strfmt.DateTime `json:"BackupTime,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		ManualBackup *bool `json:"ManualBackup,omitempty"`

		Password string `json:"Password,omitempty"`

		Schedule *OnpremSchedule `json:"Schedule,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.BackupTime = m.BackupTime

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.ManualBackup = m.ManualBackup

	dataAO1.Password = m.Password

	dataAO1.Schedule = m.Schedule

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance backup policy
func (m *ApplianceBackupPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ApplianceBackupBase
	if err := m.ApplianceBackupBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplianceBackupPolicy) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *ApplianceBackupPolicy) validateBackupTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupTime) { // not required
		return nil
	}

	if err := validate.FormatOf("BackupTime", "body", "date-time", m.BackupTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplianceBackupPolicy) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceBackupPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceBackupPolicy) UnmarshalBinary(b []byte) error {
	var res ApplianceBackupPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
