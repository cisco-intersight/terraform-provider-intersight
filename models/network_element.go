// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkElement Network:Element
//
// A Unified Computing Systems (UCS) Fabric Interconnect.
//
// swagger:model networkElement
type NetworkElement struct {
	EquipmentBase

	// The administrative state of the network Element inband management interface.
	// Read Only: true
	AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

	// cards
	// Read Only: true
	Cards []*EquipmentSwitchCardRef `json:"Cards"`

	// fanmodules
	// Read Only: true
	Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

	// fault summary
	FaultSummary int64 `json:"FaultSummary,omitempty"`

	// The IP address of the network Element inband management interface.
	// Read Only: true
	InbandIPAddress string `json:"InbandIpAddress,omitempty"`

	// The default gateway of the network Element inband management interface.
	// Read Only: true
	InbandIPGateway string `json:"InbandIpGateway,omitempty"`

	// The network mask of the network Element inband management interface.
	// Read Only: true
	InbandIPMask string `json:"InbandIpMask,omitempty"`

	// The VLAN ID of the network Element inband management interface.
	// Read Only: true
	InbandVlan int64 `json:"InbandVlan,omitempty"`

	// management contoller
	// Read Only: true
	ManagementContoller *ManagementControllerRef `json:"ManagementContoller,omitempty"`

	// management entity
	// Read Only: true
	ManagementEntity *ManagementEntityRef `json:"ManagementEntity,omitempty"`

	// The IP address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

	// The default gateway of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

	// The IPv4 address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

	// The default IPv4 gateway of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

	// The IPv6 address of the network Element out-of-band management interface.
	OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

	// The default IPv6 gateway of the network Element out-of-band management interface.
	OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

	// The MAC address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandMac string `json:"OutOfBandMac,omitempty"`

	// psus
	// Read Only: true
	Psus []*EquipmentPsuRef `json:"Psus"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The Switch Id of the network Element.
	// Read Only: true
	SwitchID string `json:"SwitchId,omitempty"`

	// A collection of references to the [top.System](mo://top.System) Managed Object.
	// When this managed object is deleted, the referenced [top.System](mo://top.System) MO unsets its reference to this deleted MO.
	TopSystem *TopSystemRef `json:"TopSystem,omitempty"`

	// A collection of references to the [firmware.RunningFirmware](mo://firmware.RunningFirmware) Managed Object.
	// When this managed object is deleted, the referenced [firmware.RunningFirmware](mo://firmware.RunningFirmware) MO unsets its reference to this deleted MO.
	UcsmRunningFirmware *FirmwareRunningFirmwareRef `json:"UcsmRunningFirmware,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NetworkElement) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

		Cards []*EquipmentSwitchCardRef `json:"Cards"`

		Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		InbandIPAddress string `json:"InbandIpAddress,omitempty"`

		InbandIPGateway string `json:"InbandIpGateway,omitempty"`

		InbandIPMask string `json:"InbandIpMask,omitempty"`

		InbandVlan int64 `json:"InbandVlan,omitempty"`

		ManagementContoller *ManagementControllerRef `json:"ManagementContoller,omitempty"`

		ManagementEntity *ManagementEntityRef `json:"ManagementEntity,omitempty"`

		OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

		OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

		OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

		OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

		OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

		OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

		OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

		OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

		OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

		OutOfBandMac string `json:"OutOfBandMac,omitempty"`

		Psus []*EquipmentPsuRef `json:"Psus"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		TopSystem *TopSystemRef `json:"TopSystem,omitempty"`

		UcsmRunningFirmware *FirmwareRunningFirmwareRef `json:"UcsmRunningFirmware,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdminInbandInterfaceState = dataAO1.AdminInbandInterfaceState

	m.Cards = dataAO1.Cards

	m.Fanmodules = dataAO1.Fanmodules

	m.FaultSummary = dataAO1.FaultSummary

	m.InbandIPAddress = dataAO1.InbandIPAddress

	m.InbandIPGateway = dataAO1.InbandIPGateway

	m.InbandIPMask = dataAO1.InbandIPMask

	m.InbandVlan = dataAO1.InbandVlan

	m.ManagementContoller = dataAO1.ManagementContoller

	m.ManagementEntity = dataAO1.ManagementEntity

	m.OutOfBandIPAddress = dataAO1.OutOfBandIPAddress

	m.OutOfBandIPGateway = dataAO1.OutOfBandIPGateway

	m.OutOfBandIPMask = dataAO1.OutOfBandIPMask

	m.OutOfBandIPV4Address = dataAO1.OutOfBandIPV4Address

	m.OutOfBandIPV4Gateway = dataAO1.OutOfBandIPV4Gateway

	m.OutOfBandIPV4Mask = dataAO1.OutOfBandIPV4Mask

	m.OutOfBandIPV6Address = dataAO1.OutOfBandIPV6Address

	m.OutOfBandIPV6Gateway = dataAO1.OutOfBandIPV6Gateway

	m.OutOfBandIPV6Prefix = dataAO1.OutOfBandIPV6Prefix

	m.OutOfBandMac = dataAO1.OutOfBandMac

	m.Psus = dataAO1.Psus

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SwitchID = dataAO1.SwitchID

	m.TopSystem = dataAO1.TopSystem

	m.UcsmRunningFirmware = dataAO1.UcsmRunningFirmware

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NetworkElement) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

		Cards []*EquipmentSwitchCardRef `json:"Cards"`

		Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		InbandIPAddress string `json:"InbandIpAddress,omitempty"`

		InbandIPGateway string `json:"InbandIpGateway,omitempty"`

		InbandIPMask string `json:"InbandIpMask,omitempty"`

		InbandVlan int64 `json:"InbandVlan,omitempty"`

		ManagementContoller *ManagementControllerRef `json:"ManagementContoller,omitempty"`

		ManagementEntity *ManagementEntityRef `json:"ManagementEntity,omitempty"`

		OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

		OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

		OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

		OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

		OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

		OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

		OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

		OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

		OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

		OutOfBandMac string `json:"OutOfBandMac,omitempty"`

		Psus []*EquipmentPsuRef `json:"Psus"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		TopSystem *TopSystemRef `json:"TopSystem,omitempty"`

		UcsmRunningFirmware *FirmwareRunningFirmwareRef `json:"UcsmRunningFirmware,omitempty"`
	}

	dataAO1.AdminInbandInterfaceState = m.AdminInbandInterfaceState

	dataAO1.Cards = m.Cards

	dataAO1.Fanmodules = m.Fanmodules

	dataAO1.FaultSummary = m.FaultSummary

	dataAO1.InbandIPAddress = m.InbandIPAddress

	dataAO1.InbandIPGateway = m.InbandIPGateway

	dataAO1.InbandIPMask = m.InbandIPMask

	dataAO1.InbandVlan = m.InbandVlan

	dataAO1.ManagementContoller = m.ManagementContoller

	dataAO1.ManagementEntity = m.ManagementEntity

	dataAO1.OutOfBandIPAddress = m.OutOfBandIPAddress

	dataAO1.OutOfBandIPGateway = m.OutOfBandIPGateway

	dataAO1.OutOfBandIPMask = m.OutOfBandIPMask

	dataAO1.OutOfBandIPV4Address = m.OutOfBandIPV4Address

	dataAO1.OutOfBandIPV4Gateway = m.OutOfBandIPV4Gateway

	dataAO1.OutOfBandIPV4Mask = m.OutOfBandIPV4Mask

	dataAO1.OutOfBandIPV6Address = m.OutOfBandIPV6Address

	dataAO1.OutOfBandIPV6Gateway = m.OutOfBandIPV6Gateway

	dataAO1.OutOfBandIPV6Prefix = m.OutOfBandIPV6Prefix

	dataAO1.OutOfBandMac = m.OutOfBandMac

	dataAO1.Psus = m.Psus

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SwitchID = m.SwitchID

	dataAO1.TopSystem = m.TopSystem

	dataAO1.UcsmRunningFirmware = m.UcsmRunningFirmware

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this network element
func (m *NetworkElement) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFanmodules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementContoller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePsus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcsmRunningFirmware(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkElement) validateCards(formats strfmt.Registry) error {

	if swag.IsZero(m.Cards) { // not required
		return nil
	}

	for i := 0; i < len(m.Cards); i++ {
		if swag.IsZero(m.Cards[i]) { // not required
			continue
		}

		if m.Cards[i] != nil {
			if err := m.Cards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Cards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkElement) validateFanmodules(formats strfmt.Registry) error {

	if swag.IsZero(m.Fanmodules) { // not required
		return nil
	}

	for i := 0; i < len(m.Fanmodules); i++ {
		if swag.IsZero(m.Fanmodules[i]) { // not required
			continue
		}

		if m.Fanmodules[i] != nil {
			if err := m.Fanmodules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Fanmodules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkElement) validateManagementContoller(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementContoller) { // not required
		return nil
	}

	if m.ManagementContoller != nil {
		if err := m.ManagementContoller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementContoller")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkElement) validateManagementEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementEntity) { // not required
		return nil
	}

	if m.ManagementEntity != nil {
		if err := m.ManagementEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementEntity")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkElement) validatePsus(formats strfmt.Registry) error {

	if swag.IsZero(m.Psus) { // not required
		return nil
	}

	for i := 0; i < len(m.Psus); i++ {
		if swag.IsZero(m.Psus[i]) { // not required
			continue
		}

		if m.Psus[i] != nil {
			if err := m.Psus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Psus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkElement) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkElement) validateTopSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.TopSystem) { // not required
		return nil
	}

	if m.TopSystem != nil {
		if err := m.TopSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TopSystem")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkElement) validateUcsmRunningFirmware(formats strfmt.Registry) error {

	if swag.IsZero(m.UcsmRunningFirmware) { // not required
		return nil
	}

	if m.UcsmRunningFirmware != nil {
		if err := m.UcsmRunningFirmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UcsmRunningFirmware")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkElement) UnmarshalBinary(b []byte) error {
	var res NetworkElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
