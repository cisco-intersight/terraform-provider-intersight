// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationCluster Virtualization:Cluster
//
// Common attributes of a cluster of resources within a datacenter. A cluster is a convenient grouping of resources such as Host, Datastore, etc.
//
// swagger:model virtualizationCluster
type VirtualizationCluster struct {
	VirtualizationSourceDevice

	// Identifies the broad type of the underlying hypervisor.
	// Enum: [Unknown ESXi]
	HypervisorType *string `json:"HypervisorType,omitempty"`

	// The internally generated identity of this cluster. This entity is not manipulated by users. It aids in uniquely identifying the cluster object. In case of VMware, this is a MOR (managed object reference).
	// Read Only: true
	Identity string `json:"Identity,omitempty"`

	// The capacity and usage information for memory on this cluster.
	MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

	// The user-provided name for this cluster to facilitate identification.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// The capacity and usage information for CPU power on this cluster.
	ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

	// Cluster health status as reported by the hypervisor platform.
	// Read Only: true
	// Enum: [Unknown Degraded Critical Ok]
	Status string `json:"Status,omitempty"`

	// Total number of CPU cores in this cluster. It is a cumulative number across all hosts in the cluster.
	TotalCores int64 `json:"TotalCores,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationCluster) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationSourceDevice
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationSourceDevice = aO0

	// AO1
	var dataAO1 struct {
		HypervisorType *string `json:"HypervisorType,omitempty"`

		Identity string `json:"Identity,omitempty"`

		MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

		Name string `json:"Name,omitempty"`

		ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

		Status string `json:"Status,omitempty"`

		TotalCores int64 `json:"TotalCores,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HypervisorType = dataAO1.HypervisorType

	m.Identity = dataAO1.Identity

	m.MemoryCapacity = dataAO1.MemoryCapacity

	m.Name = dataAO1.Name

	m.ProcessorCapacity = dataAO1.ProcessorCapacity

	m.Status = dataAO1.Status

	m.TotalCores = dataAO1.TotalCores

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationCluster) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationSourceDevice)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HypervisorType *string `json:"HypervisorType,omitempty"`

		Identity string `json:"Identity,omitempty"`

		MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

		Name string `json:"Name,omitempty"`

		ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

		Status string `json:"Status,omitempty"`

		TotalCores int64 `json:"TotalCores,omitempty"`
	}

	dataAO1.HypervisorType = m.HypervisorType

	dataAO1.Identity = m.Identity

	dataAO1.MemoryCapacity = m.MemoryCapacity

	dataAO1.Name = m.Name

	dataAO1.ProcessorCapacity = m.ProcessorCapacity

	dataAO1.Status = m.Status

	dataAO1.TotalCores = m.TotalCores

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization cluster
func (m *VirtualizationCluster) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationSourceDevice
	if err := m.VirtualizationSourceDevice.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualizationClusterTypeHypervisorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","ESXi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationClusterTypeHypervisorTypePropEnum = append(virtualizationClusterTypeHypervisorTypePropEnum, v)
	}
}

// property enum
func (m *VirtualizationCluster) validateHypervisorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationClusterTypeHypervisorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationCluster) validateHypervisorType(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervisorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHypervisorTypeEnum("HypervisorType", "body", *m.HypervisorType); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationCluster) validateMemoryCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryCapacity) { // not required
		return nil
	}

	if m.MemoryCapacity != nil {
		if err := m.MemoryCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MemoryCapacity")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationCluster) validateProcessorCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorCapacity) { // not required
		return nil
	}

	if m.ProcessorCapacity != nil {
		if err := m.ProcessorCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessorCapacity")
			}
			return err
		}
	}

	return nil
}

var virtualizationClusterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Degraded","Critical","Ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationClusterTypeStatusPropEnum = append(virtualizationClusterTypeStatusPropEnum, v)
	}
}

// property enum
func (m *VirtualizationCluster) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationClusterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationCluster) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationCluster) UnmarshalBinary(b []byte) error {
	var res VirtualizationCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
