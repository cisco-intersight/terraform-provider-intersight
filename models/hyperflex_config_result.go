// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HyperflexConfigResult Hyperflex:Config Result
//
// Profile configuration (deploy, validation) results with the overall state and detailed result messages.
//
// swagger:model hyperflexConfigResult
type HyperflexConfigResult struct {
	PolicyAbstractConfigResult

	// A collection of references to the [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) Managed Object.
	// When this managed object is deleted, the referenced [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) MO unsets its reference to this deleted MO.
	// Read Only: true
	ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

	// The progress percentage of the running configuration or workflow.
	ConfigProgress string `json:"ConfigProgress,omitempty"`

	// The duration of the running configuration or workflow.
	Duration string `json:"Duration,omitempty"`

	// Detailed result entries for both validation & configration. Each result entry can be error/warning/info messages and the context.
	ResultEntries []*HyperflexConfigResultEntryRef `json:"ResultEntries"`

	// The start time of the configuration or workflow.
	StartTime string `json:"StartTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexConfigResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractConfigResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractConfigResult = aO0

	// AO1
	var dataAO1 struct {
		ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

		ConfigProgress string `json:"ConfigProgress,omitempty"`

		Duration string `json:"Duration,omitempty"`

		ResultEntries []*HyperflexConfigResultEntryRef `json:"ResultEntries"`

		StartTime string `json:"StartTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ClusterProfile = dataAO1.ClusterProfile

	m.ConfigProgress = dataAO1.ConfigProgress

	m.Duration = dataAO1.Duration

	m.ResultEntries = dataAO1.ResultEntries

	m.StartTime = dataAO1.StartTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexConfigResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractConfigResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

		ConfigProgress string `json:"ConfigProgress,omitempty"`

		Duration string `json:"Duration,omitempty"`

		ResultEntries []*HyperflexConfigResultEntryRef `json:"ResultEntries"`

		StartTime string `json:"StartTime,omitempty"`
	}

	dataAO1.ClusterProfile = m.ClusterProfile

	dataAO1.ConfigProgress = m.ConfigProgress

	dataAO1.Duration = m.Duration

	dataAO1.ResultEntries = m.ResultEntries

	dataAO1.StartTime = m.StartTime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex config result
func (m *HyperflexConfigResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractConfigResult
	if err := m.PolicyAbstractConfigResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultEntries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexConfigResult) validateClusterProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfile) { // not required
		return nil
	}

	if m.ClusterProfile != nil {
		if err := m.ClusterProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ClusterProfile")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexConfigResult) validateResultEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.ResultEntries); i++ {
		if swag.IsZero(m.ResultEntries[i]) { // not required
			continue
		}

		if m.ResultEntries[i] != nil {
			if err := m.ResultEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ResultEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexConfigResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexConfigResult) UnmarshalBinary(b []byte) error {
	var res HyperflexConfigResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
