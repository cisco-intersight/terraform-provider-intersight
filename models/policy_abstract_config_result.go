// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyAbstractConfigResult Policy:Abstract Config Result
//
// The results with the overall state and detailed result messages.
//
// swagger:model policyAbstractConfigResult
type PolicyAbstractConfigResult struct {
	MoBaseMo

	// The current running stage of the configuration or workflow.
	ConfigStage string `json:"ConfigStage,omitempty"`

	// Indicates overall configuration state for applying the configuration to the end point. Values  -- Ok, Ok-with-warning, Errored.
	ConfigState string `json:"ConfigState,omitempty"`

	// Indicates overall state for logical model validation. Values  -- Ok, Ok-with-warning, Errored.
	ValidationState string `json:"ValidationState,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyAbstractConfigResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ConfigStage string `json:"ConfigStage,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		ValidationState string `json:"ValidationState,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConfigStage = dataAO1.ConfigStage

	m.ConfigState = dataAO1.ConfigState

	m.ValidationState = dataAO1.ValidationState

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyAbstractConfigResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConfigStage string `json:"ConfigStage,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		ValidationState string `json:"ValidationState,omitempty"`
	}

	dataAO1.ConfigStage = m.ConfigStage

	dataAO1.ConfigState = m.ConfigState

	dataAO1.ValidationState = m.ValidationState

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policy abstract config result
func (m *PolicyAbstractConfigResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyAbstractConfigResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyAbstractConfigResult) UnmarshalBinary(b []byte) error {
	var res PolicyAbstractConfigResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
