// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageVirtualDriveConfig Virtual Drive
//
// This type models a single virtual drive that needs to be created through this policy.
//
// swagger:model storageVirtualDriveConfig
type StorageVirtualDriveConfig struct {
	MoBaseComplexType

	StorageVirtualDriveConfigAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageVirtualDriveConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 StorageVirtualDriveConfigAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.StorageVirtualDriveConfigAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageVirtualDriveConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.StorageVirtualDriveConfigAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage virtual drive config
func (m *StorageVirtualDriveConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with StorageVirtualDriveConfigAO1P1
	if err := m.StorageVirtualDriveConfigAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *StorageVirtualDriveConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageVirtualDriveConfig) UnmarshalBinary(b []byte) error {
	var res StorageVirtualDriveConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageVirtualDriveConfigAO1P1 storage virtual drive config a o1 p1
//
// swagger:model StorageVirtualDriveConfigAO1P1
type StorageVirtualDriveConfigAO1P1 struct {

	// Access policy that host has on this virtual drive.
	// Enum: [Default ReadWrite ReadOnly Blocked]
	AccessPolicy *string `json:"AccessPolicy,omitempty"`

	// This flag enables the use of this virtual drive as a boot drive.
	BootDrive *bool `json:"BootDrive,omitempty"`

	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	// Read Only: true
	DiskGroupName string `json:"DiskGroupName,omitempty"`

	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

	// This property expect disk cache policy.
	// Enum: [Default NoChange Enable Disable]
	DriveCache *string `json:"DriveCache,omitempty"`

	// This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
	ExpandToAvailable *bool `json:"ExpandToAvailable,omitempty"`

	// This property expects the desired IO mode - direct IO or cached IO.
	// Enum: [Default Direct Cached]
	IoPolicy *string `json:"IoPolicy,omitempty"`

	// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
	Name string `json:"Name,omitempty"`

	// Read ahead mode to be used to read data from this virtual drive.
	// Enum: [Default ReadAhead NoReadAhead]
	ReadPolicy *string `json:"ReadPolicy,omitempty"`

	// Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.
	Size int64 `json:"Size,omitempty"`

	// Write mode to be used to write data to this virtual drive.
	// Enum: [Default WriteThrough WriteBackGoodBbu AlwaysWriteBack]
	WritePolicy *string `json:"WritePolicy,omitempty"`

	// storage virtual drive config a o1 p1
	StorageVirtualDriveConfigAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *StorageVirtualDriveConfigAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Access policy that host has on this virtual drive.
		// Enum: [Default ReadWrite ReadOnly Blocked]
		AccessPolicy *string `json:"AccessPolicy,omitempty"`

		// This flag enables the use of this virtual drive as a boot drive.
		BootDrive *bool `json:"BootDrive,omitempty"`

		// Disk group policy that has the disk group in which this virtual drive needs to be created.
		// Read Only: true
		DiskGroupName string `json:"DiskGroupName,omitempty"`

		// Disk group policy that has the disk group in which this virtual drive needs to be created.
		DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

		// This property expect disk cache policy.
		// Enum: [Default NoChange Enable Disable]
		DriveCache *string `json:"DriveCache,omitempty"`

		// This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
		ExpandToAvailable *bool `json:"ExpandToAvailable,omitempty"`

		// This property expects the desired IO mode - direct IO or cached IO.
		// Enum: [Default Direct Cached]
		IoPolicy *string `json:"IoPolicy,omitempty"`

		// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
		Name string `json:"Name,omitempty"`

		// Read ahead mode to be used to read data from this virtual drive.
		// Enum: [Default ReadAhead NoReadAhead]
		ReadPolicy *string `json:"ReadPolicy,omitempty"`

		// Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.
		Size int64 `json:"Size,omitempty"`

		// Write mode to be used to write data to this virtual drive.
		// Enum: [Default WriteThrough WriteBackGoodBbu AlwaysWriteBack]
		WritePolicy *string `json:"WritePolicy,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv StorageVirtualDriveConfigAO1P1

	rcv.AccessPolicy = stage1.AccessPolicy
	rcv.BootDrive = stage1.BootDrive
	rcv.DiskGroupName = stage1.DiskGroupName
	rcv.DiskGroupPolicy = stage1.DiskGroupPolicy
	rcv.DriveCache = stage1.DriveCache
	rcv.ExpandToAvailable = stage1.ExpandToAvailable
	rcv.IoPolicy = stage1.IoPolicy
	rcv.Name = stage1.Name
	rcv.ReadPolicy = stage1.ReadPolicy
	rcv.Size = stage1.Size
	rcv.WritePolicy = stage1.WritePolicy
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AccessPolicy")
	delete(stage2, "BootDrive")
	delete(stage2, "DiskGroupName")
	delete(stage2, "DiskGroupPolicy")
	delete(stage2, "DriveCache")
	delete(stage2, "ExpandToAvailable")
	delete(stage2, "IoPolicy")
	delete(stage2, "Name")
	delete(stage2, "ReadPolicy")
	delete(stage2, "Size")
	delete(stage2, "WritePolicy")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.StorageVirtualDriveConfigAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m StorageVirtualDriveConfigAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Access policy that host has on this virtual drive.
		// Enum: [Default ReadWrite ReadOnly Blocked]
		AccessPolicy *string `json:"AccessPolicy,omitempty"`

		// This flag enables the use of this virtual drive as a boot drive.
		BootDrive *bool `json:"BootDrive,omitempty"`

		// Disk group policy that has the disk group in which this virtual drive needs to be created.
		// Read Only: true
		DiskGroupName string `json:"DiskGroupName,omitempty"`

		// Disk group policy that has the disk group in which this virtual drive needs to be created.
		DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

		// This property expect disk cache policy.
		// Enum: [Default NoChange Enable Disable]
		DriveCache *string `json:"DriveCache,omitempty"`

		// This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
		ExpandToAvailable *bool `json:"ExpandToAvailable,omitempty"`

		// This property expects the desired IO mode - direct IO or cached IO.
		// Enum: [Default Direct Cached]
		IoPolicy *string `json:"IoPolicy,omitempty"`

		// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
		Name string `json:"Name,omitempty"`

		// Read ahead mode to be used to read data from this virtual drive.
		// Enum: [Default ReadAhead NoReadAhead]
		ReadPolicy *string `json:"ReadPolicy,omitempty"`

		// Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.
		Size int64 `json:"Size,omitempty"`

		// Write mode to be used to write data to this virtual drive.
		// Enum: [Default WriteThrough WriteBackGoodBbu AlwaysWriteBack]
		WritePolicy *string `json:"WritePolicy,omitempty"`
	}

	stage1.AccessPolicy = m.AccessPolicy
	stage1.BootDrive = m.BootDrive
	stage1.DiskGroupName = m.DiskGroupName
	stage1.DiskGroupPolicy = m.DiskGroupPolicy
	stage1.DriveCache = m.DriveCache
	stage1.ExpandToAvailable = m.ExpandToAvailable
	stage1.IoPolicy = m.IoPolicy
	stage1.Name = m.Name
	stage1.ReadPolicy = m.ReadPolicy
	stage1.Size = m.Size
	stage1.WritePolicy = m.WritePolicy

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.StorageVirtualDriveConfigAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.StorageVirtualDriveConfigAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this storage virtual drive config a o1 p1
func (m *StorageVirtualDriveConfigAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriveCache(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWritePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageVirtualDriveConfigAO1P1TypeAccessPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","ReadWrite","ReadOnly","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigAO1P1TypeAccessPolicyPropEnum = append(storageVirtualDriveConfigAO1P1TypeAccessPolicyPropEnum, v)
	}
}

const (

	// StorageVirtualDriveConfigAO1P1AccessPolicyDefault captures enum value "Default"
	StorageVirtualDriveConfigAO1P1AccessPolicyDefault string = "Default"

	// StorageVirtualDriveConfigAO1P1AccessPolicyReadWrite captures enum value "ReadWrite"
	StorageVirtualDriveConfigAO1P1AccessPolicyReadWrite string = "ReadWrite"

	// StorageVirtualDriveConfigAO1P1AccessPolicyReadOnly captures enum value "ReadOnly"
	StorageVirtualDriveConfigAO1P1AccessPolicyReadOnly string = "ReadOnly"

	// StorageVirtualDriveConfigAO1P1AccessPolicyBlocked captures enum value "Blocked"
	StorageVirtualDriveConfigAO1P1AccessPolicyBlocked string = "Blocked"
)

// prop value enum
func (m *StorageVirtualDriveConfigAO1P1) validateAccessPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigAO1P1TypeAccessPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfigAO1P1) validateAccessPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessPolicyEnum("AccessPolicy", "body", *m.AccessPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigAO1P1TypeDriveCachePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","NoChange","Enable","Disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigAO1P1TypeDriveCachePropEnum = append(storageVirtualDriveConfigAO1P1TypeDriveCachePropEnum, v)
	}
}

const (

	// StorageVirtualDriveConfigAO1P1DriveCacheDefault captures enum value "Default"
	StorageVirtualDriveConfigAO1P1DriveCacheDefault string = "Default"

	// StorageVirtualDriveConfigAO1P1DriveCacheNoChange captures enum value "NoChange"
	StorageVirtualDriveConfigAO1P1DriveCacheNoChange string = "NoChange"

	// StorageVirtualDriveConfigAO1P1DriveCacheEnable captures enum value "Enable"
	StorageVirtualDriveConfigAO1P1DriveCacheEnable string = "Enable"

	// StorageVirtualDriveConfigAO1P1DriveCacheDisable captures enum value "Disable"
	StorageVirtualDriveConfigAO1P1DriveCacheDisable string = "Disable"
)

// prop value enum
func (m *StorageVirtualDriveConfigAO1P1) validateDriveCacheEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigAO1P1TypeDriveCachePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfigAO1P1) validateDriveCache(formats strfmt.Registry) error {

	if swag.IsZero(m.DriveCache) { // not required
		return nil
	}

	// value enum
	if err := m.validateDriveCacheEnum("DriveCache", "body", *m.DriveCache); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigAO1P1TypeIoPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","Direct","Cached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigAO1P1TypeIoPolicyPropEnum = append(storageVirtualDriveConfigAO1P1TypeIoPolicyPropEnum, v)
	}
}

const (

	// StorageVirtualDriveConfigAO1P1IoPolicyDefault captures enum value "Default"
	StorageVirtualDriveConfigAO1P1IoPolicyDefault string = "Default"

	// StorageVirtualDriveConfigAO1P1IoPolicyDirect captures enum value "Direct"
	StorageVirtualDriveConfigAO1P1IoPolicyDirect string = "Direct"

	// StorageVirtualDriveConfigAO1P1IoPolicyCached captures enum value "Cached"
	StorageVirtualDriveConfigAO1P1IoPolicyCached string = "Cached"
)

// prop value enum
func (m *StorageVirtualDriveConfigAO1P1) validateIoPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigAO1P1TypeIoPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfigAO1P1) validateIoPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IoPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateIoPolicyEnum("IoPolicy", "body", *m.IoPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigAO1P1TypeReadPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","ReadAhead","NoReadAhead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigAO1P1TypeReadPolicyPropEnum = append(storageVirtualDriveConfigAO1P1TypeReadPolicyPropEnum, v)
	}
}

const (

	// StorageVirtualDriveConfigAO1P1ReadPolicyDefault captures enum value "Default"
	StorageVirtualDriveConfigAO1P1ReadPolicyDefault string = "Default"

	// StorageVirtualDriveConfigAO1P1ReadPolicyReadAhead captures enum value "ReadAhead"
	StorageVirtualDriveConfigAO1P1ReadPolicyReadAhead string = "ReadAhead"

	// StorageVirtualDriveConfigAO1P1ReadPolicyNoReadAhead captures enum value "NoReadAhead"
	StorageVirtualDriveConfigAO1P1ReadPolicyNoReadAhead string = "NoReadAhead"
)

// prop value enum
func (m *StorageVirtualDriveConfigAO1P1) validateReadPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigAO1P1TypeReadPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfigAO1P1) validateReadPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateReadPolicyEnum("ReadPolicy", "body", *m.ReadPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigAO1P1TypeWritePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","WriteThrough","WriteBackGoodBbu","AlwaysWriteBack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigAO1P1TypeWritePolicyPropEnum = append(storageVirtualDriveConfigAO1P1TypeWritePolicyPropEnum, v)
	}
}

const (

	// StorageVirtualDriveConfigAO1P1WritePolicyDefault captures enum value "Default"
	StorageVirtualDriveConfigAO1P1WritePolicyDefault string = "Default"

	// StorageVirtualDriveConfigAO1P1WritePolicyWriteThrough captures enum value "WriteThrough"
	StorageVirtualDriveConfigAO1P1WritePolicyWriteThrough string = "WriteThrough"

	// StorageVirtualDriveConfigAO1P1WritePolicyWriteBackGoodBbu captures enum value "WriteBackGoodBbu"
	StorageVirtualDriveConfigAO1P1WritePolicyWriteBackGoodBbu string = "WriteBackGoodBbu"

	// StorageVirtualDriveConfigAO1P1WritePolicyAlwaysWriteBack captures enum value "AlwaysWriteBack"
	StorageVirtualDriveConfigAO1P1WritePolicyAlwaysWriteBack string = "AlwaysWriteBack"
)

// prop value enum
func (m *StorageVirtualDriveConfigAO1P1) validateWritePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigAO1P1TypeWritePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfigAO1P1) validateWritePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.WritePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateWritePolicyEnum("WritePolicy", "body", *m.WritePolicy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageVirtualDriveConfigAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageVirtualDriveConfigAO1P1) UnmarshalBinary(b []byte) error {
	var res StorageVirtualDriveConfigAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
