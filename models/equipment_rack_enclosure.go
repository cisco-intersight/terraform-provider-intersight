// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentRackEnclosure Equipment:Rack Enclosure
//
// A physical holder housing rack servers.
//
// swagger:model equipmentRackEnclosure
type EquipmentRackEnclosure struct {
	EquipmentBase

	// enclosure Id
	// Read Only: true
	EnclosureID int64 `json:"EnclosureId,omitempty"`

	// fanmodules
	// Read Only: true
	Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

	// psus
	// Read Only: true
	Psus []*EquipmentPsuRef `json:"Psus"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// slots
	// Read Only: true
	Slots []*EquipmentRackEnclosureSlotRef `json:"Slots"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentRackEnclosure) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		EnclosureID int64 `json:"EnclosureId,omitempty"`

		Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

		Psus []*EquipmentPsuRef `json:"Psus"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Slots []*EquipmentRackEnclosureSlotRef `json:"Slots"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EnclosureID = dataAO1.EnclosureID

	m.Fanmodules = dataAO1.Fanmodules

	m.Psus = dataAO1.Psus

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Slots = dataAO1.Slots

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentRackEnclosure) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EnclosureID int64 `json:"EnclosureId,omitempty"`

		Fanmodules []*EquipmentFanModuleRef `json:"Fanmodules"`

		Psus []*EquipmentPsuRef `json:"Psus"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Slots []*EquipmentRackEnclosureSlotRef `json:"Slots"`
	}

	dataAO1.EnclosureID = m.EnclosureID

	dataAO1.Fanmodules = m.Fanmodules

	dataAO1.Psus = m.Psus

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Slots = m.Slots

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment rack enclosure
func (m *EquipmentRackEnclosure) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFanmodules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePsus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentRackEnclosure) validateFanmodules(formats strfmt.Registry) error {

	if swag.IsZero(m.Fanmodules) { // not required
		return nil
	}

	for i := 0; i < len(m.Fanmodules); i++ {
		if swag.IsZero(m.Fanmodules[i]) { // not required
			continue
		}

		if m.Fanmodules[i] != nil {
			if err := m.Fanmodules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Fanmodules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EquipmentRackEnclosure) validatePsus(formats strfmt.Registry) error {

	if swag.IsZero(m.Psus) { // not required
		return nil
	}

	for i := 0; i < len(m.Psus); i++ {
		if swag.IsZero(m.Psus[i]) { // not required
			continue
		}

		if m.Psus[i] != nil {
			if err := m.Psus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Psus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EquipmentRackEnclosure) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentRackEnclosure) validateSlots(formats strfmt.Registry) error {

	if swag.IsZero(m.Slots) { // not required
		return nil
	}

	for i := 0; i < len(m.Slots); i++ {
		if swag.IsZero(m.Slots[i]) { // not required
			continue
		}

		if m.Slots[i] != nil {
			if err := m.Slots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentRackEnclosure) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentRackEnclosure) UnmarshalBinary(b []byte) error {
	var res EquipmentRackEnclosure
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
