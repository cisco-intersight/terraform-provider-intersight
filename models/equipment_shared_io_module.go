// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentSharedIoModule Equipment:Shared Io Module
//
// I/O Controller present inside SIOC to provide data path from S-series server to FI.
//
// swagger:model equipmentSharedIoModule
type EquipmentSharedIoModule struct {
	EquipmentBase

	// This field identifies the configuration state for this SIOM Unit.
	// Read Only: true
	ConfigState string `json:"ConfigState,omitempty"`

	// This field identifies the discovery state of SIOM.
	// Read Only: true
	Discovery string `json:"Discovery,omitempty"`

	// A collection of references to the [equipment.SystemIoController](mo://equipment.SystemIoController) Managed Object.
	// When this managed object is deleted, the referenced [equipment.SystemIoController](mo://equipment.SystemIoController) MO unsets its reference to this deleted MO.
	EquipmentSystemIoController *EquipmentSystemIoControllerRef `json:"EquipmentSystemIoController,omitempty"`

	// This field identifies the MAC of IOM-A side.
	// Read Only: true
	MacOfSharedIomAside string `json:"MacOfSharedIomAside,omitempty"`

	// This field identifies the MAC of IOM-B side.
	// Read Only: true
	MacOfSharedIomBside string `json:"MacOfSharedIomBside,omitempty"`

	// This field identifies the SIOM operational state.
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// This field identifies the Part Number for this SIOM Unit.
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// port groups
	// Read Only: true
	PortGroups []*PortGroupRef `json:"PortGroups"`

	// This field identifies the reachability to FI-A and B side.
	// Read Only: true
	Reachability string `json:"Reachability,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// User label configured for the SIOM.
	// Read Only: true
	UsrLbl string `json:"UsrLbl,omitempty"`

	// This field identifies the vendor id for this SIOM Unit.
	// Read Only: true
	Vid string `json:"Vid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentSharedIoModule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		Discovery string `json:"Discovery,omitempty"`

		EquipmentSystemIoController *EquipmentSystemIoControllerRef `json:"EquipmentSystemIoController,omitempty"`

		MacOfSharedIomAside string `json:"MacOfSharedIomAside,omitempty"`

		MacOfSharedIomBside string `json:"MacOfSharedIomBside,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		PortGroups []*PortGroupRef `json:"PortGroups"`

		Reachability string `json:"Reachability,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		UsrLbl string `json:"UsrLbl,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConfigState = dataAO1.ConfigState

	m.Discovery = dataAO1.Discovery

	m.EquipmentSystemIoController = dataAO1.EquipmentSystemIoController

	m.MacOfSharedIomAside = dataAO1.MacOfSharedIomAside

	m.MacOfSharedIomBside = dataAO1.MacOfSharedIomBside

	m.OperState = dataAO1.OperState

	m.PartNumber = dataAO1.PartNumber

	m.PortGroups = dataAO1.PortGroups

	m.Reachability = dataAO1.Reachability

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.UsrLbl = dataAO1.UsrLbl

	m.Vid = dataAO1.Vid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentSharedIoModule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		Discovery string `json:"Discovery,omitempty"`

		EquipmentSystemIoController *EquipmentSystemIoControllerRef `json:"EquipmentSystemIoController,omitempty"`

		MacOfSharedIomAside string `json:"MacOfSharedIomAside,omitempty"`

		MacOfSharedIomBside string `json:"MacOfSharedIomBside,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		PortGroups []*PortGroupRef `json:"PortGroups"`

		Reachability string `json:"Reachability,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		UsrLbl string `json:"UsrLbl,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}

	dataAO1.ConfigState = m.ConfigState

	dataAO1.Discovery = m.Discovery

	dataAO1.EquipmentSystemIoController = m.EquipmentSystemIoController

	dataAO1.MacOfSharedIomAside = m.MacOfSharedIomAside

	dataAO1.MacOfSharedIomBside = m.MacOfSharedIomBside

	dataAO1.OperState = m.OperState

	dataAO1.PartNumber = m.PartNumber

	dataAO1.PortGroups = m.PortGroups

	dataAO1.Reachability = m.Reachability

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.UsrLbl = m.UsrLbl

	dataAO1.Vid = m.Vid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment shared io module
func (m *EquipmentSharedIoModule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentSystemIoController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentSharedIoModule) validateEquipmentSystemIoController(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentSystemIoController) { // not required
		return nil
	}

	if m.EquipmentSystemIoController != nil {
		if err := m.EquipmentSystemIoController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentSystemIoController")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentSharedIoModule) validatePortGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.PortGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PortGroups); i++ {
		if swag.IsZero(m.PortGroups[i]) { // not required
			continue
		}

		if m.PortGroups[i] != nil {
			if err := m.PortGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PortGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EquipmentSharedIoModule) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentSharedIoModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentSharedIoModule) UnmarshalBinary(b []byte) error {
	var res EquipmentSharedIoModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
