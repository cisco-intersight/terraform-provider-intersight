// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowWorkerTask Workflow:Worker Task
//
// A WorkerTask is a simple task and the smallest granularity of work that can be defined as a task.
//
// swagger:model workflowWorkerTask
type WorkflowWorkerTask struct {
	WorkflowAbstractWorkerTask

	// Specify the catalog moid that this task belongs.
	CatalogMoid string `json:"CatalogMoid,omitempty"`

	// The resolved referenced task definition managed object.
	// Read Only: true
	TaskDefinitionID string `json:"TaskDefinitionId,omitempty"`

	// The qualified name of task that should be executed.
	TaskDefinitionName string `json:"TaskDefinitionName,omitempty"`

	// The task definition version to use in this workflow. When no version is specified then the default version of the task at the time of creating or updating this workflow is used.
	Version int64 `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowWorkerTask) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAbstractWorkerTask
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAbstractWorkerTask = aO0

	// AO1
	var dataAO1 struct {
		CatalogMoid string `json:"CatalogMoid,omitempty"`

		TaskDefinitionID string `json:"TaskDefinitionId,omitempty"`

		TaskDefinitionName string `json:"TaskDefinitionName,omitempty"`

		Version int64 `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CatalogMoid = dataAO1.CatalogMoid

	m.TaskDefinitionID = dataAO1.TaskDefinitionID

	m.TaskDefinitionName = dataAO1.TaskDefinitionName

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowWorkerTask) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowAbstractWorkerTask)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CatalogMoid string `json:"CatalogMoid,omitempty"`

		TaskDefinitionID string `json:"TaskDefinitionId,omitempty"`

		TaskDefinitionName string `json:"TaskDefinitionName,omitempty"`

		Version int64 `json:"Version,omitempty"`
	}

	dataAO1.CatalogMoid = m.CatalogMoid

	dataAO1.TaskDefinitionID = m.TaskDefinitionID

	dataAO1.TaskDefinitionName = m.TaskDefinitionName

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow worker task
func (m *WorkflowWorkerTask) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAbstractWorkerTask
	if err := m.WorkflowAbstractWorkerTask.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowWorkerTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowWorkerTask) UnmarshalBinary(b []byte) error {
	var res WorkflowWorkerTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
