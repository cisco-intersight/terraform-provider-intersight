// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerConfigChangeDetail Server:Config Change Detail
//
// The configuration change details are captured here.
//
// swagger:model serverConfigChangeDetail
type ServerConfigChangeDetail struct {
	PolicyAbstractConfigChangeDetail

	// A collection of references to the [server.Profile](mo://server.Profile) Managed Object.
	// When this managed object is deleted, the referenced [server.Profile](mo://server.Profile) MO unsets its reference to this deleted MO.
	// Read Only: true
	Profile *ServerProfileRef `json:"Profile,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ServerConfigChangeDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractConfigChangeDetail
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractConfigChangeDetail = aO0

	// AO1
	var dataAO1 struct {
		Profile *ServerProfileRef `json:"Profile,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Profile = dataAO1.Profile

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ServerConfigChangeDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractConfigChangeDetail)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Profile *ServerProfileRef `json:"Profile,omitempty"`
	}

	dataAO1.Profile = m.Profile

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this server config change detail
func (m *ServerConfigChangeDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractConfigChangeDetail
	if err := m.PolicyAbstractConfigChangeDetail.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerConfigChangeDetail) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerConfigChangeDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerConfigChangeDetail) UnmarshalBinary(b []byte) error {
	var res ServerConfigChangeDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
