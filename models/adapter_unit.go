// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdapterUnit Adapter:Unit
//
// The physical adapter present on a server.
//
// swagger:model adapterUnit
type AdapterUnit struct {
	EquipmentBase

	// Unique Identifier of an adapter Unit within a Rack Interface.
	// Read Only: true
	AdapterID string `json:"AdapterId,omitempty"`

	// base mac address
	// Read Only: true
	BaseMacAddress string `json:"BaseMacAddress,omitempty"`

	// A collection of references to the [compute.Blade](mo://compute.Blade) Managed Object.
	// When this managed object is deleted, the referenced [compute.Blade](mo://compute.Blade) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

	// A collection of references to the [compute.RackUnit](mo://compute.RackUnit) Managed Object.
	// When this managed object is deleted, the referenced [compute.RackUnit](mo://compute.RackUnit) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

	// controller
	// Read Only: true
	Controller *ManagementControllerRef `json:"Controller,omitempty"`

	// ext eth ifs
	// Read Only: true
	ExtEthIfs []*AdapterExtEthInterfaceRef `json:"ExtEthIfs"`

	// host eth ifs
	// Read Only: true
	HostEthIfs []*AdapterHostEthInterfaceRef `json:"HostEthIfs"`

	// host fc ifs
	// Read Only: true
	HostFcIfs []*AdapterHostFcInterfaceRef `json:"HostFcIfs"`

	// host iscsi ifs
	// Read Only: true
	HostIscsiIfs []*AdapterHostIscsiInterfaceRef `json:"HostIscsiIfs"`

	// integrated
	// Read Only: true
	Integrated string `json:"Integrated,omitempty"`

	// oper state
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// operability
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// part number
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// pci slot
	// Read Only: true
	PciSlot string `json:"PciSlot,omitempty"`

	// power
	// Read Only: true
	Power string `json:"Power,omitempty"`

	// presence
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// thermal
	// Read Only: true
	Thermal string `json:"Thermal,omitempty"`

	// vid
	// Read Only: true
	Vid string `json:"Vid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AdapterUnit) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		AdapterID string `json:"AdapterId,omitempty"`

		BaseMacAddress string `json:"BaseMacAddress,omitempty"`

		ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		Controller *ManagementControllerRef `json:"Controller,omitempty"`

		ExtEthIfs []*AdapterExtEthInterfaceRef `json:"ExtEthIfs"`

		HostEthIfs []*AdapterHostEthInterfaceRef `json:"HostEthIfs"`

		HostFcIfs []*AdapterHostFcInterfaceRef `json:"HostFcIfs"`

		HostIscsiIfs []*AdapterHostIscsiInterfaceRef `json:"HostIscsiIfs"`

		Integrated string `json:"Integrated,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		Power string `json:"Power,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdapterID = dataAO1.AdapterID

	m.BaseMacAddress = dataAO1.BaseMacAddress

	m.ComputeBlade = dataAO1.ComputeBlade

	m.ComputeRackUnit = dataAO1.ComputeRackUnit

	m.Controller = dataAO1.Controller

	m.ExtEthIfs = dataAO1.ExtEthIfs

	m.HostEthIfs = dataAO1.HostEthIfs

	m.HostFcIfs = dataAO1.HostFcIfs

	m.HostIscsiIfs = dataAO1.HostIscsiIfs

	m.Integrated = dataAO1.Integrated

	m.OperState = dataAO1.OperState

	m.Operability = dataAO1.Operability

	m.PartNumber = dataAO1.PartNumber

	m.PciSlot = dataAO1.PciSlot

	m.Power = dataAO1.Power

	m.Presence = dataAO1.Presence

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Thermal = dataAO1.Thermal

	m.Vid = dataAO1.Vid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AdapterUnit) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdapterID string `json:"AdapterId,omitempty"`

		BaseMacAddress string `json:"BaseMacAddress,omitempty"`

		ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		Controller *ManagementControllerRef `json:"Controller,omitempty"`

		ExtEthIfs []*AdapterExtEthInterfaceRef `json:"ExtEthIfs"`

		HostEthIfs []*AdapterHostEthInterfaceRef `json:"HostEthIfs"`

		HostFcIfs []*AdapterHostFcInterfaceRef `json:"HostFcIfs"`

		HostIscsiIfs []*AdapterHostIscsiInterfaceRef `json:"HostIscsiIfs"`

		Integrated string `json:"Integrated,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		Power string `json:"Power,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}

	dataAO1.AdapterID = m.AdapterID

	dataAO1.BaseMacAddress = m.BaseMacAddress

	dataAO1.ComputeBlade = m.ComputeBlade

	dataAO1.ComputeRackUnit = m.ComputeRackUnit

	dataAO1.Controller = m.Controller

	dataAO1.ExtEthIfs = m.ExtEthIfs

	dataAO1.HostEthIfs = m.HostEthIfs

	dataAO1.HostFcIfs = m.HostFcIfs

	dataAO1.HostIscsiIfs = m.HostIscsiIfs

	dataAO1.Integrated = m.Integrated

	dataAO1.OperState = m.OperState

	dataAO1.Operability = m.Operability

	dataAO1.PartNumber = m.PartNumber

	dataAO1.PciSlot = m.PciSlot

	dataAO1.Power = m.Power

	dataAO1.Presence = m.Presence

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Thermal = m.Thermal

	dataAO1.Vid = m.Vid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this adapter unit
func (m *AdapterUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeBlade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeRackUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtEthIfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostEthIfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostFcIfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostIscsiIfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdapterUnit) validateComputeBlade(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeBlade) { // not required
		return nil
	}

	if m.ComputeBlade != nil {
		if err := m.ComputeBlade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeBlade")
			}
			return err
		}
	}

	return nil
}

func (m *AdapterUnit) validateComputeRackUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeRackUnit) { // not required
		return nil
	}

	if m.ComputeRackUnit != nil {
		if err := m.ComputeRackUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeRackUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AdapterUnit) validateController(formats strfmt.Registry) error {

	if swag.IsZero(m.Controller) { // not required
		return nil
	}

	if m.Controller != nil {
		if err := m.Controller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Controller")
			}
			return err
		}
	}

	return nil
}

func (m *AdapterUnit) validateExtEthIfs(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtEthIfs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtEthIfs); i++ {
		if swag.IsZero(m.ExtEthIfs[i]) { // not required
			continue
		}

		if m.ExtEthIfs[i] != nil {
			if err := m.ExtEthIfs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExtEthIfs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdapterUnit) validateHostEthIfs(formats strfmt.Registry) error {

	if swag.IsZero(m.HostEthIfs) { // not required
		return nil
	}

	for i := 0; i < len(m.HostEthIfs); i++ {
		if swag.IsZero(m.HostEthIfs[i]) { // not required
			continue
		}

		if m.HostEthIfs[i] != nil {
			if err := m.HostEthIfs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HostEthIfs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdapterUnit) validateHostFcIfs(formats strfmt.Registry) error {

	if swag.IsZero(m.HostFcIfs) { // not required
		return nil
	}

	for i := 0; i < len(m.HostFcIfs); i++ {
		if swag.IsZero(m.HostFcIfs[i]) { // not required
			continue
		}

		if m.HostFcIfs[i] != nil {
			if err := m.HostFcIfs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HostFcIfs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdapterUnit) validateHostIscsiIfs(formats strfmt.Registry) error {

	if swag.IsZero(m.HostIscsiIfs) { // not required
		return nil
	}

	for i := 0; i < len(m.HostIscsiIfs); i++ {
		if swag.IsZero(m.HostIscsiIfs[i]) { // not required
			continue
		}

		if m.HostIscsiIfs[i] != nil {
			if err := m.HostIscsiIfs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HostIscsiIfs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdapterUnit) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdapterUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdapterUnit) UnmarshalBinary(b []byte) error {
	var res AdapterUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
