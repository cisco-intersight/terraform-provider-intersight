// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaRelationshipDefinition Meta:Relationship Definition
//
// Definitions for the relationship in a meta.
//
// swagger:model metaRelationshipDefinition
type MetaRelationshipDefinition struct {
	MoBaseComplexType

	MetaRelationshipDefinitionAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MetaRelationshipDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 MetaRelationshipDefinitionAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.MetaRelationshipDefinitionAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MetaRelationshipDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.MetaRelationshipDefinitionAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this meta relationship definition
func (m *MetaRelationshipDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MetaRelationshipDefinitionAO1P1
	if err := m.MetaRelationshipDefinitionAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MetaRelationshipDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaRelationshipDefinition) UnmarshalBinary(b []byte) error {
	var res MetaRelationshipDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetaRelationshipDefinitionAO1P1 meta relationship definition a o1 p1
//
// swagger:model MetaRelationshipDefinitionAO1P1
type MetaRelationshipDefinitionAO1P1 struct {

	// API access definition for this relationship.
	// Read Only: true
	// Enum: [NoAccess ReadOnly CreateOnly ReadWrite WriteOnly ReadOnCreate]
	APIAccess string `json:"ApiAccess,omitempty"`

	// Specifies whether the relationship is a collection.
	// Read Only: true
	Collection *bool `json:"Collection,omitempty"`

	// The name of the relationship.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Fully qualified type of the foreign managed object.
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// meta relationship definition a o1 p1
	MetaRelationshipDefinitionAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *MetaRelationshipDefinitionAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// API access definition for this relationship.
		// Read Only: true
		// Enum: [NoAccess ReadOnly CreateOnly ReadWrite WriteOnly ReadOnCreate]
		APIAccess string `json:"ApiAccess,omitempty"`

		// Specifies whether the relationship is a collection.
		// Read Only: true
		Collection *bool `json:"Collection,omitempty"`

		// The name of the relationship.
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// Fully qualified type of the foreign managed object.
		// Read Only: true
		Type string `json:"Type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv MetaRelationshipDefinitionAO1P1

	rcv.APIAccess = stage1.APIAccess
	rcv.Collection = stage1.Collection
	rcv.Name = stage1.Name
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ApiAccess")
	delete(stage2, "Collection")
	delete(stage2, "Name")
	delete(stage2, "Type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.MetaRelationshipDefinitionAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m MetaRelationshipDefinitionAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// API access definition for this relationship.
		// Read Only: true
		// Enum: [NoAccess ReadOnly CreateOnly ReadWrite WriteOnly ReadOnCreate]
		APIAccess string `json:"ApiAccess,omitempty"`

		// Specifies whether the relationship is a collection.
		// Read Only: true
		Collection *bool `json:"Collection,omitempty"`

		// The name of the relationship.
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// Fully qualified type of the foreign managed object.
		// Read Only: true
		Type string `json:"Type,omitempty"`
	}

	stage1.APIAccess = m.APIAccess
	stage1.Collection = m.Collection
	stage1.Name = m.Name
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.MetaRelationshipDefinitionAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.MetaRelationshipDefinitionAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this meta relationship definition a o1 p1
func (m *MetaRelationshipDefinitionAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIAccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metaRelationshipDefinitionAO1P1TypeAPIAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoAccess","ReadOnly","CreateOnly","ReadWrite","WriteOnly","ReadOnCreate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaRelationshipDefinitionAO1P1TypeAPIAccessPropEnum = append(metaRelationshipDefinitionAO1P1TypeAPIAccessPropEnum, v)
	}
}

const (

	// MetaRelationshipDefinitionAO1P1APIAccessNoAccess captures enum value "NoAccess"
	MetaRelationshipDefinitionAO1P1APIAccessNoAccess string = "NoAccess"

	// MetaRelationshipDefinitionAO1P1APIAccessReadOnly captures enum value "ReadOnly"
	MetaRelationshipDefinitionAO1P1APIAccessReadOnly string = "ReadOnly"

	// MetaRelationshipDefinitionAO1P1APIAccessCreateOnly captures enum value "CreateOnly"
	MetaRelationshipDefinitionAO1P1APIAccessCreateOnly string = "CreateOnly"

	// MetaRelationshipDefinitionAO1P1APIAccessReadWrite captures enum value "ReadWrite"
	MetaRelationshipDefinitionAO1P1APIAccessReadWrite string = "ReadWrite"

	// MetaRelationshipDefinitionAO1P1APIAccessWriteOnly captures enum value "WriteOnly"
	MetaRelationshipDefinitionAO1P1APIAccessWriteOnly string = "WriteOnly"

	// MetaRelationshipDefinitionAO1P1APIAccessReadOnCreate captures enum value "ReadOnCreate"
	MetaRelationshipDefinitionAO1P1APIAccessReadOnCreate string = "ReadOnCreate"
)

// prop value enum
func (m *MetaRelationshipDefinitionAO1P1) validateAPIAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaRelationshipDefinitionAO1P1TypeAPIAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaRelationshipDefinitionAO1P1) validateAPIAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.APIAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateAPIAccessEnum("ApiAccess", "body", m.APIAccess); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaRelationshipDefinitionAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaRelationshipDefinitionAO1P1) UnmarshalBinary(b []byte) error {
	var res MetaRelationshipDefinitionAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
