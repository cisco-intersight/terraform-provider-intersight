// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareDirectDownload Firmware:Direct Download
//
// A specification for downloading the image from Cisco or appliance repository or user provided HTTP file server that hosts the image for firmware upgrade.
//
// swagger:model firmwareDirectDownload
type FirmwareDirectDownload struct {
	MoBaseComplexType

	FirmwareDirectDownloadAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareDirectDownload) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 FirmwareDirectDownloadAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.FirmwareDirectDownloadAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareDirectDownload) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.FirmwareDirectDownloadAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware direct download
func (m *FirmwareDirectDownload) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with FirmwareDirectDownloadAO1P1
	if err := m.FirmwareDirectDownloadAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareDirectDownload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareDirectDownload) UnmarshalBinary(b []byte) error {
	var res FirmwareDirectDownload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareDirectDownloadAO1P1 firmware direct download a o1 p1
//
// swagger:model FirmwareDirectDownloadAO1P1
type FirmwareDirectDownloadAO1P1 struct {

	// HTTP Server option when the image source is a local https server.
	HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

	// Source type referring the image to be downloaded from CCO or from a local https server.
	// Enum: [cisco localHttp]
	ImageSource *string `json:"ImageSource,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Password as configured on the local https server.
	Password string `json:"Password,omitempty"`

	// Option to control the upgrade, e.g., sd_upgrade_mount_only - download the image into sd and upgrade wait for the server on-next boot.
	// Enum: [sd_upgrade_mount_only sd_download_only sd_upgrade_only sd_upgrade_full]
	Upgradeoption *string `json:"Upgradeoption,omitempty"`

	// Username as configured on the local https server.
	Username string `json:"Username,omitempty"`

	// firmware direct download a o1 p1
	FirmwareDirectDownloadAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FirmwareDirectDownloadAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// HTTP Server option when the image source is a local https server.
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		// Source type referring the image to be downloaded from CCO or from a local https server.
		// Enum: [cisco localHttp]
		ImageSource *string `json:"ImageSource,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Password as configured on the local https server.
		Password string `json:"Password,omitempty"`

		// Option to control the upgrade, e.g., sd_upgrade_mount_only - download the image into sd and upgrade wait for the server on-next boot.
		// Enum: [sd_upgrade_mount_only sd_download_only sd_upgrade_only sd_upgrade_full]
		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		// Username as configured on the local https server.
		Username string `json:"Username,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FirmwareDirectDownloadAO1P1

	rcv.HTTPServer = stage1.HTTPServer
	rcv.ImageSource = stage1.ImageSource
	rcv.IsPasswordSet = stage1.IsPasswordSet
	rcv.Password = stage1.Password
	rcv.Upgradeoption = stage1.Upgradeoption
	rcv.Username = stage1.Username
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "HttpServer")
	delete(stage2, "ImageSource")
	delete(stage2, "IsPasswordSet")
	delete(stage2, "Password")
	delete(stage2, "Upgradeoption")
	delete(stage2, "Username")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FirmwareDirectDownloadAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FirmwareDirectDownloadAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// HTTP Server option when the image source is a local https server.
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		// Source type referring the image to be downloaded from CCO or from a local https server.
		// Enum: [cisco localHttp]
		ImageSource *string `json:"ImageSource,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Password as configured on the local https server.
		Password string `json:"Password,omitempty"`

		// Option to control the upgrade, e.g., sd_upgrade_mount_only - download the image into sd and upgrade wait for the server on-next boot.
		// Enum: [sd_upgrade_mount_only sd_download_only sd_upgrade_only sd_upgrade_full]
		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		// Username as configured on the local https server.
		Username string `json:"Username,omitempty"`
	}

	stage1.HTTPServer = m.HTTPServer
	stage1.ImageSource = m.ImageSource
	stage1.IsPasswordSet = m.IsPasswordSet
	stage1.Password = m.Password
	stage1.Upgradeoption = m.Upgradeoption
	stage1.Username = m.Username

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FirmwareDirectDownloadAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FirmwareDirectDownloadAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this firmware direct download a o1 p1
func (m *FirmwareDirectDownloadAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeoption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareDirectDownloadAO1P1) validateHTTPServer(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPServer) { // not required
		return nil
	}

	if m.HTTPServer != nil {
		if err := m.HTTPServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpServer")
			}
			return err
		}
	}

	return nil
}

var firmwareDirectDownloadAO1P1TypeImageSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cisco","localHttp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareDirectDownloadAO1P1TypeImageSourcePropEnum = append(firmwareDirectDownloadAO1P1TypeImageSourcePropEnum, v)
	}
}

const (

	// FirmwareDirectDownloadAO1P1ImageSourceCisco captures enum value "cisco"
	FirmwareDirectDownloadAO1P1ImageSourceCisco string = "cisco"

	// FirmwareDirectDownloadAO1P1ImageSourceLocalHTTP captures enum value "localHttp"
	FirmwareDirectDownloadAO1P1ImageSourceLocalHTTP string = "localHttp"
)

// prop value enum
func (m *FirmwareDirectDownloadAO1P1) validateImageSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareDirectDownloadAO1P1TypeImageSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareDirectDownloadAO1P1) validateImageSource(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageSourceEnum("ImageSource", "body", *m.ImageSource); err != nil {
		return err
	}

	return nil
}

var firmwareDirectDownloadAO1P1TypeUpgradeoptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sd_upgrade_mount_only","sd_download_only","sd_upgrade_only","sd_upgrade_full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareDirectDownloadAO1P1TypeUpgradeoptionPropEnum = append(firmwareDirectDownloadAO1P1TypeUpgradeoptionPropEnum, v)
	}
}

const (

	// FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeMountOnly captures enum value "sd_upgrade_mount_only"
	FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeMountOnly string = "sd_upgrade_mount_only"

	// FirmwareDirectDownloadAO1P1UpgradeoptionSdDownloadOnly captures enum value "sd_download_only"
	FirmwareDirectDownloadAO1P1UpgradeoptionSdDownloadOnly string = "sd_download_only"

	// FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeOnly captures enum value "sd_upgrade_only"
	FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeOnly string = "sd_upgrade_only"

	// FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeFull captures enum value "sd_upgrade_full"
	FirmwareDirectDownloadAO1P1UpgradeoptionSdUpgradeFull string = "sd_upgrade_full"
)

// prop value enum
func (m *FirmwareDirectDownloadAO1P1) validateUpgradeoptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareDirectDownloadAO1P1TypeUpgradeoptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareDirectDownloadAO1P1) validateUpgradeoption(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgradeoption) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeoptionEnum("Upgradeoption", "body", *m.Upgradeoption); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareDirectDownloadAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareDirectDownloadAO1P1) UnmarshalBinary(b []byte) error {
	var res FirmwareDirectDownloadAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
