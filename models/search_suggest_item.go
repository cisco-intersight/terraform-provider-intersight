// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchSuggestItem Search:Suggest Item
//
// The Suggester service entry point to suggest Intersight REST resources using Elastic Search suggester API syntax.
// The suggest feature suggests similar looking terms based on a provided text by using a suggester.
// See [Search API query syntax](/apidocs/introduction/query/#global-search-api) for details
// about the suggester query syntax.
//
// swagger:model searchSuggestItem
type SearchSuggestItem struct {
	MoBaseMo

	// Flag for returning complete objects that matched the global search criteria.
	CompleteMo *bool `json:"CompleteMo,omitempty"`

	// Additional filter parameters for global search. You can also specify OData select fields here. Maximum Query Length is limited to 10000.
	Rawquery string `json:"Rawquery,omitempty"`

	// Starting offset for the results to be returned from external search engine.
	Skip int64 `json:"Skip,omitempty"`

	// Main search term used for global search across all Managed Objects that has search enabled. Search Term can be up to 200 characters long.
	SuggestTerm string `json:"SuggestTerm,omitempty"`

	// Maximum number of results to be returned from external search engine.
	Top int64 `json:"Top,omitempty"`

	// Object type filter of a Managed Object. Search will be restricted only on the specified object types.  Do not provide IndexMoTypes filter in the rawquery, if you specify values in this field.
	Type string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SearchSuggestItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		CompleteMo *bool `json:"CompleteMo,omitempty"`

		Rawquery string `json:"Rawquery,omitempty"`

		Skip int64 `json:"Skip,omitempty"`

		SuggestTerm string `json:"SuggestTerm,omitempty"`

		Top int64 `json:"Top,omitempty"`

		Type string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CompleteMo = dataAO1.CompleteMo

	m.Rawquery = dataAO1.Rawquery

	m.Skip = dataAO1.Skip

	m.SuggestTerm = dataAO1.SuggestTerm

	m.Top = dataAO1.Top

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SearchSuggestItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CompleteMo *bool `json:"CompleteMo,omitempty"`

		Rawquery string `json:"Rawquery,omitempty"`

		Skip int64 `json:"Skip,omitempty"`

		SuggestTerm string `json:"SuggestTerm,omitempty"`

		Top int64 `json:"Top,omitempty"`

		Type string `json:"Type,omitempty"`
	}

	dataAO1.CompleteMo = m.CompleteMo

	dataAO1.Rawquery = m.Rawquery

	dataAO1.Skip = m.Skip

	dataAO1.SuggestTerm = m.SuggestTerm

	dataAO1.Top = m.Top

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search suggest item
func (m *SearchSuggestItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SearchSuggestItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchSuggestItem) UnmarshalBinary(b []byte) error {
	var res SearchSuggestItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
