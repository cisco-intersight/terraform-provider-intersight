// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyAbstractConfigChangeDetail Policy:Abstract Config Change Detail
//
// Defines the details of a configuration change including change type, disruption and description of the change.
//
// swagger:model policyAbstractConfigChangeDetail
type PolicyAbstractConfigChangeDetail struct {
	MoBaseMo

	// Type of the configuration change.
	Changes []string `json:"Changes"`

	// Context information on the change.
	ConfigChangeContext *PolicyConfigResultContext `json:"ConfigChangeContext,omitempty"`

	// Config change flag to differentiate Pending-changes and Config-drift.
	// Enum: [Pending-changes Drift-changes]
	ConfigChangeFlag *string `json:"ConfigChangeFlag,omitempty"`

	// Possible disruptions the configuration change might cause.
	Disruptions []string `json:"Disruptions"`

	// Detailed description of the config change.
	Message string `json:"Message,omitempty"`

	// Modification status of the mo in this config change.
	// Enum: [None Created Modified Deleted]
	ModStatus *string `json:"ModStatus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyAbstractConfigChangeDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Changes []string `json:"Changes"`

		ConfigChangeContext *PolicyConfigResultContext `json:"ConfigChangeContext,omitempty"`

		ConfigChangeFlag *string `json:"ConfigChangeFlag,omitempty"`

		Disruptions []string `json:"Disruptions"`

		Message string `json:"Message,omitempty"`

		ModStatus *string `json:"ModStatus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Changes = dataAO1.Changes

	m.ConfigChangeContext = dataAO1.ConfigChangeContext

	m.ConfigChangeFlag = dataAO1.ConfigChangeFlag

	m.Disruptions = dataAO1.Disruptions

	m.Message = dataAO1.Message

	m.ModStatus = dataAO1.ModStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyAbstractConfigChangeDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Changes []string `json:"Changes"`

		ConfigChangeContext *PolicyConfigResultContext `json:"ConfigChangeContext,omitempty"`

		ConfigChangeFlag *string `json:"ConfigChangeFlag,omitempty"`

		Disruptions []string `json:"Disruptions"`

		Message string `json:"Message,omitempty"`

		ModStatus *string `json:"ModStatus,omitempty"`
	}

	dataAO1.Changes = m.Changes

	dataAO1.ConfigChangeContext = m.ConfigChangeContext

	dataAO1.ConfigChangeFlag = m.ConfigChangeFlag

	dataAO1.Disruptions = m.Disruptions

	dataAO1.Message = m.Message

	dataAO1.ModStatus = m.ModStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policy abstract config change detail
func (m *PolicyAbstractConfigChangeDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigChangeContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigChangeFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyAbstractConfigChangeDetail) validateConfigChangeContext(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigChangeContext) { // not required
		return nil
	}

	if m.ConfigChangeContext != nil {
		if err := m.ConfigChangeContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigChangeContext")
			}
			return err
		}
	}

	return nil
}

var policyAbstractConfigChangeDetailTypeConfigChangeFlagPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending-changes","Drift-changes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyAbstractConfigChangeDetailTypeConfigChangeFlagPropEnum = append(policyAbstractConfigChangeDetailTypeConfigChangeFlagPropEnum, v)
	}
}

// property enum
func (m *PolicyAbstractConfigChangeDetail) validateConfigChangeFlagEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyAbstractConfigChangeDetailTypeConfigChangeFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyAbstractConfigChangeDetail) validateConfigChangeFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigChangeFlag) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigChangeFlagEnum("ConfigChangeFlag", "body", *m.ConfigChangeFlag); err != nil {
		return err
	}

	return nil
}

var policyAbstractConfigChangeDetailTypeModStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Created","Modified","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyAbstractConfigChangeDetailTypeModStatusPropEnum = append(policyAbstractConfigChangeDetailTypeModStatusPropEnum, v)
	}
}

// property enum
func (m *PolicyAbstractConfigChangeDetail) validateModStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyAbstractConfigChangeDetailTypeModStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyAbstractConfigChangeDetail) validateModStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ModStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateModStatusEnum("ModStatus", "body", *m.ModStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyAbstractConfigChangeDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyAbstractConfigChangeDetail) UnmarshalBinary(b []byte) error {
	var res PolicyAbstractConfigChangeDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
