// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareUpgradeStatus Firmware:Upgrade Status
//
// Status of the upgrade operation includes the status of download and upgrade stages.
//
// swagger:model firmwareUpgradeStatus
type FirmwareUpgradeStatus struct {
	MoBaseMo

	// The error message from the endpoint during the download.
	DownloadError string `json:"DownloadError,omitempty"`

	// The percentage of the image downloaded in the endpoint.
	DownloadPercentage int64 `json:"DownloadPercentage,omitempty"`

	// The image download stages. Example:downloading, flashing.
	DownloadStage string `json:"DownloadStage,omitempty"`

	// The download status of the image in the endpoint.
	DownloadStatus string `json:"DownloadStatus,omitempty"`

	// The server power status after the upgrade request is submitted in the endpoint.
	// Enum: [none powered on powered off]
	EpPowerStatus *string `json:"EpPowerStatus,omitempty"`

	// The reason for the operation failure.
	OverallError string `json:"OverallError,omitempty"`

	// The overall percentage of the operation.
	OverallPercentage int64 `json:"OverallPercentage,omitempty"`

	// The overall status of the operation.
	// Enum: [none started download initiating download initiated downloading downloaded upgrade initiating upgrade initiated upgrading upgraded success failed pending]
	Overallstatus *string `json:"Overallstatus,omitempty"`

	// Pending reason for the upgrade waiting.
	// Enum: [none pending for next reboot]
	PendingType *string `json:"PendingType,omitempty"`

	// A collection of references to the [firmware.Upgrade](mo://firmware.Upgrade) Managed Object.
	// When this managed object is deleted, the referenced [firmware.Upgrade](mo://firmware.Upgrade) MO unsets its reference to this deleted MO.
	// Read Only: true
	Upgrade *FirmwareUpgradeRef `json:"Upgrade,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareUpgradeStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DownloadError string `json:"DownloadError,omitempty"`

		DownloadPercentage int64 `json:"DownloadPercentage,omitempty"`

		DownloadStage string `json:"DownloadStage,omitempty"`

		DownloadStatus string `json:"DownloadStatus,omitempty"`

		EpPowerStatus *string `json:"EpPowerStatus,omitempty"`

		OverallError string `json:"OverallError,omitempty"`

		OverallPercentage int64 `json:"OverallPercentage,omitempty"`

		Overallstatus *string `json:"Overallstatus,omitempty"`

		PendingType *string `json:"PendingType,omitempty"`

		Upgrade *FirmwareUpgradeRef `json:"Upgrade,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DownloadError = dataAO1.DownloadError

	m.DownloadPercentage = dataAO1.DownloadPercentage

	m.DownloadStage = dataAO1.DownloadStage

	m.DownloadStatus = dataAO1.DownloadStatus

	m.EpPowerStatus = dataAO1.EpPowerStatus

	m.OverallError = dataAO1.OverallError

	m.OverallPercentage = dataAO1.OverallPercentage

	m.Overallstatus = dataAO1.Overallstatus

	m.PendingType = dataAO1.PendingType

	m.Upgrade = dataAO1.Upgrade

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DownloadError string `json:"DownloadError,omitempty"`

		DownloadPercentage int64 `json:"DownloadPercentage,omitempty"`

		DownloadStage string `json:"DownloadStage,omitempty"`

		DownloadStatus string `json:"DownloadStatus,omitempty"`

		EpPowerStatus *string `json:"EpPowerStatus,omitempty"`

		OverallError string `json:"OverallError,omitempty"`

		OverallPercentage int64 `json:"OverallPercentage,omitempty"`

		Overallstatus *string `json:"Overallstatus,omitempty"`

		PendingType *string `json:"PendingType,omitempty"`

		Upgrade *FirmwareUpgradeRef `json:"Upgrade,omitempty"`
	}

	dataAO1.DownloadError = m.DownloadError

	dataAO1.DownloadPercentage = m.DownloadPercentage

	dataAO1.DownloadStage = m.DownloadStage

	dataAO1.DownloadStatus = m.DownloadStatus

	dataAO1.EpPowerStatus = m.EpPowerStatus

	dataAO1.OverallError = m.OverallError

	dataAO1.OverallPercentage = m.OverallPercentage

	dataAO1.Overallstatus = m.Overallstatus

	dataAO1.PendingType = m.PendingType

	dataAO1.Upgrade = m.Upgrade

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware upgrade status
func (m *FirmwareUpgradeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEpPowerStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverallstatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var firmwareUpgradeStatusTypeEpPowerStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","powered on","powered off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareUpgradeStatusTypeEpPowerStatusPropEnum = append(firmwareUpgradeStatusTypeEpPowerStatusPropEnum, v)
	}
}

// property enum
func (m *FirmwareUpgradeStatus) validateEpPowerStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareUpgradeStatusTypeEpPowerStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareUpgradeStatus) validateEpPowerStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EpPowerStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEpPowerStatusEnum("EpPowerStatus", "body", *m.EpPowerStatus); err != nil {
		return err
	}

	return nil
}

var firmwareUpgradeStatusTypeOverallstatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","started","download initiating","download initiated","downloading","downloaded","upgrade initiating","upgrade initiated","upgrading","upgraded","success","failed","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareUpgradeStatusTypeOverallstatusPropEnum = append(firmwareUpgradeStatusTypeOverallstatusPropEnum, v)
	}
}

// property enum
func (m *FirmwareUpgradeStatus) validateOverallstatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareUpgradeStatusTypeOverallstatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareUpgradeStatus) validateOverallstatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Overallstatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverallstatusEnum("Overallstatus", "body", *m.Overallstatus); err != nil {
		return err
	}

	return nil
}

var firmwareUpgradeStatusTypePendingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","pending for next reboot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareUpgradeStatusTypePendingTypePropEnum = append(firmwareUpgradeStatusTypePendingTypePropEnum, v)
	}
}

// property enum
func (m *FirmwareUpgradeStatus) validatePendingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareUpgradeStatusTypePendingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareUpgradeStatus) validatePendingType(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePendingTypeEnum("PendingType", "body", *m.PendingType); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareUpgradeStatus) validateUpgrade(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgrade) { // not required
		return nil
	}

	if m.Upgrade != nil {
		if err := m.Upgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Upgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareUpgradeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareUpgradeStatus) UnmarshalBinary(b []byte) error {
	var res FirmwareUpgradeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
