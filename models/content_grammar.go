// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContentGrammar Grammar Specification
//
// Content handler framework supports extraction of required values from API/device
// responses. These responses may be of various content types such as XML, JSON, etc.
// The values of importance are modeled as parameters in the content handler framework.
// The parameters can be of a scalar value type or a collection of values. A group
// of related parameters can be modeled as a single complex type parameter. These
// complex types will be very useful to extract a set of repeating group of related
// parameters.
// A grammar specification defines the set of parameters that need to be extracted
// from the content. The grammar specification allows complex type definitions to be
// defined for any complex parameters.
//
// swagger:model contentGrammar
type ContentGrammar struct {
	MoBaseComplexType

	ContentGrammarAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContentGrammar) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 ContentGrammarAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ContentGrammarAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContentGrammar) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ContentGrammarAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content grammar
func (m *ContentGrammar) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ContentGrammarAO1P1
	if err := m.ContentGrammarAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ContentGrammar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentGrammar) UnmarshalBinary(b []byte) error {
	var res ContentGrammar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContentGrammarAO1P1 content grammar a o1 p1
//
// swagger:model ContentGrammarAO1P1
type ContentGrammarAO1P1 struct {

	// The list of parameter definitions, if found in a given API/device response,
	// makes the content handlers to treat the response as error response.
	// This is optional parameter.
	ErrorParameters []*ContentBaseParameter `json:"ErrorParameters"`

	// The list of parameter definitions that mark the parameters to be
	// extracted using this grammar specification.
	Parameters []*ContentBaseParameter `json:"Parameters"`

	// The collection of complex types definitions used in this grammar
	// specification.
	// This is required only if any of the parameters provided in this grammar
	// is of complex type.
	Types []*ContentComplexType `json:"Types"`

	// content grammar a o1 p1
	ContentGrammarAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ContentGrammarAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The list of parameter definitions, if found in a given API/device response,
		// makes the content handlers to treat the response as error response.
		// This is optional parameter.
		ErrorParameters []*ContentBaseParameter `json:"ErrorParameters"`

		// The list of parameter definitions that mark the parameters to be
		// extracted using this grammar specification.
		Parameters []*ContentBaseParameter `json:"Parameters"`

		// The collection of complex types definitions used in this grammar
		// specification.
		// This is required only if any of the parameters provided in this grammar
		// is of complex type.
		Types []*ContentComplexType `json:"Types"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ContentGrammarAO1P1

	rcv.ErrorParameters = stage1.ErrorParameters
	rcv.Parameters = stage1.Parameters
	rcv.Types = stage1.Types
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ErrorParameters")
	delete(stage2, "Parameters")
	delete(stage2, "Types")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ContentGrammarAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ContentGrammarAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The list of parameter definitions, if found in a given API/device response,
		// makes the content handlers to treat the response as error response.
		// This is optional parameter.
		ErrorParameters []*ContentBaseParameter `json:"ErrorParameters"`

		// The list of parameter definitions that mark the parameters to be
		// extracted using this grammar specification.
		Parameters []*ContentBaseParameter `json:"Parameters"`

		// The collection of complex types definitions used in this grammar
		// specification.
		// This is required only if any of the parameters provided in this grammar
		// is of complex type.
		Types []*ContentComplexType `json:"Types"`
	}

	stage1.ErrorParameters = m.ErrorParameters
	stage1.Parameters = m.Parameters
	stage1.Types = m.Types

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ContentGrammarAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ContentGrammarAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this content grammar a o1 p1
func (m *ContentGrammarAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentGrammarAO1P1) validateErrorParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorParameters); i++ {
		if swag.IsZero(m.ErrorParameters[i]) { // not required
			continue
		}

		if m.ErrorParameters[i] != nil {
			if err := m.ErrorParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ErrorParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentGrammarAO1P1) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentGrammarAO1P1) validateTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.Types) { // not required
		return nil
	}

	for i := 0; i < len(m.Types); i++ {
		if swag.IsZero(m.Types[i]) { // not required
			continue
		}

		if m.Types[i] != nil {
			if err := m.Types[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentGrammarAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentGrammarAO1P1) UnmarshalBinary(b []byte) error {
	var res ContentGrammarAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
