// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TopSystem Top:System
//
// Root container for all UCSM / CIMC MOs.
//
// swagger:model topSystem
type TopSystem struct {
	InventoryBase

	// compute blades
	ComputeBlades []*ComputeBladeRef `json:"ComputeBlades"`

	// compute rack units
	// Read Only: true
	ComputeRackUnits []*ComputeRackUnitRef `json:"ComputeRackUnits"`

	// The IPv4 address of system.
	// Read Only: true
	IPV4Address string `json:"Ipv4Address,omitempty"`

	// The IPv6 address of system.
	// Read Only: true
	IPV6Address string `json:"Ipv6Address,omitempty"`

	// management controller
	// Read Only: true
	ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

	// mode
	// Read Only: true
	Mode string `json:"Mode,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// network elements
	NetworkElements []*NetworkElementRef `json:"NetworkElements"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The operational timezone of the system, empty indicates no timezone has been set specifically.
	TimeZone string `json:"TimeZone,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TopSystem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		ComputeBlades []*ComputeBladeRef `json:"ComputeBlades"`

		ComputeRackUnits []*ComputeRackUnitRef `json:"ComputeRackUnits"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		IPV6Address string `json:"Ipv6Address,omitempty"`

		ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

		Mode string `json:"Mode,omitempty"`

		Name string `json:"Name,omitempty"`

		NetworkElements []*NetworkElementRef `json:"NetworkElements"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TimeZone string `json:"TimeZone,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ComputeBlades = dataAO1.ComputeBlades

	m.ComputeRackUnits = dataAO1.ComputeRackUnits

	m.IPV4Address = dataAO1.IPV4Address

	m.IPV6Address = dataAO1.IPV6Address

	m.ManagementController = dataAO1.ManagementController

	m.Mode = dataAO1.Mode

	m.Name = dataAO1.Name

	m.NetworkElements = dataAO1.NetworkElements

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.TimeZone = dataAO1.TimeZone

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TopSystem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ComputeBlades []*ComputeBladeRef `json:"ComputeBlades"`

		ComputeRackUnits []*ComputeRackUnitRef `json:"ComputeRackUnits"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		IPV6Address string `json:"Ipv6Address,omitempty"`

		ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

		Mode string `json:"Mode,omitempty"`

		Name string `json:"Name,omitempty"`

		NetworkElements []*NetworkElementRef `json:"NetworkElements"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TimeZone string `json:"TimeZone,omitempty"`
	}

	dataAO1.ComputeBlades = m.ComputeBlades

	dataAO1.ComputeRackUnits = m.ComputeRackUnits

	dataAO1.IPV4Address = m.IPV4Address

	dataAO1.IPV6Address = m.IPV6Address

	dataAO1.ManagementController = m.ManagementController

	dataAO1.Mode = m.Mode

	dataAO1.Name = m.Name

	dataAO1.NetworkElements = m.NetworkElements

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.TimeZone = m.TimeZone

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this top system
func (m *TopSystem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeBlades(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeRackUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopSystem) validateComputeBlades(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeBlades) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputeBlades); i++ {
		if swag.IsZero(m.ComputeBlades[i]) { // not required
			continue
		}

		if m.ComputeBlades[i] != nil {
			if err := m.ComputeBlades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ComputeBlades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopSystem) validateComputeRackUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeRackUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputeRackUnits); i++ {
		if swag.IsZero(m.ComputeRackUnits[i]) { // not required
			continue
		}

		if m.ComputeRackUnits[i] != nil {
			if err := m.ComputeRackUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ComputeRackUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopSystem) validateManagementController(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementController) { // not required
		return nil
	}

	if m.ManagementController != nil {
		if err := m.ManagementController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementController")
			}
			return err
		}
	}

	return nil
}

func (m *TopSystem) validateNetworkElements(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElements) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkElements); i++ {
		if swag.IsZero(m.NetworkElements[i]) { // not required
			continue
		}

		if m.NetworkElements[i] != nil {
			if err := m.NetworkElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NetworkElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopSystem) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopSystem) UnmarshalBinary(b []byte) error {
	var res TopSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
