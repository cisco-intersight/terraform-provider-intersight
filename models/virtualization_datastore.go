// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationDatastore Virtualization:Datastore
//
// Common attributes of a datastore allocated to a hypervisor. Serves as a base class for all concrete datastore types. A datastore is assigned to a datacenter and virtual machines use it for storage. The datastore could be backed by NFS, VMFS, etc.
//
// swagger:model virtualizationDatastore
type VirtualizationDatastore struct {
	VirtualizationSourceDevice

	// Storage utilization for this datastore.
	Capacity *VirtualizationStorageCapacity `json:"Capacity,omitempty"`

	// Number of hosts attached to or supported-by this datastore.
	HostCount int64 `json:"HostCount,omitempty"`

	// The internally generated identity of this datastore. This entity is not manipulated by users. It aids in uniquely identifying the datastore object. For VMware, this is a MOR (managed object reference).
	Identity string `json:"Identity,omitempty"`

	// Name of this datastore supplied by user. It is not the identity of the datastore. The name is subject to user manipulations.
	Name string `json:"Name,omitempty"`

	// A string indicating the type of the datastore (VMFS, NFS, etc).
	// Enum: [Unknown VMFS NFS vSAN VirtualVolume]
	Type *string `json:"Type,omitempty"`

	// Number of virtual machines relying on (using) this datastore.
	VMCount int64 `json:"VmCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationDatastore) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationSourceDevice
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationSourceDevice = aO0

	// AO1
	var dataAO1 struct {
		Capacity *VirtualizationStorageCapacity `json:"Capacity,omitempty"`

		HostCount int64 `json:"HostCount,omitempty"`

		Identity string `json:"Identity,omitempty"`

		Name string `json:"Name,omitempty"`

		Type *string `json:"Type,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Capacity = dataAO1.Capacity

	m.HostCount = dataAO1.HostCount

	m.Identity = dataAO1.Identity

	m.Name = dataAO1.Name

	m.Type = dataAO1.Type

	m.VMCount = dataAO1.VMCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationDatastore) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationSourceDevice)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Capacity *VirtualizationStorageCapacity `json:"Capacity,omitempty"`

		HostCount int64 `json:"HostCount,omitempty"`

		Identity string `json:"Identity,omitempty"`

		Name string `json:"Name,omitempty"`

		Type *string `json:"Type,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}

	dataAO1.Capacity = m.Capacity

	dataAO1.HostCount = m.HostCount

	dataAO1.Identity = m.Identity

	dataAO1.Name = m.Name

	dataAO1.Type = m.Type

	dataAO1.VMCount = m.VMCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization datastore
func (m *VirtualizationDatastore) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationSourceDevice
	if err := m.VirtualizationSourceDevice.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationDatastore) validateCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Capacity")
			}
			return err
		}
	}

	return nil
}

var virtualizationDatastoreTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","VMFS","NFS","vSAN","VirtualVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationDatastoreTypeTypePropEnum = append(virtualizationDatastoreTypeTypePropEnum, v)
	}
}

// property enum
func (m *VirtualizationDatastore) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationDatastoreTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationDatastore) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationDatastore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationDatastore) UnmarshalBinary(b []byte) error {
	var res VirtualizationDatastore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
