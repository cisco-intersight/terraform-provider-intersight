// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamServiceProvider Iam:Service Provider
//
// SAML Service provider related information in Intersight.
//
// swagger:model iamServiceProvider
type IamServiceProvider struct {
	MoBaseMo

	// Entity ID of the Intersight Service Provider. In SAML, the entity ID uniquely identifies the IdP/Service Provider.
	// Read Only: true
	EntityID string `json:"EntityId,omitempty"`

	// Metadata of the Intersight Service Provider. User downloads the Intersight Service Provider metadata and integrates it with their IdP for authentication.
	// Read Only: true
	Metadata string `json:"Metadata,omitempty"`

	// Name of the Intersight Service Provider.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// A collection of references to the [iam.System](mo://iam.System) Managed Object.
	// When this managed object is deleted, the referenced [iam.System](mo://iam.System) MO unsets its reference to this deleted MO.
	System *IamSystemRef `json:"System,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamServiceProvider) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		EntityID string `json:"EntityId,omitempty"`

		Metadata string `json:"Metadata,omitempty"`

		Name string `json:"Name,omitempty"`

		System *IamSystemRef `json:"System,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EntityID = dataAO1.EntityID

	m.Metadata = dataAO1.Metadata

	m.Name = dataAO1.Name

	m.System = dataAO1.System

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamServiceProvider) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EntityID string `json:"EntityId,omitempty"`

		Metadata string `json:"Metadata,omitempty"`

		Name string `json:"Name,omitempty"`

		System *IamSystemRef `json:"System,omitempty"`
	}

	dataAO1.EntityID = m.EntityID

	dataAO1.Metadata = m.Metadata

	dataAO1.Name = m.Name

	dataAO1.System = m.System

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam service provider
func (m *IamServiceProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamServiceProvider) validateSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("System")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamServiceProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamServiceProvider) UnmarshalBinary(b []byte) error {
	var res IamServiceProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
