// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamResourcePermission Iam:Resource Permission
//
// ResourcePermission represents the permissions defined on a resource like organization.
//
// swagger:model iamResourcePermission
type IamResourcePermission struct {
	MoBaseMo

	// A collection of references to the [iam.SecurityHolder](mo://iam.SecurityHolder) Managed Object.
	// When this managed object is deleted, the referenced [iam.SecurityHolder](mo://iam.SecurityHolder) MO unsets its reference to this deleted MO.
	// Read Only: true
	Holder *IamSecurityHolderRef `json:"Holder,omitempty"`

	// Permissions which are associated with the organization and their role mapping.
	// Read Only: true
	PermissionRoles []*IamPermissionToRoles `json:"PermissionRoles"`

	// Reference to the resource on which permissions are defined like organization.
	// Read Only: true
	Resource *MoBaseMoRef `json:"Resource,omitempty"`

	// Name of the service owning the resource.
	// Read Only: true
	TargetApp string `json:"TargetApp,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamResourcePermission) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Holder *IamSecurityHolderRef `json:"Holder,omitempty"`

		PermissionRoles []*IamPermissionToRoles `json:"PermissionRoles"`

		Resource *MoBaseMoRef `json:"Resource,omitempty"`

		TargetApp string `json:"TargetApp,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Holder = dataAO1.Holder

	m.PermissionRoles = dataAO1.PermissionRoles

	m.Resource = dataAO1.Resource

	m.TargetApp = dataAO1.TargetApp

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamResourcePermission) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Holder *IamSecurityHolderRef `json:"Holder,omitempty"`

		PermissionRoles []*IamPermissionToRoles `json:"PermissionRoles"`

		Resource *MoBaseMoRef `json:"Resource,omitempty"`

		TargetApp string `json:"TargetApp,omitempty"`
	}

	dataAO1.Holder = m.Holder

	dataAO1.PermissionRoles = m.PermissionRoles

	dataAO1.Resource = m.Resource

	dataAO1.TargetApp = m.TargetApp

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam resource permission
func (m *IamResourcePermission) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamResourcePermission) validateHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.Holder) { // not required
		return nil
	}

	if m.Holder != nil {
		if err := m.Holder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Holder")
			}
			return err
		}
	}

	return nil
}

func (m *IamResourcePermission) validatePermissionRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.PermissionRoles); i++ {
		if swag.IsZero(m.PermissionRoles[i]) { // not required
			continue
		}

		if m.PermissionRoles[i] != nil {
			if err := m.PermissionRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PermissionRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamResourcePermission) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamResourcePermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamResourcePermission) UnmarshalBinary(b []byte) error {
	var res IamResourcePermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
