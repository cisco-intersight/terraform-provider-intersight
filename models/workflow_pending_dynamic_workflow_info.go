// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowPendingDynamicWorkflowInfo Workflow:Pending Dynamic Workflow Info
//
// Information for a pending Dynamic Workflow Instance before it is run.  Validation needs to be done on the dynamic workflow tasks before starting.  After it begins, it will be tracked with regular WorkflowInstance.
//
// swagger:model workflowPendingDynamicWorkflowInfo
type WorkflowPendingDynamicWorkflowInfo struct {
	MoBaseMo

	// The inputs of the workflow.
	Input interface{} `json:"Input,omitempty"`

	// A name for the pending dynamic workflow.
	Name string `json:"Name,omitempty"`

	// The pending services the dynamic workflow is waiting for to return the task list.
	PendingServices []string `json:"PendingServices"`

	// The src is workflow owner service.
	Src string `json:"Src,omitempty"`

	// The current status of the PendingDynamicWorkflowInfo.
	// Enum: [GatheringTasks Waiting]
	Status *string `json:"Status,omitempty"`

	// When set to true workflow engine will wait for a duplicate to finish before starting a new one.
	WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

	// The task lists returned by services for building dynamic workflows.  There will be an entry for every different workflow action.
	WorkflowActionTaskLists []*WorkflowDynamicWorkflowActionTaskList `json:"WorkflowActionTaskLists"`

	// The workflow's workflow context which contains initiator and target information.
	WorkflowCtx interface{} `json:"WorkflowCtx,omitempty"`

	// A collection of references to the [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) Managed Object.
	// When this managed object is deleted, the referenced [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) MO unsets its reference to this deleted MO.
	// Read Only: true
	WorkflowInfo *WorkflowWorkflowInfoRef `json:"WorkflowInfo,omitempty"`

	// This key contains workflow, initiator and target name. Workflow engine uses the key to do workflow dedup.
	WorkflowKey string `json:"WorkflowKey,omitempty"`

	// The metadata of the workflow.
	WorkflowMeta interface{} `json:"WorkflowMeta,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowPendingDynamicWorkflowInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Input interface{} `json:"Input,omitempty"`

		Name string `json:"Name,omitempty"`

		PendingServices []string `json:"PendingServices"`

		Src string `json:"Src,omitempty"`

		Status *string `json:"Status,omitempty"`

		WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

		WorkflowActionTaskLists []*WorkflowDynamicWorkflowActionTaskList `json:"WorkflowActionTaskLists"`

		WorkflowCtx interface{} `json:"WorkflowCtx,omitempty"`

		WorkflowInfo *WorkflowWorkflowInfoRef `json:"WorkflowInfo,omitempty"`

		WorkflowKey string `json:"WorkflowKey,omitempty"`

		WorkflowMeta interface{} `json:"WorkflowMeta,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Input = dataAO1.Input

	m.Name = dataAO1.Name

	m.PendingServices = dataAO1.PendingServices

	m.Src = dataAO1.Src

	m.Status = dataAO1.Status

	m.WaitOnDuplicate = dataAO1.WaitOnDuplicate

	m.WorkflowActionTaskLists = dataAO1.WorkflowActionTaskLists

	m.WorkflowCtx = dataAO1.WorkflowCtx

	m.WorkflowInfo = dataAO1.WorkflowInfo

	m.WorkflowKey = dataAO1.WorkflowKey

	m.WorkflowMeta = dataAO1.WorkflowMeta

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowPendingDynamicWorkflowInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Input interface{} `json:"Input,omitempty"`

		Name string `json:"Name,omitempty"`

		PendingServices []string `json:"PendingServices"`

		Src string `json:"Src,omitempty"`

		Status *string `json:"Status,omitempty"`

		WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

		WorkflowActionTaskLists []*WorkflowDynamicWorkflowActionTaskList `json:"WorkflowActionTaskLists"`

		WorkflowCtx interface{} `json:"WorkflowCtx,omitempty"`

		WorkflowInfo *WorkflowWorkflowInfoRef `json:"WorkflowInfo,omitempty"`

		WorkflowKey string `json:"WorkflowKey,omitempty"`

		WorkflowMeta interface{} `json:"WorkflowMeta,omitempty"`
	}

	dataAO1.Input = m.Input

	dataAO1.Name = m.Name

	dataAO1.PendingServices = m.PendingServices

	dataAO1.Src = m.Src

	dataAO1.Status = m.Status

	dataAO1.WaitOnDuplicate = m.WaitOnDuplicate

	dataAO1.WorkflowActionTaskLists = m.WorkflowActionTaskLists

	dataAO1.WorkflowCtx = m.WorkflowCtx

	dataAO1.WorkflowInfo = m.WorkflowInfo

	dataAO1.WorkflowKey = m.WorkflowKey

	dataAO1.WorkflowMeta = m.WorkflowMeta

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow pending dynamic workflow info
func (m *WorkflowPendingDynamicWorkflowInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowActionTaskLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowPendingDynamicWorkflowInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GatheringTasks","Waiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPendingDynamicWorkflowInfoTypeStatusPropEnum = append(workflowPendingDynamicWorkflowInfoTypeStatusPropEnum, v)
	}
}

// property enum
func (m *WorkflowPendingDynamicWorkflowInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPendingDynamicWorkflowInfoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowPendingDynamicWorkflowInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowPendingDynamicWorkflowInfo) validateWorkflowActionTaskLists(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowActionTaskLists) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowActionTaskLists); i++ {
		if swag.IsZero(m.WorkflowActionTaskLists[i]) { // not required
			continue
		}

		if m.WorkflowActionTaskLists[i] != nil {
			if err := m.WorkflowActionTaskLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WorkflowActionTaskLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowPendingDynamicWorkflowInfo) validateWorkflowInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowInfo) { // not required
		return nil
	}

	if m.WorkflowInfo != nil {
		if err := m.WorkflowInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WorkflowInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowPendingDynamicWorkflowInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowPendingDynamicWorkflowInfo) UnmarshalBinary(b []byte) error {
	var res WorkflowPendingDynamicWorkflowInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
