// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamResourceRoles Iam:Resource Roles
//
// ResourceRoles provides a way to specify the roles associated with a resource like organization in a permission which can be assigned to a user or user group.
//
// swagger:model iamResourceRoles
type IamResourceRoles struct {
	MoBaseMo

	// The end point roles assigned to this permission. The user can perform end point operations like GUI/CLI cross launch.
	// Read Only: true
	EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

	// A collection of references to the [iam.Permission](mo://iam.Permission) Managed Object.
	// When this managed object is deleted, the referenced [iam.Permission](mo://iam.Permission) MO unsets its reference to this deleted MO.
	Permission *IamPermissionRef `json:"Permission,omitempty"`

	// Reference to the resource like organization which needs access control.
	Resource *MoBaseMoRef `json:"Resource,omitempty"`

	// The roles assigned to this resource. Role is a collection of privilege sets. Roles are assigned to a user or group using the permission object.
	Roles []*IamRoleRef `json:"Roles"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamResourceRoles) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Permission *IamPermissionRef `json:"Permission,omitempty"`

		Resource *MoBaseMoRef `json:"Resource,omitempty"`

		Roles []*IamRoleRef `json:"Roles"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EndPointRoles = dataAO1.EndPointRoles

	m.Permission = dataAO1.Permission

	m.Resource = dataAO1.Resource

	m.Roles = dataAO1.Roles

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamResourceRoles) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Permission *IamPermissionRef `json:"Permission,omitempty"`

		Resource *MoBaseMoRef `json:"Resource,omitempty"`

		Roles []*IamRoleRef `json:"Roles"`
	}

	dataAO1.EndPointRoles = m.EndPointRoles

	dataAO1.Permission = m.Permission

	dataAO1.Resource = m.Resource

	dataAO1.Roles = m.Roles

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam resource roles
func (m *IamResourceRoles) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamResourceRoles) validateEndPointRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPointRoles); i++ {
		if swag.IsZero(m.EndPointRoles[i]) { // not required
			continue
		}

		if m.EndPointRoles[i] != nil {
			if err := m.EndPointRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EndPointRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamResourceRoles) validatePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.Permission) { // not required
		return nil
	}

	if m.Permission != nil {
		if err := m.Permission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Permission")
			}
			return err
		}
	}

	return nil
}

func (m *IamResourceRoles) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *IamResourceRoles) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamResourceRoles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamResourceRoles) UnmarshalBinary(b []byte) error {
	var res IamResourceRoles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
