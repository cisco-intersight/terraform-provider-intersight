// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkconfigPolicy Network Connectivity
//
// Enable or disable Dynamic DNS, add or update DNS settings for IPv4 and IPv6 on Cisco IMC.
//
// swagger:model networkconfigPolicy
type NetworkconfigPolicy struct {
	PolicyAbstractPolicy

	// IP address of the secondary DNS server.
	AlternateIpv4dnsServer string `json:"AlternateIpv4dnsServer,omitempty"`

	// IP address of the secondary DNS server.
	AlternateIpv6dnsServer string `json:"AlternateIpv6dnsServer,omitempty"`

	// The appliance account to which the appliance Network Connectivity policy belongs.
	ApplianceAccount *IamAccountRef `json:"ApplianceAccount,omitempty"`

	// The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.
	DynamicDNSDomain string `json:"DynamicDnsDomain,omitempty"`

	// If enabled, updates the resource records to the DNS from Cisco IMC.
	EnableDynamicDNS *bool `json:"EnableDynamicDns,omitempty"`

	// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.
	EnableIpv4dnsFromDhcp *bool `json:"EnableIpv4dnsFromDhcp,omitempty"`

	// If enabled, allows to configure IPv6 properties.
	EnableIPV6 *bool `json:"EnableIpv6,omitempty"`

	// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.
	EnableIpv6dnsFromDhcp *bool `json:"EnableIpv6dnsFromDhcp,omitempty"`

	// The organization to which the Network Connectivity policy belongs.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// IP address of the primary DNS server.
	PreferredIpv4dnsServer string `json:"PreferredIpv4dnsServer,omitempty"`

	// IP address of the primary DNS server.
	PreferredIpv6dnsServer string `json:"PreferredIpv6dnsServer,omitempty"`

	// Relationship to the profile object.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NetworkconfigPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		AlternateIpv4dnsServer string `json:"AlternateIpv4dnsServer,omitempty"`

		AlternateIpv6dnsServer string `json:"AlternateIpv6dnsServer,omitempty"`

		ApplianceAccount *IamAccountRef `json:"ApplianceAccount,omitempty"`

		DynamicDNSDomain string `json:"DynamicDnsDomain,omitempty"`

		EnableDynamicDNS *bool `json:"EnableDynamicDns,omitempty"`

		EnableIpv4dnsFromDhcp *bool `json:"EnableIpv4dnsFromDhcp,omitempty"`

		EnableIPV6 *bool `json:"EnableIpv6,omitempty"`

		EnableIpv6dnsFromDhcp *bool `json:"EnableIpv6dnsFromDhcp,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PreferredIpv4dnsServer string `json:"PreferredIpv4dnsServer,omitempty"`

		PreferredIpv6dnsServer string `json:"PreferredIpv6dnsServer,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AlternateIpv4dnsServer = dataAO1.AlternateIpv4dnsServer

	m.AlternateIpv6dnsServer = dataAO1.AlternateIpv6dnsServer

	m.ApplianceAccount = dataAO1.ApplianceAccount

	m.DynamicDNSDomain = dataAO1.DynamicDNSDomain

	m.EnableDynamicDNS = dataAO1.EnableDynamicDNS

	m.EnableIpv4dnsFromDhcp = dataAO1.EnableIpv4dnsFromDhcp

	m.EnableIPV6 = dataAO1.EnableIPV6

	m.EnableIpv6dnsFromDhcp = dataAO1.EnableIpv6dnsFromDhcp

	m.Organization = dataAO1.Organization

	m.PreferredIpv4dnsServer = dataAO1.PreferredIpv4dnsServer

	m.PreferredIpv6dnsServer = dataAO1.PreferredIpv6dnsServer

	m.Profiles = dataAO1.Profiles

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NetworkconfigPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AlternateIpv4dnsServer string `json:"AlternateIpv4dnsServer,omitempty"`

		AlternateIpv6dnsServer string `json:"AlternateIpv6dnsServer,omitempty"`

		ApplianceAccount *IamAccountRef `json:"ApplianceAccount,omitempty"`

		DynamicDNSDomain string `json:"DynamicDnsDomain,omitempty"`

		EnableDynamicDNS *bool `json:"EnableDynamicDns,omitempty"`

		EnableIpv4dnsFromDhcp *bool `json:"EnableIpv4dnsFromDhcp,omitempty"`

		EnableIPV6 *bool `json:"EnableIpv6,omitempty"`

		EnableIpv6dnsFromDhcp *bool `json:"EnableIpv6dnsFromDhcp,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PreferredIpv4dnsServer string `json:"PreferredIpv4dnsServer,omitempty"`

		PreferredIpv6dnsServer string `json:"PreferredIpv6dnsServer,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
	}

	dataAO1.AlternateIpv4dnsServer = m.AlternateIpv4dnsServer

	dataAO1.AlternateIpv6dnsServer = m.AlternateIpv6dnsServer

	dataAO1.ApplianceAccount = m.ApplianceAccount

	dataAO1.DynamicDNSDomain = m.DynamicDNSDomain

	dataAO1.EnableDynamicDNS = m.EnableDynamicDNS

	dataAO1.EnableIpv4dnsFromDhcp = m.EnableIpv4dnsFromDhcp

	dataAO1.EnableIPV6 = m.EnableIPV6

	dataAO1.EnableIpv6dnsFromDhcp = m.EnableIpv6dnsFromDhcp

	dataAO1.Organization = m.Organization

	dataAO1.PreferredIpv4dnsServer = m.PreferredIpv4dnsServer

	dataAO1.PreferredIpv6dnsServer = m.PreferredIpv6dnsServer

	dataAO1.Profiles = m.Profiles

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this networkconfig policy
func (m *NetworkconfigPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplianceAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkconfigPolicy) validateApplianceAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplianceAccount) { // not required
		return nil
	}

	if m.ApplianceAccount != nil {
		if err := m.ApplianceAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplianceAccount")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkconfigPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkconfigPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkconfigPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkconfigPolicy) UnmarshalBinary(b []byte) error {
	var res NetworkconfigPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
