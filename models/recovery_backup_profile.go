// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoveryBackupProfile BackupProfile
//
// Backup profile to initiate on-demand or scheduled backups at end points.
//
// swagger:model recoveryBackupProfile
type RecoveryBackupProfile struct {
	PolicyAbstractConfigProfile

	// A collection of references to the [recovery.BackupConfigPolicy](mo://recovery.BackupConfigPolicy) Managed Object.
	// When this managed object is deleted, the referenced [recovery.BackupConfigPolicy](mo://recovery.BackupConfigPolicy) MO unsets its reference to this deleted MO.
	BackupConfig *RecoveryBackupConfigPolicyRef `json:"BackupConfig,omitempty"`

	// The profile configuration (deploy, validation) results with the overall state and detailed result messages.
	// Read Only: true
	ConfigResult *RecoveryConfigResultRef `json:"ConfigResult,omitempty"`

	// Relationship to all the end devices associated to this backup profile.
	DeviceID *AssetDeviceRegistrationRef `json:"DeviceId,omitempty"`

	// Enables/Disables the schedule on the endpoint.
	Enabled *bool `json:"Enabled,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// A collection of references to the [recovery.ScheduleConfigPolicy](mo://recovery.ScheduleConfigPolicy) Managed Object.
	// When this managed object is deleted, the referenced [recovery.ScheduleConfigPolicy](mo://recovery.ScheduleConfigPolicy) MO unsets its reference to this deleted MO.
	ScheduleConfig *RecoveryScheduleConfigPolicyRef `json:"ScheduleConfig,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoveryBackupProfile) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractConfigProfile
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractConfigProfile = aO0

	// AO1
	var dataAO1 struct {
		BackupConfig *RecoveryBackupConfigPolicyRef `json:"BackupConfig,omitempty"`

		ConfigResult *RecoveryConfigResultRef `json:"ConfigResult,omitempty"`

		DeviceID *AssetDeviceRegistrationRef `json:"DeviceId,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		ScheduleConfig *RecoveryScheduleConfigPolicyRef `json:"ScheduleConfig,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BackupConfig = dataAO1.BackupConfig

	m.ConfigResult = dataAO1.ConfigResult

	m.DeviceID = dataAO1.DeviceID

	m.Enabled = dataAO1.Enabled

	m.Organization = dataAO1.Organization

	m.ScheduleConfig = dataAO1.ScheduleConfig

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoveryBackupProfile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractConfigProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BackupConfig *RecoveryBackupConfigPolicyRef `json:"BackupConfig,omitempty"`

		ConfigResult *RecoveryConfigResultRef `json:"ConfigResult,omitempty"`

		DeviceID *AssetDeviceRegistrationRef `json:"DeviceId,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		ScheduleConfig *RecoveryScheduleConfigPolicyRef `json:"ScheduleConfig,omitempty"`
	}

	dataAO1.BackupConfig = m.BackupConfig

	dataAO1.ConfigResult = m.ConfigResult

	dataAO1.DeviceID = m.DeviceID

	dataAO1.Enabled = m.Enabled

	dataAO1.Organization = m.Organization

	dataAO1.ScheduleConfig = m.ScheduleConfig

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recovery backup profile
func (m *RecoveryBackupProfile) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractConfigProfile
	if err := m.PolicyAbstractConfigProfile.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryBackupProfile) validateBackupConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupConfig) { // not required
		return nil
	}

	if m.BackupConfig != nil {
		if err := m.BackupConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BackupConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryBackupProfile) validateConfigResult(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigResult) { // not required
		return nil
	}

	if m.ConfigResult != nil {
		if err := m.ConfigResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigResult")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryBackupProfile) validateDeviceID(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if m.DeviceID != nil {
		if err := m.DeviceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeviceId")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryBackupProfile) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryBackupProfile) validateScheduleConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduleConfig) { // not required
		return nil
	}

	if m.ScheduleConfig != nil {
		if err := m.ScheduleConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ScheduleConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryBackupProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryBackupProfile) UnmarshalBinary(b []byte) error {
	var res RecoveryBackupProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
