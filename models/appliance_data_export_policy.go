// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplianceDataExportPolicy Appliance:Data Export Policy
//
// Data Export Policy is a category-based data collection policy that enables or disables
// data export (data collection) from the Intersight Appliance to the Intersight. The Data
// Export Policy configuration is organized hierarchically as follows.
//   Global:
//      Inventory:
//         Network
//         Storage
//      TechSupport
// When the DataExportPolicy for a category is enabled/disabled, all the sub-category configurations
// are enabled/disabled as well. For example, if you enable/disable Inventory, all its sub-category
// configurations (ie. Network and Storage) are also enabled/disabled.
//
// swagger:model applianceDataExportPolicy
type ApplianceDataExportPolicy struct {
	MoBaseMo

	// DataExportPolicy managed object to Account relationship.
	Account *IamAccountRef `json:"Account,omitempty"`

	// Status of the data collection mode. If the value is 'true', then data collection is enabled.
	Enable *bool `json:"Enable,omitempty"`

	// Name of the Data Export Policy.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// A collection of references to the [appliance.DataExportPolicy](mo://appliance.DataExportPolicy) Managed Object.
	// When this managed object is deleted, the referenced [appliance.DataExportPolicy](mo://appliance.DataExportPolicy) MO unsets its reference to this deleted MO.
	// Read Only: true
	ParentConfig *ApplianceDataExportPolicyRef `json:"ParentConfig,omitempty"`

	// Sub-configurations of the current Data Export Policy. For example, if the current Data Export Policy is Inventory, the sub-configurations would include the Network and Storage inventory.
	// Read Only: true
	SubConfigs []*ApplianceDataExportPolicyRef `json:"SubConfigs"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceDataExportPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Enable *bool `json:"Enable,omitempty"`

		Name string `json:"Name,omitempty"`

		ParentConfig *ApplianceDataExportPolicyRef `json:"ParentConfig,omitempty"`

		SubConfigs []*ApplianceDataExportPolicyRef `json:"SubConfigs"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Enable = dataAO1.Enable

	m.Name = dataAO1.Name

	m.ParentConfig = dataAO1.ParentConfig

	m.SubConfigs = dataAO1.SubConfigs

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceDataExportPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Enable *bool `json:"Enable,omitempty"`

		Name string `json:"Name,omitempty"`

		ParentConfig *ApplianceDataExportPolicyRef `json:"ParentConfig,omitempty"`

		SubConfigs []*ApplianceDataExportPolicyRef `json:"SubConfigs"`
	}

	dataAO1.Account = m.Account

	dataAO1.Enable = m.Enable

	dataAO1.Name = m.Name

	dataAO1.ParentConfig = m.ParentConfig

	dataAO1.SubConfigs = m.SubConfigs

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance data export policy
func (m *ApplianceDataExportPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplianceDataExportPolicy) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *ApplianceDataExportPolicy) validateParentConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentConfig) { // not required
		return nil
	}

	if m.ParentConfig != nil {
		if err := m.ParentConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParentConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ApplianceDataExportPolicy) validateSubConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.SubConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SubConfigs); i++ {
		if swag.IsZero(m.SubConfigs[i]) { // not required
			continue
		}

		if m.SubConfigs[i] != nil {
			if err := m.SubConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceDataExportPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceDataExportPolicy) UnmarshalBinary(b []byte) error {
	var res ApplianceDataExportPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
