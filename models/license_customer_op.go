// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LicenseCustomerOp License:Customer Op
//
// Customer operation object to refresh the registration or re-authenticate, pre-created.
//
// swagger:model licenseCustomerOp
type LicenseCustomerOp struct {
	MoBaseMo

	// A collection of references to the [license.AccountLicenseData](mo://license.AccountLicenseData) Managed Object.
	// When this managed object is deleted, the referenced [license.AccountLicenseData](mo://license.AccountLicenseData) MO unsets its reference to this deleted MO.
	AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

	// The license administrative state.
	// Set this property to 'true' to activate the license entitlements.
	ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

	// Trigger de-registration/disable.
	DeregisterDevice *bool `json:"DeregisterDevice,omitempty"`

	// Enable trial for Intersight licensing.
	EnableTrial *bool `json:"EnableTrial,omitempty"`

	// The default Trial or Grace period customer is entitled to.
	EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

	// The number of days the trial Trial or Grace period is extended. The trial or grace period can be extended once.
	ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

	// Trigger renew authorization.
	RenewAuthorization *bool `json:"RenewAuthorization,omitempty"`

	// Trigger renew registration.
	RenewIDCertificate *bool `json:"RenewIdCertificate,omitempty"`

	// Trigger show tech support feature.
	ShowAgentTechSupport *bool `json:"ShowAgentTechSupport,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LicenseCustomerOp) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

		ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

		DeregisterDevice *bool `json:"DeregisterDevice,omitempty"`

		EnableTrial *bool `json:"EnableTrial,omitempty"`

		EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

		ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

		RenewAuthorization *bool `json:"RenewAuthorization,omitempty"`

		RenewIDCertificate *bool `json:"RenewIdCertificate,omitempty"`

		ShowAgentTechSupport *bool `json:"ShowAgentTechSupport,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountLicenseData = dataAO1.AccountLicenseData

	m.ActiveAdmin = dataAO1.ActiveAdmin

	m.DeregisterDevice = dataAO1.DeregisterDevice

	m.EnableTrial = dataAO1.EnableTrial

	m.EvaluationPeriod = dataAO1.EvaluationPeriod

	m.ExtraEvaluation = dataAO1.ExtraEvaluation

	m.RenewAuthorization = dataAO1.RenewAuthorization

	m.RenewIDCertificate = dataAO1.RenewIDCertificate

	m.ShowAgentTechSupport = dataAO1.ShowAgentTechSupport

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LicenseCustomerOp) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

		ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

		DeregisterDevice *bool `json:"DeregisterDevice,omitempty"`

		EnableTrial *bool `json:"EnableTrial,omitempty"`

		EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

		ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

		RenewAuthorization *bool `json:"RenewAuthorization,omitempty"`

		RenewIDCertificate *bool `json:"RenewIdCertificate,omitempty"`

		ShowAgentTechSupport *bool `json:"ShowAgentTechSupport,omitempty"`
	}

	dataAO1.AccountLicenseData = m.AccountLicenseData

	dataAO1.ActiveAdmin = m.ActiveAdmin

	dataAO1.DeregisterDevice = m.DeregisterDevice

	dataAO1.EnableTrial = m.EnableTrial

	dataAO1.EvaluationPeriod = m.EvaluationPeriod

	dataAO1.ExtraEvaluation = m.ExtraEvaluation

	dataAO1.RenewAuthorization = m.RenewAuthorization

	dataAO1.RenewIDCertificate = m.RenewIDCertificate

	dataAO1.ShowAgentTechSupport = m.ShowAgentTechSupport

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this license customer op
func (m *LicenseCustomerOp) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountLicenseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseCustomerOp) validateAccountLicenseData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountLicenseData) { // not required
		return nil
	}

	if m.AccountLicenseData != nil {
		if err := m.AccountLicenseData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountLicenseData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseCustomerOp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseCustomerOp) UnmarshalBinary(b []byte) error {
	var res LicenseCustomerOp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
