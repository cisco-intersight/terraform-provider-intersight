// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IaasUcsdManagedInfra Iaas:Ucsd Managed Infra
//
// Describes about UCSD Managed infrastructure statistics.
//
// swagger:model iaasUcsdManagedInfra
type IaasUcsdManagedInfra struct {
	MoBaseMo

	// Total advanced catalogs in UCSD.
	// Read Only: true
	AdvancedCatalogCount int64 `json:"AdvancedCatalogCount,omitempty"`

	// Total bare metal catalogs in UCSD.
	// Read Only: true
	BmCatalogCount int64 `json:"BmCatalogCount,omitempty"`

	// Total service container catalogs in UCSD.
	// Read Only: true
	ContainerCatalogCount int64 `json:"ContainerCatalogCount,omitempty"`

	// Total ESXi hosts in UCSD.
	// Read Only: true
	EsxiHostCount int64 `json:"EsxiHostCount,omitempty"`

	// Total external (Ldap) groups in UCSD.
	// Read Only: true
	ExternalGroupCount int64 `json:"ExternalGroupCount,omitempty"`

	// A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.
	// When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO.
	// Read Only: true
	GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

	// Total HyperV hosts in UCSD.
	// Read Only: true
	HypervHostCount int64 `json:"HypervHostCount,omitempty"`

	// Total local groups in UCSD.
	// Read Only: true
	LocalGroupCount int64 `json:"LocalGroupCount,omitempty"`

	// Total standard catalogs in UCSD.
	// Read Only: true
	StandardCatalogCount int64 `json:"StandardCatalogCount,omitempty"`

	// Total user accounts in UCSD.
	// Read Only: true
	UserCount int64 `json:"UserCount,omitempty"`

	// Total virtual datacenters in UCSD.
	// Read Only: true
	VdcCount int64 `json:"VdcCount,omitempty"`

	// Total Virtual machines in UCSD.
	// Read Only: true
	VMCount int64 `json:"VmCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IaasUcsdManagedInfra) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AdvancedCatalogCount int64 `json:"AdvancedCatalogCount,omitempty"`

		BmCatalogCount int64 `json:"BmCatalogCount,omitempty"`

		ContainerCatalogCount int64 `json:"ContainerCatalogCount,omitempty"`

		EsxiHostCount int64 `json:"EsxiHostCount,omitempty"`

		ExternalGroupCount int64 `json:"ExternalGroupCount,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		HypervHostCount int64 `json:"HypervHostCount,omitempty"`

		LocalGroupCount int64 `json:"LocalGroupCount,omitempty"`

		StandardCatalogCount int64 `json:"StandardCatalogCount,omitempty"`

		UserCount int64 `json:"UserCount,omitempty"`

		VdcCount int64 `json:"VdcCount,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdvancedCatalogCount = dataAO1.AdvancedCatalogCount

	m.BmCatalogCount = dataAO1.BmCatalogCount

	m.ContainerCatalogCount = dataAO1.ContainerCatalogCount

	m.EsxiHostCount = dataAO1.EsxiHostCount

	m.ExternalGroupCount = dataAO1.ExternalGroupCount

	m.GUID = dataAO1.GUID

	m.HypervHostCount = dataAO1.HypervHostCount

	m.LocalGroupCount = dataAO1.LocalGroupCount

	m.StandardCatalogCount = dataAO1.StandardCatalogCount

	m.UserCount = dataAO1.UserCount

	m.VdcCount = dataAO1.VdcCount

	m.VMCount = dataAO1.VMCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IaasUcsdManagedInfra) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdvancedCatalogCount int64 `json:"AdvancedCatalogCount,omitempty"`

		BmCatalogCount int64 `json:"BmCatalogCount,omitempty"`

		ContainerCatalogCount int64 `json:"ContainerCatalogCount,omitempty"`

		EsxiHostCount int64 `json:"EsxiHostCount,omitempty"`

		ExternalGroupCount int64 `json:"ExternalGroupCount,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		HypervHostCount int64 `json:"HypervHostCount,omitempty"`

		LocalGroupCount int64 `json:"LocalGroupCount,omitempty"`

		StandardCatalogCount int64 `json:"StandardCatalogCount,omitempty"`

		UserCount int64 `json:"UserCount,omitempty"`

		VdcCount int64 `json:"VdcCount,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}

	dataAO1.AdvancedCatalogCount = m.AdvancedCatalogCount

	dataAO1.BmCatalogCount = m.BmCatalogCount

	dataAO1.ContainerCatalogCount = m.ContainerCatalogCount

	dataAO1.EsxiHostCount = m.EsxiHostCount

	dataAO1.ExternalGroupCount = m.ExternalGroupCount

	dataAO1.GUID = m.GUID

	dataAO1.HypervHostCount = m.HypervHostCount

	dataAO1.LocalGroupCount = m.LocalGroupCount

	dataAO1.StandardCatalogCount = m.StandardCatalogCount

	dataAO1.UserCount = m.UserCount

	dataAO1.VdcCount = m.VdcCount

	dataAO1.VMCount = m.VMCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iaas ucsd managed infra
func (m *IaasUcsdManagedInfra) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IaasUcsdManagedInfra) validateGUID(formats strfmt.Registry) error {

	if swag.IsZero(m.GUID) { // not required
		return nil
	}

	if m.GUID != nil {
		if err := m.GUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Guid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IaasUcsdManagedInfra) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IaasUcsdManagedInfra) UnmarshalBinary(b []byte) error {
	var res IaasUcsdManagedInfra
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
