// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IaasLicenseInfo Iaas:License Info
//
// Describes about license info currently available in UCSD.
//
// swagger:model iaasLicenseInfo
type IaasLicenseInfo struct {
	MoBaseMo

	// A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.
	// When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO.
	// Read Only: true
	GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

	// Licese expiration date.
	// Read Only: true
	LicenseExpirationDate string `json:"LicenseExpirationDate,omitempty"`

	// License keys info for UCSD.
	// Read Only: true
	LicenseKeysInfo []*IaasLicenseKeysInfo `json:"LicenseKeysInfo"`

	// License type of UCSD whether it is EVAL/Permanent/Subscription..
	// Read Only: true
	LicenseType string `json:"LicenseType,omitempty"`

	// List of license utilization info for UCSD.
	// Read Only: true
	LicenseUtilizationInfo []*IaasLicenseUtilizationInfo `json:"LicenseUtilizationInfo"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IaasLicenseInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		LicenseExpirationDate string `json:"LicenseExpirationDate,omitempty"`

		LicenseKeysInfo []*IaasLicenseKeysInfo `json:"LicenseKeysInfo"`

		LicenseType string `json:"LicenseType,omitempty"`

		LicenseUtilizationInfo []*IaasLicenseUtilizationInfo `json:"LicenseUtilizationInfo"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.GUID = dataAO1.GUID

	m.LicenseExpirationDate = dataAO1.LicenseExpirationDate

	m.LicenseKeysInfo = dataAO1.LicenseKeysInfo

	m.LicenseType = dataAO1.LicenseType

	m.LicenseUtilizationInfo = dataAO1.LicenseUtilizationInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IaasLicenseInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		LicenseExpirationDate string `json:"LicenseExpirationDate,omitempty"`

		LicenseKeysInfo []*IaasLicenseKeysInfo `json:"LicenseKeysInfo"`

		LicenseType string `json:"LicenseType,omitempty"`

		LicenseUtilizationInfo []*IaasLicenseUtilizationInfo `json:"LicenseUtilizationInfo"`
	}

	dataAO1.GUID = m.GUID

	dataAO1.LicenseExpirationDate = m.LicenseExpirationDate

	dataAO1.LicenseKeysInfo = m.LicenseKeysInfo

	dataAO1.LicenseType = m.LicenseType

	dataAO1.LicenseUtilizationInfo = m.LicenseUtilizationInfo

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iaas license info
func (m *IaasLicenseInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseKeysInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseUtilizationInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IaasLicenseInfo) validateGUID(formats strfmt.Registry) error {

	if swag.IsZero(m.GUID) { // not required
		return nil
	}

	if m.GUID != nil {
		if err := m.GUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Guid")
			}
			return err
		}
	}

	return nil
}

func (m *IaasLicenseInfo) validateLicenseKeysInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseKeysInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseKeysInfo); i++ {
		if swag.IsZero(m.LicenseKeysInfo[i]) { // not required
			continue
		}

		if m.LicenseKeysInfo[i] != nil {
			if err := m.LicenseKeysInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LicenseKeysInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IaasLicenseInfo) validateLicenseUtilizationInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseUtilizationInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseUtilizationInfo); i++ {
		if swag.IsZero(m.LicenseUtilizationInfo[i]) { // not required
			continue
		}

		if m.LicenseUtilizationInfo[i] != nil {
			if err := m.LicenseUtilizationInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LicenseUtilizationInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IaasLicenseInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IaasLicenseInfo) UnmarshalBinary(b []byte) error {
	var res IaasLicenseInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
