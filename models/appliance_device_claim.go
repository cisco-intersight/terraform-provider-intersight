// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplianceDeviceClaim Appliance:Device Claim
//
// DeviceClaim managed object represents a user initiated claim request for claiming
// an endpoint device. There can be many DeviceClaim managed object for a given endpoint
// device when users claim and unclaim devices repeatedly.
// Claiming an endpoint device is a multi-step operation. The Intersight Appliance
// starts a workflow with multiple tasks to process the device claim request. The status
// of the device claim operation can be obtained from the claim workflow.
//
// swagger:model applianceDeviceClaim
type ApplianceDeviceClaim struct {
	MoBaseMo

	// DeviceClaim managed object to Account relationship.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// Device identifier of the endpoint device.
	// Read Only: true
	DeviceID string `json:"DeviceId,omitempty"`

	// Hostname or IP address of the endpoint device the user wants to claim.
	Hostname string `json:"Hostname,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Message set by the device claim process.
	// Read Only: true
	Message string `json:"Message,omitempty"`

	// Password to be used to login to the endpoint device.
	Password string `json:"Password,omitempty"`

	// Platform type of the endpoint device.
	// Enum: [ APIC DCNM UCSFI UCSFIISM IMC IMCM4 IMCM5 UCSIOM HX HXTriton UCSD IntersightAppliance PureStorageFlashArray VmwareVcenter ServiceEngine IMCBlade]
	PlatformType string `json:"PlatformType,omitempty"`

	// User defined claim request identifier set by the UI. The RequestId field is not a mandatory. The Intersight Appliance will assign a unique value automatically if the field is not set.
	RequestID string `json:"RequestId,omitempty"`

	// Device security token of the endpoint device.
	// Read Only: true
	SecurityToken string `json:"SecurityToken,omitempty"`

	// Status of the device claim process.
	// Read Only: true
	// Enum: [started failed completed]
	Status string `json:"Status,omitempty"`

	// Username to log in to the endpoint device.
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceDeviceClaim) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		DeviceID string `json:"DeviceId,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Message string `json:"Message,omitempty"`

		Password string `json:"Password,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`

		RequestID string `json:"RequestId,omitempty"`

		SecurityToken string `json:"SecurityToken,omitempty"`

		Status string `json:"Status,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.DeviceID = dataAO1.DeviceID

	m.Hostname = dataAO1.Hostname

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.Message = dataAO1.Message

	m.Password = dataAO1.Password

	m.PlatformType = dataAO1.PlatformType

	m.RequestID = dataAO1.RequestID

	m.SecurityToken = dataAO1.SecurityToken

	m.Status = dataAO1.Status

	m.Username = dataAO1.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceDeviceClaim) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		DeviceID string `json:"DeviceId,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Message string `json:"Message,omitempty"`

		Password string `json:"Password,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`

		RequestID string `json:"RequestId,omitempty"`

		SecurityToken string `json:"SecurityToken,omitempty"`

		Status string `json:"Status,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.DeviceID = m.DeviceID

	dataAO1.Hostname = m.Hostname

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.Message = m.Message

	dataAO1.Password = m.Password

	dataAO1.PlatformType = m.PlatformType

	dataAO1.RequestID = m.RequestID

	dataAO1.SecurityToken = m.SecurityToken

	dataAO1.Status = m.Status

	dataAO1.Username = m.Username

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance device claim
func (m *ApplianceDeviceClaim) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplianceDeviceClaim) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

var applianceDeviceClaimTypePlatformTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","APIC","DCNM","UCSFI","UCSFIISM","IMC","IMCM4","IMCM5","UCSIOM","HX","HXTriton","UCSD","IntersightAppliance","PureStorageFlashArray","VmwareVcenter","ServiceEngine","IMCBlade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applianceDeviceClaimTypePlatformTypePropEnum = append(applianceDeviceClaimTypePlatformTypePropEnum, v)
	}
}

// property enum
func (m *ApplianceDeviceClaim) validatePlatformTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applianceDeviceClaimTypePlatformTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplianceDeviceClaim) validatePlatformType(formats strfmt.Registry) error {

	if swag.IsZero(m.PlatformType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformTypeEnum("PlatformType", "body", m.PlatformType); err != nil {
		return err
	}

	return nil
}

var applianceDeviceClaimTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["started","failed","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applianceDeviceClaimTypeStatusPropEnum = append(applianceDeviceClaimTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ApplianceDeviceClaim) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applianceDeviceClaimTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplianceDeviceClaim) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceDeviceClaim) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceDeviceClaim) UnmarshalBinary(b []byte) error {
	var res ApplianceDeviceClaim
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
