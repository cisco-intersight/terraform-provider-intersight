// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageArrayController Storage:Array Controller
//
// Common attributes for a Storage array controller. It can be a hardware or software unit which manages the physical storage disks available in the array.
//
// swagger:model storageArrayController
type StorageArrayController struct {
	EquipmentBase

	// Storage array controller name.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Controller running mode, Primary or Secondary.
	// Read Only: true
	// Enum: [Unknown Primary Secondary Maintenance]
	OperationalMode string `json:"OperationalMode,omitempty"`

	// Status of the storage controller.
	// Read Only: true
	// Enum: [Unknown Ok Degraded Critical Offline Identifying NotAvailable Updating Unrecognized]
	Status string `json:"Status,omitempty"`

	// Storage array managed object.
	// Read Only: true
	StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

	// Software version running on a storage controller.
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageArrayController) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		OperationalMode string `json:"OperationalMode,omitempty"`

		Status string `json:"Status,omitempty"`

		StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.OperationalMode = dataAO1.OperationalMode

	m.Status = dataAO1.Status

	m.StorageArray = dataAO1.StorageArray

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageArrayController) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		OperationalMode string `json:"OperationalMode,omitempty"`

		Status string `json:"Status,omitempty"`

		StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.Name = m.Name

	dataAO1.OperationalMode = m.OperationalMode

	dataAO1.Status = m.Status

	dataAO1.StorageArray = m.StorageArray

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage array controller
func (m *StorageArrayController) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationalMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageArray(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageArrayControllerTypeOperationalModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Primary","Secondary","Maintenance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageArrayControllerTypeOperationalModePropEnum = append(storageArrayControllerTypeOperationalModePropEnum, v)
	}
}

// property enum
func (m *StorageArrayController) validateOperationalModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageArrayControllerTypeOperationalModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageArrayController) validateOperationalMode(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationalMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationalModeEnum("OperationalMode", "body", m.OperationalMode); err != nil {
		return err
	}

	return nil
}

var storageArrayControllerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Ok","Degraded","Critical","Offline","Identifying","NotAvailable","Updating","Unrecognized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageArrayControllerTypeStatusPropEnum = append(storageArrayControllerTypeStatusPropEnum, v)
	}
}

// property enum
func (m *StorageArrayController) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageArrayControllerTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageArrayController) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *StorageArrayController) validateStorageArray(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageArray) { // not required
		return nil
	}

	if m.StorageArray != nil {
		if err := m.StorageArray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageArray")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageArrayController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageArrayController) UnmarshalBinary(b []byte) error {
	var res StorageArrayController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
