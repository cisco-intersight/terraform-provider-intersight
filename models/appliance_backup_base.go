// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplianceBackupBase Appliance:Backup Base
//
// BackupBase is the parent type of Backup, Restore, and BackupPolicy managed objects.
// BackupBase holds the common information required for copying the file from the
// Intersight Appliance to the remote file server and vice versa.
//
// swagger:model applianceBackupBase
type ApplianceBackupBase struct {
	MoBaseMo

	// Backup filename to backup or restore.
	Filename string `json:"Filename,omitempty"`

	// Communication protocol used by the file server (e.g. scp or sftp).
	// Enum: [scp sftp]
	Protocol *string `json:"Protocol,omitempty"`

	// Hostname of the remote file server.
	RemoteHost string `json:"RemoteHost,omitempty"`

	// File server directory to copy the file.
	RemotePath string `json:"RemotePath,omitempty"`

	// Remote TCP port on the file server (e.g. 22 for scp).
	RemotePort int64 `json:"RemotePort,omitempty"`

	// Username to authenticate the fileserver.
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceBackupBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Filename string `json:"Filename,omitempty"`

		Protocol *string `json:"Protocol,omitempty"`

		RemoteHost string `json:"RemoteHost,omitempty"`

		RemotePath string `json:"RemotePath,omitempty"`

		RemotePort int64 `json:"RemotePort,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Filename = dataAO1.Filename

	m.Protocol = dataAO1.Protocol

	m.RemoteHost = dataAO1.RemoteHost

	m.RemotePath = dataAO1.RemotePath

	m.RemotePort = dataAO1.RemotePort

	m.Username = dataAO1.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceBackupBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Filename string `json:"Filename,omitempty"`

		Protocol *string `json:"Protocol,omitempty"`

		RemoteHost string `json:"RemoteHost,omitempty"`

		RemotePath string `json:"RemotePath,omitempty"`

		RemotePort int64 `json:"RemotePort,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO1.Filename = m.Filename

	dataAO1.Protocol = m.Protocol

	dataAO1.RemoteHost = m.RemoteHost

	dataAO1.RemotePath = m.RemotePath

	dataAO1.RemotePort = m.RemotePort

	dataAO1.Username = m.Username

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance backup base
func (m *ApplianceBackupBase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applianceBackupBaseTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scp","sftp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applianceBackupBaseTypeProtocolPropEnum = append(applianceBackupBaseTypeProtocolPropEnum, v)
	}
}

// property enum
func (m *ApplianceBackupBase) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applianceBackupBaseTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplianceBackupBase) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceBackupBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceBackupBase) UnmarshalBinary(b []byte) error {
	var res ApplianceBackupBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
