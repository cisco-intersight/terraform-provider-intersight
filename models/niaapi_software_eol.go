// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NiaapiSoftwareEol Niaapi:Software Eol
//
// This contains the end of life notice of software release.
//
// swagger:model niaapiSoftwareEol
type NiaapiSoftwareEol struct {
	MoBaseMo

	// String contains the Release versions affected by this notice, seperated by comma.
	AffectedVersions string `json:"AffectedVersions,omitempty"`

	// Date time of this notice Announced.
	// Format: date-time
	AnnouncementDate strfmt.DateTime `json:"AnnouncementDate,omitempty"`

	// Epoch time of this notice Announced.
	AnnouncementDateEpoch int64 `json:"AnnouncementDateEpoch,omitempty"`

	// The bulletinno of this software release end of life notice.
	BulletinNo string `json:"BulletinNo,omitempty"`

	// The description of this software release end of life notice.
	Description string `json:"Description,omitempty"`

	// Date time of End of New service attachment .
	// Format: date-time
	EndofNewServiceAttachmentDate strfmt.DateTime `json:"EndofNewServiceAttachmentDate,omitempty"`

	// Epoch time of End of New service attachment .
	EndofNewServiceAttachmentDateEpoch int64 `json:"EndofNewServiceAttachmentDateEpoch,omitempty"`

	// Date time of End of Renewal of service contract .
	// Format: date-time
	EndofServiceContractRenewalDate strfmt.DateTime `json:"EndofServiceContractRenewalDate,omitempty"`

	// Epoch time of End of Renewal of service contract .
	EndofServiceContractRenewalDateEpoch int64 `json:"EndofServiceContractRenewalDateEpoch,omitempty"`

	// Date time of End of Maintenance.
	// Format: date-time
	EndofSwMaintenanceDate strfmt.DateTime `json:"EndofSwMaintenanceDate,omitempty"`

	// Epoch time of End of Maintenance.
	EndofSwMaintenanceDateEpoch int64 `json:"EndofSwMaintenanceDateEpoch,omitempty"`

	// The title of this software release end of life notice.
	Headline string `json:"Headline,omitempty"`

	// Date time of Last day of Support .
	// Format: date-time
	LastDateofSupport strfmt.DateTime `json:"LastDateofSupport,omitempty"`

	// Epoch time of Last day of Support .
	LastDateofSupportEpoch int64 `json:"LastDateofSupportEpoch,omitempty"`

	// Date time of Lastship Date.
	// Format: date-time
	LastShipDate strfmt.DateTime `json:"LastShipDate,omitempty"`

	// Epoch time of Lastship Date.
	LastShipDateEpoch int64 `json:"LastShipDateEpoch,omitempty"`

	// The URL of this migration notice.
	MigrationURL string `json:"MigrationUrl,omitempty"`

	// Software end of life notice URL link to the notice webpage.
	SoftwareEolURL string `json:"SoftwareEolUrl,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiSoftwareEol) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AffectedVersions string `json:"AffectedVersions,omitempty"`

		AnnouncementDate strfmt.DateTime `json:"AnnouncementDate,omitempty"`

		AnnouncementDateEpoch int64 `json:"AnnouncementDateEpoch,omitempty"`

		BulletinNo string `json:"BulletinNo,omitempty"`

		Description string `json:"Description,omitempty"`

		EndofNewServiceAttachmentDate strfmt.DateTime `json:"EndofNewServiceAttachmentDate,omitempty"`

		EndofNewServiceAttachmentDateEpoch int64 `json:"EndofNewServiceAttachmentDateEpoch,omitempty"`

		EndofServiceContractRenewalDate strfmt.DateTime `json:"EndofServiceContractRenewalDate,omitempty"`

		EndofServiceContractRenewalDateEpoch int64 `json:"EndofServiceContractRenewalDateEpoch,omitempty"`

		EndofSwMaintenanceDate strfmt.DateTime `json:"EndofSwMaintenanceDate,omitempty"`

		EndofSwMaintenanceDateEpoch int64 `json:"EndofSwMaintenanceDateEpoch,omitempty"`

		Headline string `json:"Headline,omitempty"`

		LastDateofSupport strfmt.DateTime `json:"LastDateofSupport,omitempty"`

		LastDateofSupportEpoch int64 `json:"LastDateofSupportEpoch,omitempty"`

		LastShipDate strfmt.DateTime `json:"LastShipDate,omitempty"`

		LastShipDateEpoch int64 `json:"LastShipDateEpoch,omitempty"`

		MigrationURL string `json:"MigrationUrl,omitempty"`

		SoftwareEolURL string `json:"SoftwareEolUrl,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AffectedVersions = dataAO1.AffectedVersions

	m.AnnouncementDate = dataAO1.AnnouncementDate

	m.AnnouncementDateEpoch = dataAO1.AnnouncementDateEpoch

	m.BulletinNo = dataAO1.BulletinNo

	m.Description = dataAO1.Description

	m.EndofNewServiceAttachmentDate = dataAO1.EndofNewServiceAttachmentDate

	m.EndofNewServiceAttachmentDateEpoch = dataAO1.EndofNewServiceAttachmentDateEpoch

	m.EndofServiceContractRenewalDate = dataAO1.EndofServiceContractRenewalDate

	m.EndofServiceContractRenewalDateEpoch = dataAO1.EndofServiceContractRenewalDateEpoch

	m.EndofSwMaintenanceDate = dataAO1.EndofSwMaintenanceDate

	m.EndofSwMaintenanceDateEpoch = dataAO1.EndofSwMaintenanceDateEpoch

	m.Headline = dataAO1.Headline

	m.LastDateofSupport = dataAO1.LastDateofSupport

	m.LastDateofSupportEpoch = dataAO1.LastDateofSupportEpoch

	m.LastShipDate = dataAO1.LastShipDate

	m.LastShipDateEpoch = dataAO1.LastShipDateEpoch

	m.MigrationURL = dataAO1.MigrationURL

	m.SoftwareEolURL = dataAO1.SoftwareEolURL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiSoftwareEol) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AffectedVersions string `json:"AffectedVersions,omitempty"`

		AnnouncementDate strfmt.DateTime `json:"AnnouncementDate,omitempty"`

		AnnouncementDateEpoch int64 `json:"AnnouncementDateEpoch,omitempty"`

		BulletinNo string `json:"BulletinNo,omitempty"`

		Description string `json:"Description,omitempty"`

		EndofNewServiceAttachmentDate strfmt.DateTime `json:"EndofNewServiceAttachmentDate,omitempty"`

		EndofNewServiceAttachmentDateEpoch int64 `json:"EndofNewServiceAttachmentDateEpoch,omitempty"`

		EndofServiceContractRenewalDate strfmt.DateTime `json:"EndofServiceContractRenewalDate,omitempty"`

		EndofServiceContractRenewalDateEpoch int64 `json:"EndofServiceContractRenewalDateEpoch,omitempty"`

		EndofSwMaintenanceDate strfmt.DateTime `json:"EndofSwMaintenanceDate,omitempty"`

		EndofSwMaintenanceDateEpoch int64 `json:"EndofSwMaintenanceDateEpoch,omitempty"`

		Headline string `json:"Headline,omitempty"`

		LastDateofSupport strfmt.DateTime `json:"LastDateofSupport,omitempty"`

		LastDateofSupportEpoch int64 `json:"LastDateofSupportEpoch,omitempty"`

		LastShipDate strfmt.DateTime `json:"LastShipDate,omitempty"`

		LastShipDateEpoch int64 `json:"LastShipDateEpoch,omitempty"`

		MigrationURL string `json:"MigrationUrl,omitempty"`

		SoftwareEolURL string `json:"SoftwareEolUrl,omitempty"`
	}

	dataAO1.AffectedVersions = m.AffectedVersions

	dataAO1.AnnouncementDate = m.AnnouncementDate

	dataAO1.AnnouncementDateEpoch = m.AnnouncementDateEpoch

	dataAO1.BulletinNo = m.BulletinNo

	dataAO1.Description = m.Description

	dataAO1.EndofNewServiceAttachmentDate = m.EndofNewServiceAttachmentDate

	dataAO1.EndofNewServiceAttachmentDateEpoch = m.EndofNewServiceAttachmentDateEpoch

	dataAO1.EndofServiceContractRenewalDate = m.EndofServiceContractRenewalDate

	dataAO1.EndofServiceContractRenewalDateEpoch = m.EndofServiceContractRenewalDateEpoch

	dataAO1.EndofSwMaintenanceDate = m.EndofSwMaintenanceDate

	dataAO1.EndofSwMaintenanceDateEpoch = m.EndofSwMaintenanceDateEpoch

	dataAO1.Headline = m.Headline

	dataAO1.LastDateofSupport = m.LastDateofSupport

	dataAO1.LastDateofSupportEpoch = m.LastDateofSupportEpoch

	dataAO1.LastShipDate = m.LastShipDate

	dataAO1.LastShipDateEpoch = m.LastShipDateEpoch

	dataAO1.MigrationURL = m.MigrationURL

	dataAO1.SoftwareEolURL = m.SoftwareEolURL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi software eol
func (m *NiaapiSoftwareEol) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnouncementDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndofNewServiceAttachmentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndofServiceContractRenewalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndofSwMaintenanceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDateofSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastShipDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiSoftwareEol) validateAnnouncementDate(formats strfmt.Registry) error {

	if swag.IsZero(m.AnnouncementDate) { // not required
		return nil
	}

	if err := validate.FormatOf("AnnouncementDate", "body", "date-time", m.AnnouncementDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiSoftwareEol) validateEndofNewServiceAttachmentDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndofNewServiceAttachmentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndofNewServiceAttachmentDate", "body", "date-time", m.EndofNewServiceAttachmentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiSoftwareEol) validateEndofServiceContractRenewalDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndofServiceContractRenewalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndofServiceContractRenewalDate", "body", "date-time", m.EndofServiceContractRenewalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiSoftwareEol) validateEndofSwMaintenanceDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndofSwMaintenanceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndofSwMaintenanceDate", "body", "date-time", m.EndofSwMaintenanceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiSoftwareEol) validateLastDateofSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.LastDateofSupport) { // not required
		return nil
	}

	if err := validate.FormatOf("LastDateofSupport", "body", "date-time", m.LastDateofSupport.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiSoftwareEol) validateLastShipDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastShipDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastShipDate", "body", "date-time", m.LastShipDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiSoftwareEol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiSoftwareEol) UnmarshalBinary(b []byte) error {
	var res NiaapiSoftwareEol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
