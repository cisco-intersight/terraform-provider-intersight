// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyslogRemoteClientBase Syslog:Remote Client Base
//
// Lists properties that are common to all remote logging clients. It serves as a base class for all remote logging clients.
//
// swagger:model syslogRemoteClientBase
type SyslogRemoteClientBase struct {
	MoBaseComplexType

	SyslogRemoteClientBaseAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SyslogRemoteClientBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 SyslogRemoteClientBaseAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.SyslogRemoteClientBaseAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SyslogRemoteClientBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.SyslogRemoteClientBaseAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this syslog remote client base
func (m *SyslogRemoteClientBase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with SyslogRemoteClientBaseAO1P1
	if err := m.SyslogRemoteClientBaseAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SyslogRemoteClientBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyslogRemoteClientBase) UnmarshalBinary(b []byte) error {
	var res SyslogRemoteClientBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SyslogRemoteClientBaseAO1P1 syslog remote client base a o1 p1
//
// swagger:model SyslogRemoteClientBaseAO1P1
type SyslogRemoteClientBaseAO1P1 struct {

	// Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
	Enabled *bool `json:"Enabled,omitempty"`

	// Hostname or IP Address of the syslog server where log should be stored.
	Hostname string `json:"Hostname,omitempty"`

	// Lowest level of messages to be included in the remote log.
	// Enum: [warning emergency alert critical error notice informational debug]
	MinSeverity *string `json:"MinSeverity,omitempty"`

	// Port number used for logging on syslog server.
	Port int64 `json:"Port,omitempty"`

	// Transport layer protocol for transmission of log messages to syslog server.
	// Enum: [udp tcp]
	Protocol *string `json:"Protocol,omitempty"`

	// syslog remote client base a o1 p1
	SyslogRemoteClientBaseAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *SyslogRemoteClientBaseAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
		Enabled *bool `json:"Enabled,omitempty"`

		// Hostname or IP Address of the syslog server where log should be stored.
		Hostname string `json:"Hostname,omitempty"`

		// Lowest level of messages to be included in the remote log.
		// Enum: [warning emergency alert critical error notice informational debug]
		MinSeverity *string `json:"MinSeverity,omitempty"`

		// Port number used for logging on syslog server.
		Port int64 `json:"Port,omitempty"`

		// Transport layer protocol for transmission of log messages to syslog server.
		// Enum: [udp tcp]
		Protocol *string `json:"Protocol,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SyslogRemoteClientBaseAO1P1

	rcv.Enabled = stage1.Enabled
	rcv.Hostname = stage1.Hostname
	rcv.MinSeverity = stage1.MinSeverity
	rcv.Port = stage1.Port
	rcv.Protocol = stage1.Protocol
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Enabled")
	delete(stage2, "Hostname")
	delete(stage2, "MinSeverity")
	delete(stage2, "Port")
	delete(stage2, "Protocol")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.SyslogRemoteClientBaseAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m SyslogRemoteClientBaseAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
		Enabled *bool `json:"Enabled,omitempty"`

		// Hostname or IP Address of the syslog server where log should be stored.
		Hostname string `json:"Hostname,omitempty"`

		// Lowest level of messages to be included in the remote log.
		// Enum: [warning emergency alert critical error notice informational debug]
		MinSeverity *string `json:"MinSeverity,omitempty"`

		// Port number used for logging on syslog server.
		Port int64 `json:"Port,omitempty"`

		// Transport layer protocol for transmission of log messages to syslog server.
		// Enum: [udp tcp]
		Protocol *string `json:"Protocol,omitempty"`
	}

	stage1.Enabled = m.Enabled
	stage1.Hostname = m.Hostname
	stage1.MinSeverity = m.MinSeverity
	stage1.Port = m.Port
	stage1.Protocol = m.Protocol

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.SyslogRemoteClientBaseAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.SyslogRemoteClientBaseAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this syslog remote client base a o1 p1
func (m *SyslogRemoteClientBaseAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syslogRemoteClientBaseAO1P1TypeMinSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["warning","emergency","alert","critical","error","notice","informational","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syslogRemoteClientBaseAO1P1TypeMinSeverityPropEnum = append(syslogRemoteClientBaseAO1P1TypeMinSeverityPropEnum, v)
	}
}

const (

	// SyslogRemoteClientBaseAO1P1MinSeverityWarning captures enum value "warning"
	SyslogRemoteClientBaseAO1P1MinSeverityWarning string = "warning"

	// SyslogRemoteClientBaseAO1P1MinSeverityEmergency captures enum value "emergency"
	SyslogRemoteClientBaseAO1P1MinSeverityEmergency string = "emergency"

	// SyslogRemoteClientBaseAO1P1MinSeverityAlert captures enum value "alert"
	SyslogRemoteClientBaseAO1P1MinSeverityAlert string = "alert"

	// SyslogRemoteClientBaseAO1P1MinSeverityCritical captures enum value "critical"
	SyslogRemoteClientBaseAO1P1MinSeverityCritical string = "critical"

	// SyslogRemoteClientBaseAO1P1MinSeverityError captures enum value "error"
	SyslogRemoteClientBaseAO1P1MinSeverityError string = "error"

	// SyslogRemoteClientBaseAO1P1MinSeverityNotice captures enum value "notice"
	SyslogRemoteClientBaseAO1P1MinSeverityNotice string = "notice"

	// SyslogRemoteClientBaseAO1P1MinSeverityInformational captures enum value "informational"
	SyslogRemoteClientBaseAO1P1MinSeverityInformational string = "informational"

	// SyslogRemoteClientBaseAO1P1MinSeverityDebug captures enum value "debug"
	SyslogRemoteClientBaseAO1P1MinSeverityDebug string = "debug"
)

// prop value enum
func (m *SyslogRemoteClientBaseAO1P1) validateMinSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syslogRemoteClientBaseAO1P1TypeMinSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyslogRemoteClientBaseAO1P1) validateMinSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.MinSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateMinSeverityEnum("MinSeverity", "body", *m.MinSeverity); err != nil {
		return err
	}

	return nil
}

var syslogRemoteClientBaseAO1P1TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["udp","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syslogRemoteClientBaseAO1P1TypeProtocolPropEnum = append(syslogRemoteClientBaseAO1P1TypeProtocolPropEnum, v)
	}
}

const (

	// SyslogRemoteClientBaseAO1P1ProtocolUDP captures enum value "udp"
	SyslogRemoteClientBaseAO1P1ProtocolUDP string = "udp"

	// SyslogRemoteClientBaseAO1P1ProtocolTCP captures enum value "tcp"
	SyslogRemoteClientBaseAO1P1ProtocolTCP string = "tcp"
)

// prop value enum
func (m *SyslogRemoteClientBaseAO1P1) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syslogRemoteClientBaseAO1P1TypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyslogRemoteClientBaseAO1P1) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyslogRemoteClientBaseAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyslogRemoteClientBaseAO1P1) UnmarshalBinary(b []byte) error {
	var res SyslogRemoteClientBaseAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
