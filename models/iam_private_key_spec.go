// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamPrivateKeySpec Iam:Private Key Spec
//
// Parameters used to generate a private key.
//
// swagger:model iamPrivateKeySpec
type IamPrivateKeySpec struct {
	MoBaseMo

	// Algorithm used to generate the key pair and algorithm-speicifc parameters, such as RSA modulus size.
	Algorithm *PkixKeyGenerationSpec `json:"Algorithm,omitempty"`

	// The certificate signing request signed by the private key generated by this spec.
	CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamPrivateKeySpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Algorithm *PkixKeyGenerationSpec `json:"Algorithm,omitempty"`

		CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Algorithm = dataAO1.Algorithm

	m.CertificateRequest = dataAO1.CertificateRequest

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamPrivateKeySpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Algorithm *PkixKeyGenerationSpec `json:"Algorithm,omitempty"`

		CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`
	}

	dataAO1.Algorithm = m.Algorithm

	dataAO1.CertificateRequest = m.CertificateRequest

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam private key spec
func (m *IamPrivateKeySpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamPrivateKeySpec) validateAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if m.Algorithm != nil {
		if err := m.Algorithm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Algorithm")
			}
			return err
		}
	}

	return nil
}

func (m *IamPrivateKeySpec) validateCertificateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateRequest) { // not required
		return nil
	}

	if m.CertificateRequest != nil {
		if err := m.CertificateRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamPrivateKeySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamPrivateKeySpec) UnmarshalBinary(b []byte) error {
	var res IamPrivateKeySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
