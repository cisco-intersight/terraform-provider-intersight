// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdapterPortChannelSettings Port Channel Settings
//
// Port Channel setting for this adapter.
//
// swagger:model adapterPortChannelSettings
type AdapterPortChannelSettings struct {
	MoBaseComplexType

	AdapterPortChannelSettingsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AdapterPortChannelSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 AdapterPortChannelSettingsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AdapterPortChannelSettingsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AdapterPortChannelSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.AdapterPortChannelSettingsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this adapter port channel settings
func (m *AdapterPortChannelSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with AdapterPortChannelSettingsAO1P1
	if err := m.AdapterPortChannelSettingsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AdapterPortChannelSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdapterPortChannelSettings) UnmarshalBinary(b []byte) error {
	var res AdapterPortChannelSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdapterPortChannelSettingsAO1P1 adapter port channel settings a o1 p1
//
// swagger:model AdapterPortChannelSettingsAO1P1
type AdapterPortChannelSettingsAO1P1 struct {

	// When Port Channel is enabled, two vNICs and two vHBAs are available for use on the adapter card. When disabled, four vNICs and four vHBAs are available for use on the adapter card. Disabling port channel reboots the server. Port Channel is supported only for Cisco VIC 1455/1457 adapters.
	Enabled *bool `json:"Enabled,omitempty"`

	// adapter port channel settings a o1 p1
	AdapterPortChannelSettingsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AdapterPortChannelSettingsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// When Port Channel is enabled, two vNICs and two vHBAs are available for use on the adapter card. When disabled, four vNICs and four vHBAs are available for use on the adapter card. Disabling port channel reboots the server. Port Channel is supported only for Cisco VIC 1455/1457 adapters.
		Enabled *bool `json:"Enabled,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AdapterPortChannelSettingsAO1P1

	rcv.Enabled = stage1.Enabled
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Enabled")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AdapterPortChannelSettingsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AdapterPortChannelSettingsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// When Port Channel is enabled, two vNICs and two vHBAs are available for use on the adapter card. When disabled, four vNICs and four vHBAs are available for use on the adapter card. Disabling port channel reboots the server. Port Channel is supported only for Cisco VIC 1455/1457 adapters.
		Enabled *bool `json:"Enabled,omitempty"`
	}

	stage1.Enabled = m.Enabled

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AdapterPortChannelSettingsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AdapterPortChannelSettingsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this adapter port channel settings a o1 p1
func (m *AdapterPortChannelSettingsAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdapterPortChannelSettingsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdapterPortChannelSettingsAO1P1) UnmarshalBinary(b []byte) error {
	var res AdapterPortChannelSettingsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
