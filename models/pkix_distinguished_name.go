// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PkixDistinguishedName Pkix:Distinguished Name
//
// The identifier for the owner of an X.509 certificate and the authority that issued the certificate.
//
// swagger:model pkixDistinguishedName
type PkixDistinguishedName struct {
	MoBaseComplexType

	PkixDistinguishedNameAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PkixDistinguishedName) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 PkixDistinguishedNameAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.PkixDistinguishedNameAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PkixDistinguishedName) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.PkixDistinguishedNameAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pkix distinguished name
func (m *PkixDistinguishedName) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PkixDistinguishedNameAO1P1
	if err := m.PkixDistinguishedNameAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PkixDistinguishedName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkixDistinguishedName) UnmarshalBinary(b []byte) error {
	var res PkixDistinguishedName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkixDistinguishedNameAO1P1 pkix distinguished name a o1 p1
//
// swagger:model PkixDistinguishedNameAO1P1
type PkixDistinguishedNameAO1P1 struct {

	// A required component that identifies a person or an object.
	// Read Only: true
	CommonName string `json:"CommonName,omitempty"`

	// Identifier for the country in which the entity resides.
	// Read Only: true
	Country []string `json:"Country"`

	// Identifier for the place where the entry resides. The locality can be a city, county, township, or other geographic region.
	// Read Only: true
	Locality []string `json:"Locality"`

	// Identifier for the organization in which the entity resides.
	// Read Only: true
	Organization []string `json:"Organization"`

	// Identifier for a unit within the organization.
	// Read Only: true
	OrganizationalUnit []string `json:"OrganizationalUnit"`

	// Identifier for the state or province of the entity.
	// Read Only: true
	State []string `json:"State"`

	// pkix distinguished name a o1 p1
	PkixDistinguishedNameAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PkixDistinguishedNameAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// A required component that identifies a person or an object.
		// Read Only: true
		CommonName string `json:"CommonName,omitempty"`

		// Identifier for the country in which the entity resides.
		// Read Only: true
		Country []string `json:"Country"`

		// Identifier for the place where the entry resides. The locality can be a city, county, township, or other geographic region.
		// Read Only: true
		Locality []string `json:"Locality"`

		// Identifier for the organization in which the entity resides.
		// Read Only: true
		Organization []string `json:"Organization"`

		// Identifier for a unit within the organization.
		// Read Only: true
		OrganizationalUnit []string `json:"OrganizationalUnit"`

		// Identifier for the state or province of the entity.
		// Read Only: true
		State []string `json:"State"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PkixDistinguishedNameAO1P1

	rcv.CommonName = stage1.CommonName
	rcv.Country = stage1.Country
	rcv.Locality = stage1.Locality
	rcv.Organization = stage1.Organization
	rcv.OrganizationalUnit = stage1.OrganizationalUnit
	rcv.State = stage1.State
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "CommonName")
	delete(stage2, "Country")
	delete(stage2, "Locality")
	delete(stage2, "Organization")
	delete(stage2, "OrganizationalUnit")
	delete(stage2, "State")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PkixDistinguishedNameAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PkixDistinguishedNameAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// A required component that identifies a person or an object.
		// Read Only: true
		CommonName string `json:"CommonName,omitempty"`

		// Identifier for the country in which the entity resides.
		// Read Only: true
		Country []string `json:"Country"`

		// Identifier for the place where the entry resides. The locality can be a city, county, township, or other geographic region.
		// Read Only: true
		Locality []string `json:"Locality"`

		// Identifier for the organization in which the entity resides.
		// Read Only: true
		Organization []string `json:"Organization"`

		// Identifier for a unit within the organization.
		// Read Only: true
		OrganizationalUnit []string `json:"OrganizationalUnit"`

		// Identifier for the state or province of the entity.
		// Read Only: true
		State []string `json:"State"`
	}

	stage1.CommonName = m.CommonName
	stage1.Country = m.Country
	stage1.Locality = m.Locality
	stage1.Organization = m.Organization
	stage1.OrganizationalUnit = m.OrganizationalUnit
	stage1.State = m.State

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PkixDistinguishedNameAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PkixDistinguishedNameAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this pkix distinguished name a o1 p1
func (m *PkixDistinguishedNameAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PkixDistinguishedNameAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkixDistinguishedNameAO1P1) UnmarshalBinary(b []byte) error {
	var res PkixDistinguishedNameAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
