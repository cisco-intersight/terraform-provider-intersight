// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdapterDceInterfaceSettings DCE Interface Settings
//
// Settings applicable for the Data Center Ethernet (DCE) interfaces on the adapter card.
//
// swagger:model adapterDceInterfaceSettings
type AdapterDceInterfaceSettings struct {
	MoBaseComplexType

	AdapterDceInterfaceSettingsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AdapterDceInterfaceSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 AdapterDceInterfaceSettingsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AdapterDceInterfaceSettingsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AdapterDceInterfaceSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.AdapterDceInterfaceSettingsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this adapter dce interface settings
func (m *AdapterDceInterfaceSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with AdapterDceInterfaceSettingsAO1P1
	if err := m.AdapterDceInterfaceSettingsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AdapterDceInterfaceSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdapterDceInterfaceSettings) UnmarshalBinary(b []byte) error {
	var res AdapterDceInterfaceSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdapterDceInterfaceSettingsAO1P1 adapter dce interface settings a o1 p1
//
// swagger:model AdapterDceInterfaceSettingsAO1P1
type AdapterDceInterfaceSettingsAO1P1 struct {

	// Forward Error Correction (FEC) mode setting for the DCE interfaces of the adapter. FEC mode setting is supported only for Cisco VIC 14xx adapters. FEC mode 'cl74' is unsupported for Cisco VIC 1495/1497. This setting will be ignored for unsupported adapters and for unavailable DCE interfaces.
	// Enum: [Auto cl91 cl74 Off]
	FecMode *string `json:"FecMode,omitempty"`

	// DCE interface id on which settings needs to be configured. Supported values are (0-3).
	InterfaceID int64 `json:"InterfaceId,omitempty"`

	// adapter dce interface settings a o1 p1
	AdapterDceInterfaceSettingsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AdapterDceInterfaceSettingsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Forward Error Correction (FEC) mode setting for the DCE interfaces of the adapter. FEC mode setting is supported only for Cisco VIC 14xx adapters. FEC mode 'cl74' is unsupported for Cisco VIC 1495/1497. This setting will be ignored for unsupported adapters and for unavailable DCE interfaces.
		// Enum: [Auto cl91 cl74 Off]
		FecMode *string `json:"FecMode,omitempty"`

		// DCE interface id on which settings needs to be configured. Supported values are (0-3).
		InterfaceID int64 `json:"InterfaceId,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AdapterDceInterfaceSettingsAO1P1

	rcv.FecMode = stage1.FecMode
	rcv.InterfaceID = stage1.InterfaceID
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "FecMode")
	delete(stage2, "InterfaceId")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AdapterDceInterfaceSettingsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AdapterDceInterfaceSettingsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Forward Error Correction (FEC) mode setting for the DCE interfaces of the adapter. FEC mode setting is supported only for Cisco VIC 14xx adapters. FEC mode 'cl74' is unsupported for Cisco VIC 1495/1497. This setting will be ignored for unsupported adapters and for unavailable DCE interfaces.
		// Enum: [Auto cl91 cl74 Off]
		FecMode *string `json:"FecMode,omitempty"`

		// DCE interface id on which settings needs to be configured. Supported values are (0-3).
		InterfaceID int64 `json:"InterfaceId,omitempty"`
	}

	stage1.FecMode = m.FecMode
	stage1.InterfaceID = m.InterfaceID

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AdapterDceInterfaceSettingsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AdapterDceInterfaceSettingsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this adapter dce interface settings a o1 p1
func (m *AdapterDceInterfaceSettingsAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFecMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var adapterDceInterfaceSettingsAO1P1TypeFecModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Auto","cl91","cl74","Off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adapterDceInterfaceSettingsAO1P1TypeFecModePropEnum = append(adapterDceInterfaceSettingsAO1P1TypeFecModePropEnum, v)
	}
}

const (

	// AdapterDceInterfaceSettingsAO1P1FecModeAuto captures enum value "Auto"
	AdapterDceInterfaceSettingsAO1P1FecModeAuto string = "Auto"

	// AdapterDceInterfaceSettingsAO1P1FecModeCl91 captures enum value "cl91"
	AdapterDceInterfaceSettingsAO1P1FecModeCl91 string = "cl91"

	// AdapterDceInterfaceSettingsAO1P1FecModeCl74 captures enum value "cl74"
	AdapterDceInterfaceSettingsAO1P1FecModeCl74 string = "cl74"

	// AdapterDceInterfaceSettingsAO1P1FecModeOff captures enum value "Off"
	AdapterDceInterfaceSettingsAO1P1FecModeOff string = "Off"
)

// prop value enum
func (m *AdapterDceInterfaceSettingsAO1P1) validateFecModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, adapterDceInterfaceSettingsAO1P1TypeFecModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdapterDceInterfaceSettingsAO1P1) validateFecMode(formats strfmt.Registry) error {

	if swag.IsZero(m.FecMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateFecModeEnum("FecMode", "body", *m.FecMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdapterDceInterfaceSettingsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdapterDceInterfaceSettingsAO1P1) UnmarshalBinary(b []byte) error {
	var res AdapterDceInterfaceSettingsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
