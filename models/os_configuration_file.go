// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OsConfigurationFile Os:Configuration File
//
// A ConfigurationFile is an OS specific answer file that helps with the unattended
// installation.
// The file can also be a template file with placeholders instead of actual answers.
// Intersight supports the golang template syntax specified in https://golang.org/pkg/text/template/.
// The template supports placeholders for all the properties of os.Answers MO type
// as well as any additional user-defined properties. The values for these placeholders
// shall be given during OS installation in the form of os.Answers type and 'additionalProperties' in
// os.OsInstall object.
//
// swagger:model osConfigurationFile
type OsConfigurationFile struct {
	MoBaseMo

	// A collection of references to the [os.Catalog](mo://os.Catalog) Managed Object.
	// When this managed object is deleted, the referenced [os.Catalog](mo://os.Catalog) MO unsets its reference to this deleted MO.
	Catalog *OsCatalogRef `json:"Catalog,omitempty"`

	// This captures the operating system for which this configuration file is
	// defined.
	Distributions []*HclOperatingSystemRef `json:"Distributions"`

	// The content of the entire configuration file is stored as value. The content
	// can either be a static file content or a template content.
	// The template is expected to conform to the golang template syntax. The values
	// from os.Answers properties will be used to populate this template.
	FileContent string `json:"FileContent,omitempty"`

	// The name of the OS ConfigurationFile that uniquely identifies the configuration file.
	Name string `json:"Name,omitempty"`

	// This readonly property holds the list of placeholder names used in the
	// configuration file content in case it is a template.
	// Read Only: true
	Placeholders []*OsPlaceHolder `json:"Placeholders"`

	// An internal property that is used to distinguish between the pre-canned OS
	// configuration file entries and user provided entries.
	// Read Only: true
	Supported *bool `json:"Supported,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OsConfigurationFile) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Catalog *OsCatalogRef `json:"Catalog,omitempty"`

		Distributions []*HclOperatingSystemRef `json:"Distributions"`

		FileContent string `json:"FileContent,omitempty"`

		Name string `json:"Name,omitempty"`

		Placeholders []*OsPlaceHolder `json:"Placeholders"`

		Supported *bool `json:"Supported,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Catalog = dataAO1.Catalog

	m.Distributions = dataAO1.Distributions

	m.FileContent = dataAO1.FileContent

	m.Name = dataAO1.Name

	m.Placeholders = dataAO1.Placeholders

	m.Supported = dataAO1.Supported

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OsConfigurationFile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Catalog *OsCatalogRef `json:"Catalog,omitempty"`

		Distributions []*HclOperatingSystemRef `json:"Distributions"`

		FileContent string `json:"FileContent,omitempty"`

		Name string `json:"Name,omitempty"`

		Placeholders []*OsPlaceHolder `json:"Placeholders"`

		Supported *bool `json:"Supported,omitempty"`
	}

	dataAO1.Catalog = m.Catalog

	dataAO1.Distributions = m.Distributions

	dataAO1.FileContent = m.FileContent

	dataAO1.Name = m.Name

	dataAO1.Placeholders = m.Placeholders

	dataAO1.Supported = m.Supported

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this os configuration file
func (m *OsConfigurationFile) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaceholders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsConfigurationFile) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Catalog")
			}
			return err
		}
	}

	return nil
}

func (m *OsConfigurationFile) validateDistributions(formats strfmt.Registry) error {

	if swag.IsZero(m.Distributions) { // not required
		return nil
	}

	for i := 0; i < len(m.Distributions); i++ {
		if swag.IsZero(m.Distributions[i]) { // not required
			continue
		}

		if m.Distributions[i] != nil {
			if err := m.Distributions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Distributions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsConfigurationFile) validatePlaceholders(formats strfmt.Registry) error {

	if swag.IsZero(m.Placeholders) { // not required
		return nil
	}

	for i := 0; i < len(m.Placeholders); i++ {
		if swag.IsZero(m.Placeholders[i]) { // not required
			continue
		}

		if m.Placeholders[i] != nil {
			if err := m.Placeholders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Placeholders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsConfigurationFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsConfigurationFile) UnmarshalBinary(b []byte) error {
	var res OsConfigurationFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
