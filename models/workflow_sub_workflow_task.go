// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowSubWorkflowTask Workflow:Sub Workflow Task
//
// A SubWorkflowTask is used to include another workflow as a task within this workflow.
//
// swagger:model workflowSubWorkflowTask
type WorkflowSubWorkflowTask struct {
	WorkflowAbstractWorkerTask

	// Specify the catalog moid that this task belongs.
	CatalogMoid string `json:"CatalogMoid,omitempty"`

	// The workflow definition version to use as subworkflow. When no version is specified then the default version of the workflow at the time of creating or updating this workflow is used.
	Version int64 `json:"Version,omitempty"`

	// The resolved referenced workflow definition managed object.
	// Read Only: true
	WorkflowDefinitionID string `json:"WorkflowDefinitionId,omitempty"`

	// The qualified name of workflow that should be executed as a task.
	WorkflowDefinitionName string `json:"WorkflowDefinitionName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowSubWorkflowTask) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAbstractWorkerTask
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAbstractWorkerTask = aO0

	// AO1
	var dataAO1 struct {
		CatalogMoid string `json:"CatalogMoid,omitempty"`

		Version int64 `json:"Version,omitempty"`

		WorkflowDefinitionID string `json:"WorkflowDefinitionId,omitempty"`

		WorkflowDefinitionName string `json:"WorkflowDefinitionName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CatalogMoid = dataAO1.CatalogMoid

	m.Version = dataAO1.Version

	m.WorkflowDefinitionID = dataAO1.WorkflowDefinitionID

	m.WorkflowDefinitionName = dataAO1.WorkflowDefinitionName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowSubWorkflowTask) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowAbstractWorkerTask)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CatalogMoid string `json:"CatalogMoid,omitempty"`

		Version int64 `json:"Version,omitempty"`

		WorkflowDefinitionID string `json:"WorkflowDefinitionId,omitempty"`

		WorkflowDefinitionName string `json:"WorkflowDefinitionName,omitempty"`
	}

	dataAO1.CatalogMoid = m.CatalogMoid

	dataAO1.Version = m.Version

	dataAO1.WorkflowDefinitionID = m.WorkflowDefinitionID

	dataAO1.WorkflowDefinitionName = m.WorkflowDefinitionName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow sub workflow task
func (m *WorkflowSubWorkflowTask) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAbstractWorkerTask
	if err := m.WorkflowAbstractWorkerTask.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowSubWorkflowTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowSubWorkflowTask) UnmarshalBinary(b []byte) error {
	var res WorkflowSubWorkflowTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
