// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CondAlarm Cond:Alarm
//
// A state-full entity representing a found problem. Alarms can be reported by the managed system itself or can be determined by Intersight.
//
// swagger:model condAlarm
type CondAlarm struct {
	MoBaseMo

	// MoId of the affected object from the managed system's point of view.
	AffectedMoID string `json:"AffectedMoId,omitempty"`

	// Managed system affected object type. For example Adaptor, FI, CIMC.
	AffectedMoType string `json:"AffectedMoType,omitempty"`

	// A unique key for an alarm instance, consists of a combination of a unique system name and msAffectedObject.
	AffectedObject string `json:"AffectedObject,omitempty"`

	// Parent MoId of the fault from managed system. For example, Blade moid for adaptor fault.
	AncestorMoID string `json:"AncestorMoId,omitempty"`

	// Parent MO type of the fault from managed system. For example, Blade for adaptor fault.
	AncestorMoType string `json:"AncestorMoType,omitempty"`

	// A unique alarm code. For alarms mapped from UCS faults, this will be the same as the UCS fault code.
	Code string `json:"Code,omitempty"`

	// The time the alarm was created.
	// Format: date-time
	CreationTime strfmt.DateTime `json:"CreationTime,omitempty"`

	// A longer description of the alarm than the name. The description contains details of the component reporting the issue.
	Description string `json:"Description,omitempty"`

	// The time the alarm last had a change in severity.
	// Format: date-time
	LastTransitionTime strfmt.DateTime `json:"LastTransitionTime,omitempty"`

	// A unique key for the alarm from the managed system's point of view. For example, in the case of UCS, this is the fault's dn.
	MsAffectedObject string `json:"MsAffectedObject,omitempty"`

	// Uniquely identifies the type of alarm. For alarms originating from Intersight, this will be a descriptive name. For alarms that are mapped from faults, the name will be derived from fault properties. For example, alarms mapped from UCS faults will use a prefix of UCS and appended with the fault code.
	Name string `json:"Name,omitempty"`

	// The original severity when the alarm was first created.
	// Enum: [None Info Critical Warning Cleared]
	OrigSeverity *string `json:"OrigSeverity,omitempty"`

	// Relationship to set accountMoid on Alarms. With "onpeerdelete" set to "cascade", Alarms get deleted when the associated registered device is deleted.
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The severity of the alarm. Valid values are Critical, Warning, Info, and Cleared.
	// Enum: [None Info Critical Warning Cleared]
	Severity *string `json:"Severity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CondAlarm) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AffectedMoID string `json:"AffectedMoId,omitempty"`

		AffectedMoType string `json:"AffectedMoType,omitempty"`

		AffectedObject string `json:"AffectedObject,omitempty"`

		AncestorMoID string `json:"AncestorMoId,omitempty"`

		AncestorMoType string `json:"AncestorMoType,omitempty"`

		Code string `json:"Code,omitempty"`

		CreationTime strfmt.DateTime `json:"CreationTime,omitempty"`

		Description string `json:"Description,omitempty"`

		LastTransitionTime strfmt.DateTime `json:"LastTransitionTime,omitempty"`

		MsAffectedObject string `json:"MsAffectedObject,omitempty"`

		Name string `json:"Name,omitempty"`

		OrigSeverity *string `json:"OrigSeverity,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Severity *string `json:"Severity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AffectedMoID = dataAO1.AffectedMoID

	m.AffectedMoType = dataAO1.AffectedMoType

	m.AffectedObject = dataAO1.AffectedObject

	m.AncestorMoID = dataAO1.AncestorMoID

	m.AncestorMoType = dataAO1.AncestorMoType

	m.Code = dataAO1.Code

	m.CreationTime = dataAO1.CreationTime

	m.Description = dataAO1.Description

	m.LastTransitionTime = dataAO1.LastTransitionTime

	m.MsAffectedObject = dataAO1.MsAffectedObject

	m.Name = dataAO1.Name

	m.OrigSeverity = dataAO1.OrigSeverity

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Severity = dataAO1.Severity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CondAlarm) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AffectedMoID string `json:"AffectedMoId,omitempty"`

		AffectedMoType string `json:"AffectedMoType,omitempty"`

		AffectedObject string `json:"AffectedObject,omitempty"`

		AncestorMoID string `json:"AncestorMoId,omitempty"`

		AncestorMoType string `json:"AncestorMoType,omitempty"`

		Code string `json:"Code,omitempty"`

		CreationTime strfmt.DateTime `json:"CreationTime,omitempty"`

		Description string `json:"Description,omitempty"`

		LastTransitionTime strfmt.DateTime `json:"LastTransitionTime,omitempty"`

		MsAffectedObject string `json:"MsAffectedObject,omitempty"`

		Name string `json:"Name,omitempty"`

		OrigSeverity *string `json:"OrigSeverity,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Severity *string `json:"Severity,omitempty"`
	}

	dataAO1.AffectedMoID = m.AffectedMoID

	dataAO1.AffectedMoType = m.AffectedMoType

	dataAO1.AffectedObject = m.AffectedObject

	dataAO1.AncestorMoID = m.AncestorMoID

	dataAO1.AncestorMoType = m.AncestorMoType

	dataAO1.Code = m.Code

	dataAO1.CreationTime = m.CreationTime

	dataAO1.Description = m.Description

	dataAO1.LastTransitionTime = m.LastTransitionTime

	dataAO1.MsAffectedObject = m.MsAffectedObject

	dataAO1.Name = m.Name

	dataAO1.OrigSeverity = m.OrigSeverity

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Severity = m.Severity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cond alarm
func (m *CondAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CondAlarm) validateCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CondAlarm) validateLastTransitionTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastTransitionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastTransitionTime", "body", "date-time", m.LastTransitionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var condAlarmTypeOrigSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Info","Critical","Warning","Cleared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		condAlarmTypeOrigSeverityPropEnum = append(condAlarmTypeOrigSeverityPropEnum, v)
	}
}

// property enum
func (m *CondAlarm) validateOrigSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, condAlarmTypeOrigSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CondAlarm) validateOrigSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.OrigSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrigSeverityEnum("OrigSeverity", "body", *m.OrigSeverity); err != nil {
		return err
	}

	return nil
}

func (m *CondAlarm) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

var condAlarmTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Info","Critical","Warning","Cleared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		condAlarmTypeSeverityPropEnum = append(condAlarmTypeSeverityPropEnum, v)
	}
}

// property enum
func (m *CondAlarm) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, condAlarmTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CondAlarm) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("Severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CondAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CondAlarm) UnmarshalBinary(b []byte) error {
	var res CondAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
