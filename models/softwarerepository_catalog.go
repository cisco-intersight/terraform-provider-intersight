// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SoftwarerepositoryCatalog Softwarerepository:Catalog
//
// A container MO that holds references to the files in an account's image repository. It is internally created for each account and is used to hold information about all user uploaded files.
//
// swagger:model softwarerepositoryCatalog
type SoftwarerepositoryCatalog struct {
	MoBaseMo

	// The name of the catalog. The names are populated and predefined during MO creation.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// The organization under which this catalog exists. This relation will not be populated for the system catalog.
	// Read Only: true
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// The system under which this catalog exists. This relation will not be populated for organization catalogs.
	// Read Only: true
	System *IamSystemRef `json:"System,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SoftwarerepositoryCatalog) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		System *IamSystemRef `json:"System,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.Organization = dataAO1.Organization

	m.System = dataAO1.System

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SoftwarerepositoryCatalog) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		System *IamSystemRef `json:"System,omitempty"`
	}

	dataAO1.Name = m.Name

	dataAO1.Organization = m.Organization

	dataAO1.System = m.System

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this softwarerepository catalog
func (m *SoftwarerepositoryCatalog) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwarerepositoryCatalog) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwarerepositoryCatalog) validateSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("System")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwarerepositoryCatalog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwarerepositoryCatalog) UnmarshalBinary(b []byte) error {
	var res SoftwarerepositoryCatalog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
