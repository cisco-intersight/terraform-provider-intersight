// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpPolicy SNMP
//
// Policy to configure SNMP settings on endpoint.
//
// swagger:model snmpPolicy
type SnmpPolicy struct {
	PolicyAbstractPolicy

	// The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The name can be 18 characters long.
	AccessCommunityString string `json:"AccessCommunityString,omitempty"`

	// Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users.
	// Enum: [Disabled Limited Full]
	CommunityAccess *string `json:"CommunityAccess,omitempty"`

	// State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
	Enabled *bool `json:"Enabled,omitempty"`

	// User-defined unique identification of the static engine.
	EngineID string `json:"EngineId,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Relationship to the profile object.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

	// Port on which Cisco IMC SNMP agent runs.
	SnmpPort int64 `json:"SnmpPort,omitempty"`

	// List of SNMP traps for the policy.
	SnmpTraps []*SnmpTrap `json:"SnmpTraps"`

	// List of SNMP users for the policy.
	SnmpUsers []*SnmpUser `json:"SnmpUsers"`

	// Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or a name and telephone number.
	SysContact string `json:"SysContact,omitempty"`

	// Location of host on which the SNMP agent (server) runs.
	SysLocation string `json:"SysLocation,omitempty"`

	// SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
	TrapCommunity string `json:"TrapCommunity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SnmpPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		AccessCommunityString string `json:"AccessCommunityString,omitempty"`

		CommunityAccess *string `json:"CommunityAccess,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		EngineID string `json:"EngineId,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		SnmpPort int64 `json:"SnmpPort,omitempty"`

		SnmpTraps []*SnmpTrap `json:"SnmpTraps"`

		SnmpUsers []*SnmpUser `json:"SnmpUsers"`

		SysContact string `json:"SysContact,omitempty"`

		SysLocation string `json:"SysLocation,omitempty"`

		TrapCommunity string `json:"TrapCommunity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccessCommunityString = dataAO1.AccessCommunityString

	m.CommunityAccess = dataAO1.CommunityAccess

	m.Enabled = dataAO1.Enabled

	m.EngineID = dataAO1.EngineID

	m.Organization = dataAO1.Organization

	m.Profiles = dataAO1.Profiles

	m.SnmpPort = dataAO1.SnmpPort

	m.SnmpTraps = dataAO1.SnmpTraps

	m.SnmpUsers = dataAO1.SnmpUsers

	m.SysContact = dataAO1.SysContact

	m.SysLocation = dataAO1.SysLocation

	m.TrapCommunity = dataAO1.TrapCommunity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SnmpPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccessCommunityString string `json:"AccessCommunityString,omitempty"`

		CommunityAccess *string `json:"CommunityAccess,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		EngineID string `json:"EngineId,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		SnmpPort int64 `json:"SnmpPort,omitempty"`

		SnmpTraps []*SnmpTrap `json:"SnmpTraps"`

		SnmpUsers []*SnmpUser `json:"SnmpUsers"`

		SysContact string `json:"SysContact,omitempty"`

		SysLocation string `json:"SysLocation,omitempty"`

		TrapCommunity string `json:"TrapCommunity,omitempty"`
	}

	dataAO1.AccessCommunityString = m.AccessCommunityString

	dataAO1.CommunityAccess = m.CommunityAccess

	dataAO1.Enabled = m.Enabled

	dataAO1.EngineID = m.EngineID

	dataAO1.Organization = m.Organization

	dataAO1.Profiles = m.Profiles

	dataAO1.SnmpPort = m.SnmpPort

	dataAO1.SnmpTraps = m.SnmpTraps

	dataAO1.SnmpUsers = m.SnmpUsers

	dataAO1.SysContact = m.SysContact

	dataAO1.SysLocation = m.SysLocation

	dataAO1.TrapCommunity = m.TrapCommunity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this snmp policy
func (m *SnmpPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunityAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpTraps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpPolicyTypeCommunityAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Disabled","Limited","Full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpPolicyTypeCommunityAccessPropEnum = append(snmpPolicyTypeCommunityAccessPropEnum, v)
	}
}

// property enum
func (m *SnmpPolicy) validateCommunityAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpPolicyTypeCommunityAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpPolicy) validateCommunityAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunityAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateCommunityAccessEnum("CommunityAccess", "body", *m.CommunityAccess); err != nil {
		return err
	}

	return nil
}

func (m *SnmpPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SnmpPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnmpPolicy) validateSnmpTraps(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpTraps) { // not required
		return nil
	}

	for i := 0; i < len(m.SnmpTraps); i++ {
		if swag.IsZero(m.SnmpTraps[i]) { // not required
			continue
		}

		if m.SnmpTraps[i] != nil {
			if err := m.SnmpTraps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SnmpTraps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnmpPolicy) validateSnmpUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.SnmpUsers); i++ {
		if swag.IsZero(m.SnmpUsers[i]) { // not required
			continue
		}

		if m.SnmpUsers[i] != nil {
			if err := m.SnmpUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SnmpUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpPolicy) UnmarshalBinary(b []byte) error {
	var res SnmpPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
