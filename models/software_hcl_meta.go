// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SoftwareHclMeta Json For Hcl Meta
//
// A Json file consisting Hcl meta uploaded to be consumed by HCL service.
//
// swagger:model softwareHclMeta
type SoftwareHclMeta struct {
	FirmwareBaseDistributable

	// The catalog where this file is present.
	Catalog *SoftwarerepositoryCatalogRef `json:"Catalog,omitempty"`

	// The type of content that the Json file holds (Incremental or full dump).
	// Enum: [Full Incremental]
	ContentType *string `json:"ContentType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SoftwareHclMeta) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FirmwareBaseDistributable
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FirmwareBaseDistributable = aO0

	// AO1
	var dataAO1 struct {
		Catalog *SoftwarerepositoryCatalogRef `json:"Catalog,omitempty"`

		ContentType *string `json:"ContentType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Catalog = dataAO1.Catalog

	m.ContentType = dataAO1.ContentType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SoftwareHclMeta) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.FirmwareBaseDistributable)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Catalog *SoftwarerepositoryCatalogRef `json:"Catalog,omitempty"`

		ContentType *string `json:"ContentType,omitempty"`
	}

	dataAO1.Catalog = m.Catalog

	dataAO1.ContentType = m.ContentType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this software hcl meta
func (m *SoftwareHclMeta) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FirmwareBaseDistributable
	if err := m.FirmwareBaseDistributable.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareHclMeta) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Catalog")
			}
			return err
		}
	}

	return nil
}

var softwareHclMetaTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Full","Incremental"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareHclMetaTypeContentTypePropEnum = append(softwareHclMetaTypeContentTypePropEnum, v)
	}
}

// property enum
func (m *SoftwareHclMeta) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, softwareHclMetaTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareHclMeta) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("ContentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareHclMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareHclMeta) UnmarshalBinary(b []byte) error {
	var res SoftwareHclMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
