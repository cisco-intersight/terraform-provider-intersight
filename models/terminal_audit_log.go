// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TerminalAuditLog Terminal:Audit Log
//
// Audit log of remote terminal user sessions.
//
// swagger:model terminalAuditLog
type TerminalAuditLog struct {
	MoBaseMo

	// The device this terminal was opened on.
	// Read Only: true
	DeviceRegistration *AssetDeviceConnectionRef `json:"DeviceRegistration,omitempty"`

	// The time the terminal was closed. If terminal has not closed, value is zero time.
	// Read Only: true
	// Format: date-time
	EndTime strfmt.DateTime `json:"EndTime,omitempty"`

	// The time the terminal session was opened.
	// Read Only: true
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// The user that opened the terminal session.
	// Read Only: true
	User *IamUserRef `json:"User,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TerminalAuditLog) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DeviceRegistration *AssetDeviceConnectionRef `json:"DeviceRegistration,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		User *IamUserRef `json:"User,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DeviceRegistration = dataAO1.DeviceRegistration

	m.EndTime = dataAO1.EndTime

	m.StartTime = dataAO1.StartTime

	m.User = dataAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TerminalAuditLog) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DeviceRegistration *AssetDeviceConnectionRef `json:"DeviceRegistration,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		User *IamUserRef `json:"User,omitempty"`
	}

	dataAO1.DeviceRegistration = m.DeviceRegistration

	dataAO1.EndTime = m.EndTime

	dataAO1.StartTime = m.StartTime

	dataAO1.User = m.User

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this terminal audit log
func (m *TerminalAuditLog) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerminalAuditLog) validateDeviceRegistration(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceRegistration) { // not required
		return nil
	}

	if m.DeviceRegistration != nil {
		if err := m.DeviceRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeviceRegistration")
			}
			return err
		}
	}

	return nil
}

func (m *TerminalAuditLog) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TerminalAuditLog) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TerminalAuditLog) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerminalAuditLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerminalAuditLog) UnmarshalBinary(b []byte) error {
	var res TerminalAuditLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
