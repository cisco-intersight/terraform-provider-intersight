// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePureHost Storage:Pure Host
//
// A host entity in PureStorage FlashArray. It is an abstraction used by PureStorage to organize the storage network addresses (Fibre Channel worldwide names or iSCSI qualified names) of client computers and to control communications between clients and volumes.
//
// swagger:model storagePureHost
type StoragePureHost struct {
	StorageHost

	// Relationship to the Host Group that the host belongs to.
	// Read Only: true
	HostGroup *StoragePureHostGroupRef `json:"HostGroup,omitempty"`

	// Name of host group where the host belongs to. Empty if host is not part of any HostGroup.
	// Read Only: true
	HostGroupName string `json:"HostGroupName,omitempty"`

	// A collection of references to the [storage.PureProtectionGroup](mo://storage.PureProtectionGroup) Managed Object.
	// When this managed object is deleted, the referenced [storage.PureProtectionGroup](mo://storage.PureProtectionGroup) MO unsets its reference to this deleted MO.
	// Read Only: true
	ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

	// Device registration managed object that represents this storage array connection to Intersight.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Storage space utilized by the host entity.
	// Read Only: true
	StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePureHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageHost
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageHost = aO0

	// AO1
	var dataAO1 struct {
		HostGroup *StoragePureHostGroupRef `json:"HostGroup,omitempty"`

		HostGroupName string `json:"HostGroupName,omitempty"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HostGroup = dataAO1.HostGroup

	m.HostGroupName = dataAO1.HostGroupName

	m.ProtectionGroup = dataAO1.ProtectionGroup

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageUtilization = dataAO1.StorageUtilization

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePureHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StorageHost)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HostGroup *StoragePureHostGroupRef `json:"HostGroup,omitempty"`

		HostGroupName string `json:"HostGroupName,omitempty"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
	}

	dataAO1.HostGroup = m.HostGroup

	dataAO1.HostGroupName = m.HostGroupName

	dataAO1.ProtectionGroup = m.ProtectionGroup

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageUtilization = m.StorageUtilization

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pure host
func (m *StoragePureHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageHost
	if err := m.StorageHost.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePureHost) validateHostGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroup) { // not required
		return nil
	}

	if m.HostGroup != nil {
		if err := m.HostGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HostGroup")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHost) validateProtectionGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionGroup) { // not required
		return nil
	}

	if m.ProtectionGroup != nil {
		if err := m.ProtectionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProtectionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHost) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHost) validateStorageUtilization(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUtilization) { // not required
		return nil
	}

	if m.StorageUtilization != nil {
		if err := m.StorageUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageUtilization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePureHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePureHost) UnmarshalBinary(b []byte) error {
	var res StoragePureHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
