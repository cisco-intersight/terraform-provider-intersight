// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AaaAbstractAuditRecord Aaa:Abstract Audit Record
//
// AbstractAuditRecord is an abstract base type that specifies the common properties for all audit log records concrete sub-types.
//
// swagger:model aaaAbstractAuditRecord
type AaaAbstractAuditRecord struct {
	MoBaseMo

	// The operation that was performed on this Managed Object.
	// The event is a compound string that includes the CRUD operation such as Create, Modify, Delete, and a string representing the Managed Object type.
	Event string `json:"Event,omitempty"`

	// The user-friendly names of the changed MO.
	MoDisplayNames interface{} `json:"MoDisplayNames,omitempty"`

	// The object type of the REST resource that was created, modified or deleted.
	MoType string `json:"MoType,omitempty"`

	// The Moid of the REST resource that was created, modified or deleted.
	ObjectMoid string `json:"ObjectMoid,omitempty"`

	// The body of the REST request that was received from a client to create or modify a REST resource, represented as a JSON document.
	Request interface{} `json:"Request,omitempty"`

	// The trace id of the request that was used to create, modify or delete a REST resource.
	// A trace id is a unique identifier for one particular REST request. It may be used for troubleshooting purpose
	// by the Intersight technical support team.
	TraceID string `json:"TraceId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AaaAbstractAuditRecord) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Event string `json:"Event,omitempty"`

		MoDisplayNames interface{} `json:"MoDisplayNames,omitempty"`

		MoType string `json:"MoType,omitempty"`

		ObjectMoid string `json:"ObjectMoid,omitempty"`

		Request interface{} `json:"Request,omitempty"`

		TraceID string `json:"TraceId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Event = dataAO1.Event

	m.MoDisplayNames = dataAO1.MoDisplayNames

	m.MoType = dataAO1.MoType

	m.ObjectMoid = dataAO1.ObjectMoid

	m.Request = dataAO1.Request

	m.TraceID = dataAO1.TraceID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AaaAbstractAuditRecord) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Event string `json:"Event,omitempty"`

		MoDisplayNames interface{} `json:"MoDisplayNames,omitempty"`

		MoType string `json:"MoType,omitempty"`

		ObjectMoid string `json:"ObjectMoid,omitempty"`

		Request interface{} `json:"Request,omitempty"`

		TraceID string `json:"TraceId,omitempty"`
	}

	dataAO1.Event = m.Event

	dataAO1.MoDisplayNames = m.MoDisplayNames

	dataAO1.MoType = m.MoType

	dataAO1.ObjectMoid = m.ObjectMoid

	dataAO1.Request = m.Request

	dataAO1.TraceID = m.TraceID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this aaa abstract audit record
func (m *AaaAbstractAuditRecord) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AaaAbstractAuditRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AaaAbstractAuditRecord) UnmarshalBinary(b []byte) error {
	var res AaaAbstractAuditRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
