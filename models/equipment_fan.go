// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentFan Equipment:Fan
//
// Fan in a Fabric Interconnect / Chassis / RackUnit.
//
// swagger:model equipmentFan
type EquipmentFan struct {
	EquipmentBase

	// This field is to provide description for the fan.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// A collection of references to the [equipment.FanModule](mo://equipment.FanModule) Managed Object.
	// When this managed object is deleted, the referenced [equipment.FanModule](mo://equipment.FanModule) MO unsets its reference to this deleted MO.
	// Read Only: true
	EquipmentFanModule *EquipmentFanModuleRef `json:"EquipmentFanModule,omitempty"`

	// This field acts as the identifier for this particular Fan, within the Fabric Interconnect.
	// Read Only: true
	FanID int64 `json:"FanId,omitempty"`

	// This field is used to identify the Fan Module to which this Fan belongs.
	// Read Only: true
	FanModuleID int64 `json:"FanModuleId,omitempty"`

	// Fan module Identifier for the fan.
	// Read Only: true
	ModuleID int64 `json:"ModuleId,omitempty"`

	// oper state
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// This field identifies the Part Number for this Fan Unit.
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// This field identifies the Product ID for the fans.
	// Read Only: true
	Pid string `json:"Pid,omitempty"`

	// This field is used to indicate this fan unit's presence.
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// This field identifies the Stockkeeping Unit for this Fan Unit.
	// Read Only: true
	Sku string `json:"Sku,omitempty"`

	// Tray identifier for the fan module.
	// Read Only: true
	TrayID int64 `json:"TrayId,omitempty"`

	// This field identifies the Vendor ID for this Fan Unit.
	// Read Only: true
	Vid string `json:"Vid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentFan) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		EquipmentFanModule *EquipmentFanModuleRef `json:"EquipmentFanModule,omitempty"`

		FanID int64 `json:"FanId,omitempty"`

		FanModuleID int64 `json:"FanModuleId,omitempty"`

		ModuleID int64 `json:"ModuleId,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Sku string `json:"Sku,omitempty"`

		TrayID int64 `json:"TrayId,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.EquipmentFanModule = dataAO1.EquipmentFanModule

	m.FanID = dataAO1.FanID

	m.FanModuleID = dataAO1.FanModuleID

	m.ModuleID = dataAO1.ModuleID

	m.OperState = dataAO1.OperState

	m.PartNumber = dataAO1.PartNumber

	m.Pid = dataAO1.Pid

	m.Presence = dataAO1.Presence

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Sku = dataAO1.Sku

	m.TrayID = dataAO1.TrayID

	m.Vid = dataAO1.Vid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentFan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		EquipmentFanModule *EquipmentFanModuleRef `json:"EquipmentFanModule,omitempty"`

		FanID int64 `json:"FanId,omitempty"`

		FanModuleID int64 `json:"FanModuleId,omitempty"`

		ModuleID int64 `json:"ModuleId,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Sku string `json:"Sku,omitempty"`

		TrayID int64 `json:"TrayId,omitempty"`

		Vid string `json:"Vid,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.EquipmentFanModule = m.EquipmentFanModule

	dataAO1.FanID = m.FanID

	dataAO1.FanModuleID = m.FanModuleID

	dataAO1.ModuleID = m.ModuleID

	dataAO1.OperState = m.OperState

	dataAO1.PartNumber = m.PartNumber

	dataAO1.Pid = m.Pid

	dataAO1.Presence = m.Presence

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Sku = m.Sku

	dataAO1.TrayID = m.TrayID

	dataAO1.Vid = m.Vid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment fan
func (m *EquipmentFan) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentFanModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentFan) validateEquipmentFanModule(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentFanModule) { // not required
		return nil
	}

	if m.EquipmentFanModule != nil {
		if err := m.EquipmentFanModule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentFanModule")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentFan) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentFan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentFan) UnmarshalBinary(b []byte) error {
	var res EquipmentFan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
