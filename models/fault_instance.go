// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FaultInstance Fault:Instance
//
// An endpoint anomaly is represented by this object.
//
// swagger:model faultInstance
type FaultInstance struct {
	InventoryBase

	// acknowledged
	// Read Only: true
	Acknowledged string `json:"Acknowledged,omitempty"`

	// affected dn
	// Read Only: true
	AffectedDn string `json:"AffectedDn,omitempty"`

	// Managed object Id which was affected.
	// Read Only: true
	AffectedMoID string `json:"AffectedMoId,omitempty"`

	// Managed object type which was affected.
	// Read Only: true
	AffectedMoType string `json:"AffectedMoType,omitempty"`

	// ancestor mo Id
	// Read Only: true
	AncestorMoID string `json:"AncestorMoId,omitempty"`

	// ancestor mo type
	// Read Only: true
	AncestorMoType string `json:"AncestorMoType,omitempty"`

	// code
	// Read Only: true
	Code string `json:"Code,omitempty"`

	// creation time
	// Read Only: true
	CreationTime string `json:"CreationTime,omitempty"`

	// Short summary of the fault found.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// last transition time
	// Read Only: true
	LastTransitionTime string `json:"LastTransitionTime,omitempty"`

	// num occurrences
	// Read Only: true
	NumOccurrences int64 `json:"NumOccurrences,omitempty"`

	// original severity
	// Read Only: true
	OriginalSeverity string `json:"OriginalSeverity,omitempty"`

	// previous severity
	// Read Only: true
	PreviousSeverity string `json:"PreviousSeverity,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// rule
	// Read Only: true
	Rule string `json:"Rule,omitempty"`

	// Severity of the fault found.
	// Read Only: true
	Severity string `json:"Severity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FaultInstance) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		Acknowledged string `json:"Acknowledged,omitempty"`

		AffectedDn string `json:"AffectedDn,omitempty"`

		AffectedMoID string `json:"AffectedMoId,omitempty"`

		AffectedMoType string `json:"AffectedMoType,omitempty"`

		AncestorMoID string `json:"AncestorMoId,omitempty"`

		AncestorMoType string `json:"AncestorMoType,omitempty"`

		Code string `json:"Code,omitempty"`

		CreationTime string `json:"CreationTime,omitempty"`

		Description string `json:"Description,omitempty"`

		LastTransitionTime string `json:"LastTransitionTime,omitempty"`

		NumOccurrences int64 `json:"NumOccurrences,omitempty"`

		OriginalSeverity string `json:"OriginalSeverity,omitempty"`

		PreviousSeverity string `json:"PreviousSeverity,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Rule string `json:"Rule,omitempty"`

		Severity string `json:"Severity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Acknowledged = dataAO1.Acknowledged

	m.AffectedDn = dataAO1.AffectedDn

	m.AffectedMoID = dataAO1.AffectedMoID

	m.AffectedMoType = dataAO1.AffectedMoType

	m.AncestorMoID = dataAO1.AncestorMoID

	m.AncestorMoType = dataAO1.AncestorMoType

	m.Code = dataAO1.Code

	m.CreationTime = dataAO1.CreationTime

	m.Description = dataAO1.Description

	m.LastTransitionTime = dataAO1.LastTransitionTime

	m.NumOccurrences = dataAO1.NumOccurrences

	m.OriginalSeverity = dataAO1.OriginalSeverity

	m.PreviousSeverity = dataAO1.PreviousSeverity

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Rule = dataAO1.Rule

	m.Severity = dataAO1.Severity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FaultInstance) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Acknowledged string `json:"Acknowledged,omitempty"`

		AffectedDn string `json:"AffectedDn,omitempty"`

		AffectedMoID string `json:"AffectedMoId,omitempty"`

		AffectedMoType string `json:"AffectedMoType,omitempty"`

		AncestorMoID string `json:"AncestorMoId,omitempty"`

		AncestorMoType string `json:"AncestorMoType,omitempty"`

		Code string `json:"Code,omitempty"`

		CreationTime string `json:"CreationTime,omitempty"`

		Description string `json:"Description,omitempty"`

		LastTransitionTime string `json:"LastTransitionTime,omitempty"`

		NumOccurrences int64 `json:"NumOccurrences,omitempty"`

		OriginalSeverity string `json:"OriginalSeverity,omitempty"`

		PreviousSeverity string `json:"PreviousSeverity,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Rule string `json:"Rule,omitempty"`

		Severity string `json:"Severity,omitempty"`
	}

	dataAO1.Acknowledged = m.Acknowledged

	dataAO1.AffectedDn = m.AffectedDn

	dataAO1.AffectedMoID = m.AffectedMoID

	dataAO1.AffectedMoType = m.AffectedMoType

	dataAO1.AncestorMoID = m.AncestorMoID

	dataAO1.AncestorMoType = m.AncestorMoType

	dataAO1.Code = m.Code

	dataAO1.CreationTime = m.CreationTime

	dataAO1.Description = m.Description

	dataAO1.LastTransitionTime = m.LastTransitionTime

	dataAO1.NumOccurrences = m.NumOccurrences

	dataAO1.OriginalSeverity = m.OriginalSeverity

	dataAO1.PreviousSeverity = m.PreviousSeverity

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Rule = m.Rule

	dataAO1.Severity = m.Severity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this fault instance
func (m *FaultInstance) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FaultInstance) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FaultInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FaultInstance) UnmarshalBinary(b []byte) error {
	var res FaultInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
