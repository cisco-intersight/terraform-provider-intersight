// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyAbstractConfigResultEntry Policy:Abstract Config Result Entry
//
// The results details information.
//
// swagger:model policyAbstractConfigResultEntry
type PolicyAbstractConfigResultEntry struct {
	MoBaseMo

	// The completed time of the task in installer.
	CompletedTime string `json:"CompletedTime,omitempty"`

	// Context information on the change.
	Context *PolicyConfigResultContext `json:"Context,omitempty"`

	// Localized message based on the locale setting of the user's context.
	Message string `json:"Message,omitempty"`

	// The identifier of the object that owns the result message.
	// The owner ID is used to correlate a given result entry to a task or entity. For example, a config result
	// entry that describes the result of a workflow task may have the task's instance ID as the owner.
	OwnerID string `json:"OwnerId,omitempty"`

	// Values  -- Ok, Ok-with-warning, Errored.
	State string `json:"State,omitempty"`

	// Indicates if the result is reported during the logical model validation/resource allocation phase. or the configuration applying phase. Values -- validation, config.
	Type string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyAbstractConfigResultEntry) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		CompletedTime string `json:"CompletedTime,omitempty"`

		Context *PolicyConfigResultContext `json:"Context,omitempty"`

		Message string `json:"Message,omitempty"`

		OwnerID string `json:"OwnerId,omitempty"`

		State string `json:"State,omitempty"`

		Type string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CompletedTime = dataAO1.CompletedTime

	m.Context = dataAO1.Context

	m.Message = dataAO1.Message

	m.OwnerID = dataAO1.OwnerID

	m.State = dataAO1.State

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyAbstractConfigResultEntry) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CompletedTime string `json:"CompletedTime,omitempty"`

		Context *PolicyConfigResultContext `json:"Context,omitempty"`

		Message string `json:"Message,omitempty"`

		OwnerID string `json:"OwnerId,omitempty"`

		State string `json:"State,omitempty"`

		Type string `json:"Type,omitempty"`
	}

	dataAO1.CompletedTime = m.CompletedTime

	dataAO1.Context = m.Context

	dataAO1.Message = m.Message

	dataAO1.OwnerID = m.OwnerID

	dataAO1.State = m.State

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policy abstract config result entry
func (m *PolicyAbstractConfigResultEntry) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyAbstractConfigResultEntry) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyAbstractConfigResultEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyAbstractConfigResultEntry) UnmarshalBinary(b []byte) error {
	var res PolicyAbstractConfigResultEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
