// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SdwanTemplateInputsType Sdwan:Template Inputs Type
//
// swagger:model sdwanTemplateInputsType
type SdwanTemplateInputsType struct {
	MoBaseComplexType

	SdwanTemplateInputsTypeAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SdwanTemplateInputsType) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 SdwanTemplateInputsTypeAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.SdwanTemplateInputsTypeAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SdwanTemplateInputsType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.SdwanTemplateInputsTypeAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sdwan template inputs type
func (m *SdwanTemplateInputsType) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with SdwanTemplateInputsTypeAO1P1
	if err := m.SdwanTemplateInputsTypeAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SdwanTemplateInputsType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdwanTemplateInputsType) UnmarshalBinary(b []byte) error {
	var res SdwanTemplateInputsType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SdwanTemplateInputsTypeAO1P1 sdwan template inputs type a o1 p1
//
// swagger:model SdwanTemplateInputsTypeAO1P1
type SdwanTemplateInputsTypeAO1P1 struct {

	// Defines if the input is editable.
	Editable *bool `json:"Editable,omitempty"`

	// Name of the dynamic input key specified in the vManage template.
	Key string `json:"Key,omitempty"`

	// Defines if the input is optional or required.
	Required *bool `json:"Required,omitempty"`

	// Refers to the name of the vManage template that this inputs belongs to.
	// Read Only: true
	Template string `json:"Template,omitempty"`

	// Label for the property being saved in the current instance of template Input.
	Title string `json:"Title,omitempty"`

	// Defines the object type for the input.
	Type string `json:"Type,omitempty"`

	// Value of the dynamic input key specfied in the vManage template.
	Value string `json:"Value,omitempty"`

	// sdwan template inputs type a o1 p1
	SdwanTemplateInputsTypeAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *SdwanTemplateInputsTypeAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Defines if the input is editable.
		Editable *bool `json:"Editable,omitempty"`

		// Name of the dynamic input key specified in the vManage template.
		Key string `json:"Key,omitempty"`

		// Defines if the input is optional or required.
		Required *bool `json:"Required,omitempty"`

		// Refers to the name of the vManage template that this inputs belongs to.
		// Read Only: true
		Template string `json:"Template,omitempty"`

		// Label for the property being saved in the current instance of template Input.
		Title string `json:"Title,omitempty"`

		// Defines the object type for the input.
		Type string `json:"Type,omitempty"`

		// Value of the dynamic input key specfied in the vManage template.
		Value string `json:"Value,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SdwanTemplateInputsTypeAO1P1

	rcv.Editable = stage1.Editable
	rcv.Key = stage1.Key
	rcv.Required = stage1.Required
	rcv.Template = stage1.Template
	rcv.Title = stage1.Title
	rcv.Type = stage1.Type
	rcv.Value = stage1.Value
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Editable")
	delete(stage2, "Key")
	delete(stage2, "Required")
	delete(stage2, "Template")
	delete(stage2, "Title")
	delete(stage2, "Type")
	delete(stage2, "Value")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.SdwanTemplateInputsTypeAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m SdwanTemplateInputsTypeAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Defines if the input is editable.
		Editable *bool `json:"Editable,omitempty"`

		// Name of the dynamic input key specified in the vManage template.
		Key string `json:"Key,omitempty"`

		// Defines if the input is optional or required.
		Required *bool `json:"Required,omitempty"`

		// Refers to the name of the vManage template that this inputs belongs to.
		// Read Only: true
		Template string `json:"Template,omitempty"`

		// Label for the property being saved in the current instance of template Input.
		Title string `json:"Title,omitempty"`

		// Defines the object type for the input.
		Type string `json:"Type,omitempty"`

		// Value of the dynamic input key specfied in the vManage template.
		Value string `json:"Value,omitempty"`
	}

	stage1.Editable = m.Editable
	stage1.Key = m.Key
	stage1.Required = m.Required
	stage1.Template = m.Template
	stage1.Title = m.Title
	stage1.Type = m.Type
	stage1.Value = m.Value

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.SdwanTemplateInputsTypeAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.SdwanTemplateInputsTypeAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this sdwan template inputs type a o1 p1
func (m *SdwanTemplateInputsTypeAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SdwanTemplateInputsTypeAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdwanTemplateInputsTypeAO1P1) UnmarshalBinary(b []byte) error {
	var res SdwanTemplateInputsTypeAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
