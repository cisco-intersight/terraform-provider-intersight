// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BiosPolicy BIOS
//
// Policy for setting BIOS tokens on the endpoint.
//
// swagger:model biosPolicy
type BiosPolicy struct {
	PolicyAbstractPolicy

	// BIOS Token for setting ACS Control GPU-1 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu1state *string `json:"AcsControlGpu1state,omitempty"`

	// BIOS Token for setting ACS Control GPU-2 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu2state *string `json:"AcsControlGpu2state,omitempty"`

	// BIOS Token for setting ACS Control GPU-3 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu3state *string `json:"AcsControlGpu3state,omitempty"`

	// BIOS Token for setting ACS Control GPU-4 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu4state *string `json:"AcsControlGpu4state,omitempty"`

	// BIOS Token for setting ACS Control GPU-5 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu5state *string `json:"AcsControlGpu5state,omitempty"`

	// BIOS Token for setting ACS Control GPU-6 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu6state *string `json:"AcsControlGpu6state,omitempty"`

	// BIOS Token for setting ACS Control GPU-7 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu7state *string `json:"AcsControlGpu7state,omitempty"`

	// BIOS Token for setting ACS Control GPU-8 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlGpu8state *string `json:"AcsControlGpu8state,omitempty"`

	// BIOS Token for setting ACS Control Slot 11 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlSlot11state *string `json:"AcsControlSlot11state,omitempty"`

	// BIOS Token for setting ACS Control Slot 12 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlSlot12state *string `json:"AcsControlSlot12state,omitempty"`

	// BIOS Token for setting ACS Control Slot 13 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlSlot13state *string `json:"AcsControlSlot13state,omitempty"`

	// BIOS Token for setting ACS Control Slot 14 configuration.
	// Enum: [platform-default enabled disabled]
	AcsControlSlot14state *string `json:"AcsControlSlot14state,omitempty"`

	// BIOS Token for setting Adjacent Cache Line Prefetcher configuration.
	// Enum: [platform-default enabled disabled]
	AdjacentCacheLinePrefetch *string `json:"AdjacentCacheLinePrefetch,omitempty"`

	// BIOS Token for setting All USB Devices configuration.
	// Enum: [platform-default enabled disabled]
	AllUsbDevices *string `json:"AllUsbDevices,omitempty"`

	// BIOS Token for setting Altitude configuration.
	// Enum: [platform-default 1500-m 300-m 3000-m 900-m auto]
	Altitude *string `json:"Altitude,omitempty"`

	// BIOS Token for setting ASPM Support configuration.
	// Enum: [platform-default Auto Disabled Force L0s L1 Only]
	AspmSupport *string `json:"AspmSupport,omitempty"`

	// BIOS Token for setting Assert NMI on PERR configuration.
	// Enum: [platform-default enabled disabled]
	AssertNmiOnPerr *string `json:"AssertNmiOnPerr,omitempty"`

	// BIOS Token for setting Assert NMI on SERR configuration.
	// Enum: [platform-default enabled disabled]
	AssertNmiOnSerr *string `json:"AssertNmiOnSerr,omitempty"`

	// BIOS Token for setting Autonomous Core C-state configuration.
	// Enum: [platform-default enabled disabled]
	AutoCcState *string `json:"AutoCcState,omitempty"`

	// BIOS Token for setting CPU Autonomous Cstate configuration.
	// Enum: [platform-default enabled disabled]
	AutonumousCstateEnable *string `json:"AutonumousCstateEnable,omitempty"`

	// BIOS Token for setting Baud rate configuration.
	// Enum: [platform-default 115200 19200 38400 57600 9600]
	BaudRate *string `json:"BaudRate,omitempty"`

	// BIOS Token for setting BME DMA Mitigation configuration.
	// Enum: [platform-default enabled disabled]
	BmeDmaMitigation *string `json:"BmeDmaMitigation,omitempty"`

	// BIOS Token for setting Number of Retries configuration.
	// Enum: [platform-default 13 5 Infinite]
	BootOptionNumRetry *string `json:"BootOptionNumRetry,omitempty"`

	// BIOS Token for setting Cool Down Time  (sec) configuration.
	// Enum: [platform-default 15 45 90]
	BootOptionReCoolDown *string `json:"BootOptionReCoolDown,omitempty"`

	// BIOS Token for setting Boot option retry configuration.
	// Enum: [platform-default enabled disabled]
	BootOptionRetry *string `json:"BootOptionRetry,omitempty"`

	// BIOS Token for setting Boot Performance Mode configuration.
	// Enum: [platform-default Max Efficient Max Performance Set by Intel NM]
	BootPerformanceMode *string `json:"BootPerformanceMode,omitempty"`

	// BIOS Token for setting Core Performance Boost configuration.
	// Enum: [platform-default Auto disabled]
	CbsCmnCPUCpb *string `json:"CbsCmnCpuCpb,omitempty"`

	// BIOS Token for setting Downcore control configuration.
	// Enum: [platform-default Auto FOUR (2 + 2) FOUR (4 + 0) SIX (3 + 3) THREE (3 + 0) TWO (1 + 1) TWO (2 + 0)]
	CbsCmnCPUGenDowncoreCtrl *string `json:"CbsCmnCpuGenDowncoreCtrl,omitempty"`

	// BIOS Token for setting Global C-state Control configuration.
	// Enum: [platform-default Auto disabled enabled]
	CbsCmnCPUGlobalCstateCtrl *string `json:"CbsCmnCpuGlobalCstateCtrl,omitempty"`

	// BIOS Token for setting L1 Stream HW Prefetcher configuration.
	// Enum: [platform-default Auto disabled enabled]
	CbsCmnCPUL1streamHwPrefetcher *string `json:"CbsCmnCpuL1streamHwPrefetcher,omitempty"`

	// BIOS Token for setting L2 Stream HW Prefetcher configuration.
	// Enum: [platform-default Auto disabled enabled]
	CbsCmnCPUL2streamHwPrefetcher *string `json:"CbsCmnCpuL2streamHwPrefetcher,omitempty"`

	// BIOS Token for setting Determinism Slider configuration.
	// Enum: [platform-default Auto Performance Power]
	CbsCmnDeterminismSlider *string `json:"CbsCmnDeterminismSlider,omitempty"`

	// BIOS Token for setting IOMMU configuration.
	// Enum: [platform-default Auto disabled enabled]
	CbsCmnGnbNbIommu *string `json:"CbsCmnGnbNbIommu,omitempty"`

	// BIOS Token for setting Bank Group Swap configuration.
	// Enum: [platform-default Auto disabled enabled]
	CbsCmnMemCtrlBankGroupSwapDdr4 *string `json:"CbsCmnMemCtrlBankGroupSwapDdr4,omitempty"`

	// BIOS Token for setting Chipselect Interleaving configuration.
	// Enum: [platform-default Auto disabled]
	CbsCmnMemMapBankInterleaveDdr4 *string `json:"CbsCmnMemMapBankInterleaveDdr4,omitempty"`

	// BIOS Token for setting cTDP Control configuration.
	// Enum: [platform-default Auto Manual]
	CbsCmncTdpCtl *string `json:"CbsCmncTdpCtl,omitempty"`

	// BIOS Token for setting Memory interleaving configuration.
	// Enum: [platform-default Auto Channel Die None Socket]
	CbsDfCmnMemIntlv *string `json:"CbsDfCmnMemIntlv,omitempty"`

	// BIOS Token for setting Memory interleaving size configuration.
	// Enum: [platform-default 1 KB 2 KB 256 Bytes 512 Bytes Auto]
	CbsDfCmnMemIntlvSize *string `json:"CbsDfCmnMemIntlvSize,omitempty"`

	// BIOS Token for setting Consistent Device Naming configuration.
	// Enum: [platform-default enabled disabled]
	CdnEnable *string `json:"CdnEnable,omitempty"`

	// BIOS Token for setting CDN Support for LOM configuration.
	// Enum: [platform-default disabled enabled LOMs Only]
	CdnSupport *string `json:"CdnSupport,omitempty"`

	// BIOS Token for setting Channel Interleaving configuration.
	// Enum: [platform-default 1-way 2-way 3-way 4-way auto]
	ChannelInterLeave *string `json:"ChannelInterLeave,omitempty"`

	// BIOS Token for setting Adaptive Memory Training configuration.
	// Enum: [platform-default enabled disabled]
	CiscoAdaptiveMemTraining *string `json:"CiscoAdaptiveMemTraining,omitempty"`

	// BIOS Token for setting BIOS Techlog Level configuration.
	// Enum: [platform-default Maximum Minimum Normal]
	CiscoDebugLevel *string `json:"CiscoDebugLevel,omitempty"`

	// BIOS Token for setting OptionROM Launch Optimization configuration.
	// Enum: [platform-default enabled disabled]
	CiscoOpromLaunchOptimization *string `json:"CiscoOpromLaunchOptimization,omitempty"`

	// BIOS Token for setting CKE Low Policy configuration.
	// Enum: [platform-default auto disabled fast slow]
	CkeLowPolicy *string `json:"CkeLowPolicy,omitempty"`

	// BIOS Token for setting Closed Loop Therm Throt configuration.
	// Enum: [platform-default enabled disabled]
	ClosedLoopThermThrotl *string `json:"ClosedLoopThermThrotl,omitempty"`

	// BIOS Token for setting Processor CMCI configuration.
	// Enum: [platform-default enabled disabled]
	CmciEnable *string `json:"CmciEnable,omitempty"`

	// BIOS Token for setting Config TDP configuration.
	// Enum: [platform-default enabled disabled]
	ConfigTdp *string `json:"ConfigTdp,omitempty"`

	// BIOS Token for setting Console redirection configuration.
	// Enum: [platform-default com-0 com-1 disabled enabled serial-port-a]
	ConsoleRedirection *string `json:"ConsoleRedirection,omitempty"`

	// BIOS Token for setting Core MultiProcessing configuration.
	// Enum: [platform-default 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 3 4 5 6 7 8 9 all]
	CoreMultiProcessing *string `json:"CoreMultiProcessing,omitempty"`

	// BIOS Token for setting Energy Performance configuration.
	// Enum: [platform-default balanced-energy balanced-performance balanced-power energy-efficient performance power]
	CPUEnergyPerformance *string `json:"CpuEnergyPerformance,omitempty"`

	// BIOS Token for setting Frequency Floor Override configuration.
	// Enum: [platform-default enabled disabled]
	CPUFrequencyFloor *string `json:"CpuFrequencyFloor,omitempty"`

	// BIOS Token for setting CPU Performance configuration.
	// Enum: [platform-default custom enterprise high-throughput hpc]
	CPUPerformance *string `json:"CpuPerformance,omitempty"`

	// BIOS Token for setting Power Technology configuration.
	// Enum: [platform-default custom disabled energy-efficient performance]
	CPUPowerManagement *string `json:"CpuPowerManagement,omitempty"`

	// BIOS Token for setting DCPMM Firmware Downgrade configuration.
	// Enum: [platform-default enabled disabled]
	DcpmmFirmwareDowngrade *string `json:"DcpmmFirmwareDowngrade,omitempty"`

	// BIOS Token for setting Demand Scrub configuration.
	// Enum: [platform-default enabled disabled]
	DemandScrub *string `json:"DemandScrub,omitempty"`

	// BIOS Token for setting Direct Cache Access Support configuration.
	// Enum: [platform-default auto disabled enabled]
	DirectCacheAccess *string `json:"DirectCacheAccess,omitempty"`

	// BIOS Token for setting DRAM Clock Throttling configuration.
	// Enum: [platform-default Auto Balanced Energy Efficient Performance]
	DramClockThrottling *string `json:"DramClockThrottling,omitempty"`

	// BIOS Token for setting DRAM Refresh Rate configuration.
	// Enum: [platform-default 1x 2x 3x 4x Auto]
	DramRefreshRate *string `json:"DramRefreshRate,omitempty"`

	// BIOS Token for setting Energy Efficient Turbo configuration.
	// Enum: [platform-default enabled disabled]
	EnergyEfficientTurbo *string `json:"EnergyEfficientTurbo,omitempty"`

	// BIOS Token for setting Energy Performance Tuning configuration.
	// Enum: [platform-default BIOS OS]
	EngPerfTuning *string `json:"EngPerfTuning,omitempty"`

	// BIOS Token for setting Enhanced Intel Speedstep (R) Technology configuration.
	// Enum: [platform-default enabled disabled]
	EnhancedIntelSpeedStepTech *string `json:"EnhancedIntelSpeedStepTech,omitempty"`

	// BIOS Token for setting EPP Profile configuration.
	// Enum: [platform-default Balanced Performance Balanced Power Performance Power]
	EppProfile *string `json:"EppProfile,omitempty"`

	// BIOS Token for setting Execute Disable Bit configuration.
	// Enum: [platform-default enabled disabled]
	ExecuteDisableBit *string `json:"ExecuteDisableBit,omitempty"`

	// BIOS Token for setting Local X2 Apic configuration.
	// Enum: [platform-default disabled enabled X2APIC XAPIC]
	ExtendedApic *string `json:"ExtendedApic,omitempty"`

	// BIOS Token for setting Flow Control configuration.
	// Enum: [platform-default none rts-cts]
	FlowControl *string `json:"FlowControl,omitempty"`

	// BIOS Token for setting FRB-2 Timer configuration.
	// Enum: [platform-default enabled disabled]
	Frb2enable *string `json:"Frb2enable,omitempty"`

	// BIOS Token for setting Hardware Prefetcher configuration.
	// Enum: [platform-default enabled disabled]
	HardwarePrefetch *string `json:"HardwarePrefetch,omitempty"`

	// BIOS Token for setting CPU Hardware Power Management configuration.
	// Enum: [platform-default Disabled HWPM Native Mode HWPM OOB Mode NATIVE MODE Native Mode with no Legacy OOB MODE]
	HwpmEnable *string `json:"HwpmEnable,omitempty"`

	// BIOS Token for setting IMC Interleaving configuration.
	// Enum: [platform-default 1-way Interleave 2-way Interleave Auto]
	ImcInterleave *string `json:"ImcInterleave,omitempty"`

	// BIOS Token for setting Intel HyperThreading Tech configuration.
	// Enum: [platform-default enabled disabled]
	IntelHyperThreadingTech *string `json:"IntelHyperThreadingTech,omitempty"`

	// BIOS Token for setting Intel Speed Select configuration.
	// Enum: [platform-default Base Config 1 Config 2]
	IntelSpeedSelect *string `json:"IntelSpeedSelect,omitempty"`

	// BIOS Token for setting Intel Turbo Boost Tech configuration.
	// Enum: [platform-default enabled disabled]
	IntelTurboBoostTech *string `json:"IntelTurboBoostTech,omitempty"`

	// BIOS Token for setting Intel (R) VT configuration.
	// Enum: [platform-default enabled disabled]
	IntelVirtualizationTechnology *string `json:"IntelVirtualizationTechnology,omitempty"`

	// BIOS Token for setting Intel VT for directed IO configuration.
	// Enum: [platform-default enabled disabled]
	IntelVtForDirectedIo *string `json:"IntelVtForDirectedIo,omitempty"`

	// BIOS Token for setting Intel (R) VT-d Coherency Support configuration.
	// Enum: [platform-default enabled disabled]
	IntelVtdCoherencySupport *string `json:"IntelVtdCoherencySupport,omitempty"`

	// BIOS Token for setting Intel (R) VT-d Interrupt Remapping configuration.
	// Enum: [platform-default enabled disabled]
	IntelVtdInterruptRemapping *string `json:"IntelVtdInterruptRemapping,omitempty"`

	// BIOS Token for setting Intel (R) VT-d PassThrough DMA support configuration.
	// Enum: [platform-default enabled disabled]
	IntelVtdPassThroughDmaSupport *string `json:"IntelVtdPassThroughDmaSupport,omitempty"`

	// BIOS Token for setting Intel VTD ATS support configuration.
	// Enum: [platform-default enabled disabled]
	IntelVtdatsSupport *string `json:"IntelVtdatsSupport,omitempty"`

	// BIOS Token for setting IIO Error Enable configuration.
	// Enum: [platform-default No Yes]
	IohErrorEnable *string `json:"IohErrorEnable,omitempty"`

	// BIOS Token for setting IOH Resource Allocation configuration.
	// Enum: [platform-default IOH0 24k IOH1 40k IOH0 32k IOH1 32k IOH0 40k IOH1 24k IOH0 48k IOH1 16k IOH0 56k IOH1 8k]
	IohResource *string `json:"IohResource,omitempty"`

	// BIOS Token for setting DCU IP Prefetcher configuration.
	// Enum: [platform-default enabled disabled]
	IPPrefetch *string `json:"IpPrefetch,omitempty"`

	// BIOS Token for setting IPV6 PXE Support configuration.
	// Enum: [platform-default enabled disabled]
	Ipv6pxe *string `json:"Ipv6pxe,omitempty"`

	// BIOS Token for setting KTI Prefetch configuration.
	// Enum: [platform-default enabled disabled]
	KtiPrefetch *string `json:"KtiPrefetch,omitempty"`

	// BIOS Token for setting Legacy OS redirection configuration.
	// Enum: [platform-default enabled disabled]
	LegacyOsRedirection *string `json:"LegacyOsRedirection,omitempty"`

	// BIOS Token for setting Legacy USB Support configuration.
	// Enum: [platform-default auto disabled enabled]
	LegacyUsbSupport *string `json:"LegacyUsbSupport,omitempty"`

	// BIOS Token for setting LLC Prefetch configuration.
	// Enum: [platform-default enabled disabled]
	LlcPrefetch *string `json:"LlcPrefetch,omitempty"`

	// BIOS Token for setting LOM Port 0 OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	LomPort0state *string `json:"LomPort0state,omitempty"`

	// BIOS Token for setting LOM Port 1 OptionRom configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	LomPort1state *string `json:"LomPort1state,omitempty"`

	// BIOS Token for setting LOM Port 2 OptionRom configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	LomPort2state *string `json:"LomPort2state,omitempty"`

	// BIOS Token for setting LOM Port 3 OptionRom configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	LomPort3state *string `json:"LomPort3state,omitempty"`

	// BIOS Token for setting All Onboard LOM Ports configuration.
	// Enum: [platform-default enabled disabled]
	LomPortsAllState *string `json:"LomPortsAllState,omitempty"`

	// BIOS Token for setting Low Voltage DDR Mode configuration.
	// Enum: [platform-default auto performance-mode power-saving-mode]
	LvDdrMode *string `json:"LvDdrMode,omitempty"`

	// BIOS Token for setting Make Device Non Bootable configuration.
	// Enum: [platform-default enabled disabled]
	MakeDeviceNonBootable *string `json:"MakeDeviceNonBootable,omitempty"`

	// BIOS Token for setting Memory Interleaving configuration.
	// Enum: [platform-default 1 Way Node Interleave 2 Way Node Interleave 4 Way Node Interleave 8 Way Node Interleave disabled enabled]
	MemoryInterLeave *string `json:"MemoryInterLeave,omitempty"`

	// BIOS Token for setting Memory mapped IO above 4GB configuration.
	// Enum: [platform-default enabled disabled]
	MemoryMappedIoAbove4gb *string `json:"MemoryMappedIoAbove4gb,omitempty"`

	// BIOS Token for setting Mirroring Mode configuration.
	// Enum: [platform-default inter-socket intra-socket]
	MirroringMode *string `json:"MirroringMode,omitempty"`

	// BIOS Token for setting MMCFG BASE configuration.
	// Enum: [platform-default 1 GB 2 GB 2.5 GB 3 GB Auto]
	MmcfgBase *string `json:"MmcfgBase,omitempty"`

	// BIOS Token for setting NUMA optimized configuration.
	// Enum: [platform-default enabled disabled]
	NumaOptimized *string `json:"NumaOptimized,omitempty"`

	// BIOS Token for setting Onboard 10Gbit LOM configuration.
	// Enum: [platform-default enabled disabled]
	Onboard10gbitLom *string `json:"Onboard10gbitLom,omitempty"`

	// BIOS Token for setting Onboard Gbit LOM configuration.
	// Enum: [platform-default enabled disabled]
	OnboardGbitLom *string `json:"OnboardGbitLom,omitempty"`

	// BIOS Token for setting Onboard SCU Storage Support configuration.
	// Enum: [platform-default enabled disabled]
	OnboardScuStorageSupport *string `json:"OnboardScuStorageSupport,omitempty"`

	// BIOS Token for setting Onboard SCU Storage SW Stack configuration.
	// Enum: [platform-default Intel RSTe LSI SW RAID]
	OnboardScuStorageSwStack *string `json:"OnboardScuStorageSwStack,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// BIOS Token for setting OS Boot Watchdog Timer configuration.
	// Enum: [platform-default enabled disabled]
	OsBootWatchdogTimer *string `json:"OsBootWatchdogTimer,omitempty"`

	// BIOS Token for setting OS Boot Watchdog Timer Policy configuration.
	// Enum: [platform-default do-nothing power-off reset]
	OsBootWatchdogTimerPolicy *string `json:"OsBootWatchdogTimerPolicy,omitempty"`

	// BIOS Token for setting OS Boot Watchdog Timer Timeout configuration.
	// Enum: [platform-default 10-minutes 15-minutes 20-minutes 5-minutes]
	OsBootWatchdogTimerTimeout *string `json:"OsBootWatchdogTimerTimeout,omitempty"`

	// BIOS Token for setting Out-of-Band Mgmt Port configuration.
	// Enum: [platform-default enabled disabled]
	OutOfBandMgmtPort *string `json:"OutOfBandMgmtPort,omitempty"`

	// BIOS Token for setting Package C State Limit configuration.
	// Enum: [platform-default Auto C0 C1 State C0/C1 C2 C6 Non Retention C6 Retention No Limit]
	PackageCstateLimit *string `json:"PackageCstateLimit,omitempty"`

	// BIOS Token for setting Patrol Scrub configuration.
	// Enum: [platform-default enabled disabled]
	PatrolScrub *string `json:"PatrolScrub,omitempty"`

	// BIOS Token for setting Patrol Scrub Interval configuration.
	// Enum: [platform-default enabled disabled]
	PatrolScrubDuration *string `json:"PatrolScrubDuration,omitempty"`

	// BIOS Token for setting NVMe SSD Hot-Plug Support configuration.
	// Enum: [platform-default enabled disabled]
	PcIeSsdHotPlugSupport *string `json:"PcIeSsdHotPlugSupport,omitempty"`

	// BIOS Token for setting xHCI Mode configuration.
	// Enum: [platform-default enabled disabled]
	PchUsb30mode *string `json:"PchUsb30mode,omitempty"`

	// BIOS Token for setting All PCIe Slots OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	PciOptionRoMs *string `json:"PciOptionRoMs,omitempty"`

	// BIOS Token for setting PCI ROM CLP configuration.
	// Enum: [platform-default enabled disabled]
	PciRomClp *string `json:"PciRomClp,omitempty"`

	// BIOS Token for setting Power ON Password configuration.
	// Enum: [platform-default enabled disabled]
	PopSupport *string `json:"PopSupport,omitempty"`

	// BIOS Token for setting POST Error Pause configuration.
	// Enum: [platform-default enabled disabled]
	PostErrorPause *string `json:"PostErrorPause,omitempty"`

	// BIOS Token for setting Processor C1E configuration.
	// Enum: [platform-default enabled disabled]
	ProcessorC1e *string `json:"ProcessorC1e,omitempty"`

	// BIOS Token for setting Processor C3 Report configuration.
	// Enum: [platform-default enabled disabled]
	ProcessorC3report *string `json:"ProcessorC3report,omitempty"`

	// BIOS Token for setting Processor C6 Report configuration.
	// Enum: [platform-default enabled disabled]
	ProcessorC6report *string `json:"ProcessorC6report,omitempty"`

	// BIOS Token for setting CPU C State configuration.
	// Enum: [platform-default enabled disabled]
	ProcessorCstate *string `json:"ProcessorCstate,omitempty"`

	// Relationship to the profile objects.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

	// BIOS Token for setting P-SATA mode configuration.
	// Enum: [platform-default AHCI Disabled LSI SW RAID]
	Psata *string `json:"Psata,omitempty"`

	// BIOS Token for setting P-STATE Coordination configuration.
	// Enum: [platform-default HW ALL SW ALL SW ANY]
	PstateCoordType *string `json:"PstateCoordType,omitempty"`

	// BIOS Token for setting Putty KeyPad configuration.
	// Enum: [platform-default ESCN LINUX SCO VT100 VT400 XTERMR6]
	PuttyKeyPad *string `json:"PuttyKeyPad,omitempty"`

	// BIOS Token for setting Power Performance Tuning configuration.
	// Enum: [platform-default bios os]
	PwrPerfTuning *string `json:"PwrPerfTuning,omitempty"`

	// BIOS Token for setting QPI Link Frequency Select configuration.
	// Enum: [platform-default 6.4-gt/s 7.2-gt/s 8.0-gt/s 9.6-gt/s auto]
	QpiLinkFrequency *string `json:"QpiLinkFrequency,omitempty"`

	// BIOS Token for setting QPI Snoop Mode configuration.
	// Enum: [platform-default auto cluster-on-die early-snoop home-directory-snoop home-directory-snoop-with-osb home-snoop]
	QpiSnoopMode *string `json:"QpiSnoopMode,omitempty"`

	// BIOS Token for setting Rank Interleaving configuration.
	// Enum: [platform-default 1-way 2-way 4-way 8-way auto]
	RankInterLeave *string `json:"RankInterLeave,omitempty"`

	// BIOS Token for setting Redirection After BIOS POST configuration.
	// Enum: [platform-default Always Enable Bootloader]
	RedirectionAfterPost *string `json:"RedirectionAfterPost,omitempty"`

	// BIOS Token for setting SATA mode configuration.
	// Enum: [platform-default AHCI Disabled LSI SW RAID]
	SataModeSelect *string `json:"SataModeSelect,omitempty"`

	// BIOS Token for setting SelectMemory RAS configuration configuration.
	// Enum: [platform-default adddc-sparing lockstep maximum-performance mirror-mode-1lm mirroring sparing]
	SelectMemoryRasConfiguration *string `json:"SelectMemoryRasConfiguration,omitempty"`

	// BIOS Token for setting Serial A Enable configuration.
	// Enum: [platform-default enabled disabled]
	SerialPortAenable *string `json:"SerialPortAenable,omitempty"`

	// BIOS Token for setting Single PCTL configuration.
	// Enum: [platform-default No Yes]
	SinglePctlEnable *string `json:"SinglePctlEnable,omitempty"`

	// BIOS Token for setting PCIe Slot:10 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot10linkSpeed *string `json:"Slot10linkSpeed,omitempty"`

	// BIOS Token for setting Slot 10 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot10state *string `json:"Slot10state,omitempty"`

	// BIOS Token for setting PCIe Slot:11 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot11linkSpeed *string `json:"Slot11linkSpeed,omitempty"`

	// BIOS Token for setting Slot 11 state configuration.
	// Enum: [platform-default enabled disabled]
	Slot11state *string `json:"Slot11state,omitempty"`

	// BIOS Token for setting PCIe Slot:12 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot12linkSpeed *string `json:"Slot12linkSpeed,omitempty"`

	// BIOS Token for setting Slot 12 state configuration.
	// Enum: [platform-default enabled disabled]
	Slot12state *string `json:"Slot12state,omitempty"`

	// BIOS Token for setting PCIe Slot 13 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	Slot13state *string `json:"Slot13state,omitempty"`

	// BIOS Token for setting PCIe Slot 14 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	Slot14state *string `json:"Slot14state,omitempty"`

	// BIOS Token for setting PCIe Slot:1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot1linkSpeed *string `json:"Slot1linkSpeed,omitempty"`

	// BIOS Token for setting Slot 1 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot1state *string `json:"Slot1state,omitempty"`

	// BIOS Token for setting PCIe Slot:2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot2linkSpeed *string `json:"Slot2linkSpeed,omitempty"`

	// BIOS Token for setting Slot 2 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot2state *string `json:"Slot2state,omitempty"`

	// BIOS Token for setting PCIe Slot:3 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot3linkSpeed *string `json:"Slot3linkSpeed,omitempty"`

	// BIOS Token for setting Slot 3 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot3state *string `json:"Slot3state,omitempty"`

	// BIOS Token for setting PCIe Slot:4 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot4linkSpeed *string `json:"Slot4linkSpeed,omitempty"`

	// BIOS Token for setting Slot 4 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot4state *string `json:"Slot4state,omitempty"`

	// BIOS Token for setting PCIe Slot:5 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot5linkSpeed *string `json:"Slot5linkSpeed,omitempty"`

	// BIOS Token for setting Slot 5 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot5state *string `json:"Slot5state,omitempty"`

	// BIOS Token for setting PCIe Slot:6 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot6linkSpeed *string `json:"Slot6linkSpeed,omitempty"`

	// BIOS Token for setting Slot 6 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot6state *string `json:"Slot6state,omitempty"`

	// BIOS Token for setting PCIe Slot:7 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot7linkSpeed *string `json:"Slot7linkSpeed,omitempty"`

	// BIOS Token for setting Slot 7 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot7state *string `json:"Slot7state,omitempty"`

	// BIOS Token for setting PCIe Slot:8 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot8linkSpeed *string `json:"Slot8linkSpeed,omitempty"`

	// BIOS Token for setting Slot 8 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot8state *string `json:"Slot8state,omitempty"`

	// BIOS Token for setting PCIe Slot:9 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	Slot9linkSpeed *string `json:"Slot9linkSpeed,omitempty"`

	// BIOS Token for setting Slot 9 state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	Slot9state *string `json:"Slot9state,omitempty"`

	// BIOS Token for setting PCIe Slot:FLOM Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotFlomLinkSpeed *string `json:"SlotFlomLinkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotFrontNvme1linkSpeed *string `json:"SlotFrontNvme1linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotFrontNvme2linkSpeed *string `json:"SlotFrontNvme2linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Front1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotFrontSlot5linkSpeed *string `json:"SlotFrontSlot5linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Front2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotFrontSlot6linkSpeed *string `json:"SlotFrontSlot6linkSpeed,omitempty"`

	// BIOS Token for setting GPU1 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu1state *string `json:"SlotGpu1state,omitempty"`

	// BIOS Token for setting GPU2 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu2state *string `json:"SlotGpu2state,omitempty"`

	// BIOS Token for setting GPU3 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu3state *string `json:"SlotGpu3state,omitempty"`

	// BIOS Token for setting GPU4 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu4state *string `json:"SlotGpu4state,omitempty"`

	// BIOS Token for setting GPU5 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu5state *string `json:"SlotGpu5state,omitempty"`

	// BIOS Token for setting GPU6 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu6state *string `json:"SlotGpu6state,omitempty"`

	// BIOS Token for setting GPU7 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu7state *string `json:"SlotGpu7state,omitempty"`

	// BIOS Token for setting GPU8 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotGpu8state *string `json:"SlotGpu8state,omitempty"`

	// BIOS Token for setting PCIe Slot:HBA Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotHbaLinkSpeed *string `json:"SlotHbaLinkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:HBA OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotHbaState *string `json:"SlotHbaState,omitempty"`

	// BIOS Token for setting PCIe LOM:1 Link configuration.
	// Enum: [platform-default enabled disabled]
	SlotLom1link *string `json:"SlotLom1link,omitempty"`

	// BIOS Token for setting PCIe LOM:2 Link configuration.
	// Enum: [platform-default enabled disabled]
	SlotLom2link *string `json:"SlotLom2link,omitempty"`

	// BIOS Token for setting Slot Mezz state configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotMezzState *string `json:"SlotMezzState,omitempty"`

	// BIOS Token for setting PCIe Slot:MLOM Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotMlomLinkSpeed *string `json:"SlotMlomLinkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot MLOM OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotMlomState *string `json:"SlotMlomState,omitempty"`

	// BIOS Token for setting MRAID Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotMraidLinkSpeed *string `json:"SlotMraidLinkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot MRAID OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotMraidState *string `json:"SlotMraidState,omitempty"`

	// BIOS Token for setting PCIe Slot N10 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN10state *string `json:"SlotN10state,omitempty"`

	// BIOS Token for setting PCIe Slot N11 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN11state *string `json:"SlotN11state,omitempty"`

	// BIOS Token for setting PCIe Slot N12 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN12state *string `json:"SlotN12state,omitempty"`

	// BIOS Token for setting PCIe Slot N13 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN13state *string `json:"SlotN13state,omitempty"`

	// BIOS Token for setting PCIe Slot N14 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN14state *string `json:"SlotN14state,omitempty"`

	// BIOS Token for setting PCIe Slot N15 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN15state *string `json:"SlotN15state,omitempty"`

	// BIOS Token for setting PCIe Slot N16 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN16state *string `json:"SlotN16state,omitempty"`

	// BIOS Token for setting PCIe Slot N17 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN17state *string `json:"SlotN17state,omitempty"`

	// BIOS Token for setting PCIe Slot N18 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN18state *string `json:"SlotN18state,omitempty"`

	// BIOS Token for setting PCIe Slot N19 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN19state *string `json:"SlotN19state,omitempty"`

	// BIOS Token for setting PCIe Slot N1 OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotN1state *string `json:"SlotN1state,omitempty"`

	// BIOS Token for setting PCIe Slot N20 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN20state *string `json:"SlotN20state,omitempty"`

	// BIOS Token for setting PCIe Slot N21 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN21state *string `json:"SlotN21state,omitempty"`

	// BIOS Token for setting PCIe Slot N22 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN22state *string `json:"SlotN22state,omitempty"`

	// BIOS Token for setting PCIe Slot N23 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN23state *string `json:"SlotN23state,omitempty"`

	// BIOS Token for setting PCIe Slot N24 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN24state *string `json:"SlotN24state,omitempty"`

	// BIOS Token for setting PCIe Slot N2 OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotN2state *string `json:"SlotN2state,omitempty"`

	// BIOS Token for setting PCIe Slot N3 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN3state *string `json:"SlotN3state,omitempty"`

	// BIOS Token for setting PCIe Slot N4 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN4state *string `json:"SlotN4state,omitempty"`

	// BIOS Token for setting PCIe Slot N5 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN5state *string `json:"SlotN5state,omitempty"`

	// BIOS Token for setting PCIe Slot N6 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN6state *string `json:"SlotN6state,omitempty"`

	// BIOS Token for setting PCIe Slot N7 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN7state *string `json:"SlotN7state,omitempty"`

	// BIOS Token for setting PCIe Slot N8 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN8state *string `json:"SlotN8state,omitempty"`

	// BIOS Token for setting PCIe Slot N9 OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotN9state *string `json:"SlotN9state,omitempty"`

	// BIOS Token for setting RAID Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRaidLinkSpeed *string `json:"SlotRaidLinkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot RAID OptionROM configuration.
	// Enum: [platform-default enabled disabled]
	SlotRaidState *string `json:"SlotRaidState,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRearNvme1linkSpeed *string `json:"SlotRearNvme1linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme1state *string `json:"SlotRearNvme1state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRearNvme2linkSpeed *string `json:"SlotRearNvme2linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme2state *string `json:"SlotRearNvme2state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme3state *string `json:"SlotRearNvme3state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme4state *string `json:"SlotRearNvme4state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme5state *string `json:"SlotRearNvme5state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme6state *string `json:"SlotRearNvme6state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme7state *string `json:"SlotRearNvme7state,omitempty"`

	// BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration.
	// Enum: [platform-default enabled disabled]
	SlotRearNvme8state *string `json:"SlotRearNvme8state,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser1linkSpeed *string `json:"SlotRiser1linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser1slot1linkSpeed *string `json:"SlotRiser1slot1linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser1slot2linkSpeed *string `json:"SlotRiser1slot2linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser1slot3linkSpeed *string `json:"SlotRiser1slot3linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser2linkSpeed *string `json:"SlotRiser2linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser2slot4linkSpeed *string `json:"SlotRiser2slot4linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser2slot5linkSpeed *string `json:"SlotRiser2slot5linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotRiser2slot6linkSpeed *string `json:"SlotRiser2slot6linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:SAS OptionROM configuration.
	// Enum: [platform-default disabled enabled Legacy Only UEFI Only]
	SlotSasState *string `json:"SlotSasState,omitempty"`

	// BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotSsdSlot1linkSpeed *string `json:"SlotSsdSlot1linkSpeed,omitempty"`

	// BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration.
	// Enum: [platform-default Auto Disabled GEN1 GEN2 GEN3]
	SlotSsdSlot2linkSpeed *string `json:"SlotSsdSlot2linkSpeed,omitempty"`

	// BIOS Token for setting SMEE configuration.
	// Enum: [platform-default enabled disabled]
	Smee *string `json:"Smee,omitempty"`

	// BIOS Token for setting SMT Mode configuration.
	// Enum: [platform-default Auto Off]
	SmtMode *string `json:"SmtMode,omitempty"`

	// BIOS Token for setting Sub Numa Clustering configuration.
	// Enum: [platform-default Auto disabled enabled]
	Snc *string `json:"Snc,omitempty"`

	// BIOS Token for setting Sparing Mode configuration.
	// Enum: [platform-default dimm-sparing rank-sparing]
	SparingMode *string `json:"SparingMode,omitempty"`

	// BIOS Token for setting SR-IOV Support configuration.
	// Enum: [platform-default enabled disabled]
	SrIov *string `json:"SrIov,omitempty"`

	// BIOS Token for setting DCU Streamer Prefetch configuration.
	// Enum: [platform-default enabled disabled]
	StreamerPrefetch *string `json:"StreamerPrefetch,omitempty"`

	// BIOS Token for setting SVM Mode configuration.
	// Enum: [platform-default enabled disabled]
	SvmMode *string `json:"SvmMode,omitempty"`

	// BIOS Token for setting Terminal Type configuration.
	// Enum: [platform-default pc-ansi vt-utf8 vt100 vt100-plus]
	TerminalType *string `json:"TerminalType,omitempty"`

	// BIOS Token for setting Trusted Platform Module State configuration.
	// Enum: [platform-default enabled disabled]
	TpmControl *string `json:"TpmControl,omitempty"`

	// BIOS Token for setting TPM Support configuration.
	// Enum: [platform-default enabled disabled]
	TpmSupport *string `json:"TpmSupport,omitempty"`

	// BIOS Token for setting Intel Trusted Execution Technology Support configuration.
	// Enum: [platform-default enabled disabled]
	TxtSupport *string `json:"TxtSupport,omitempty"`

	// BIOS Token for setting Boot Order Rules configuration.
	// Enum: [platform-default Loose Strict]
	UcsmBootOrderRule *string `json:"UcsmBootOrderRule,omitempty"`

	// BIOS Token for setting Port 60/64 Emulation configuration.
	// Enum: [platform-default enabled disabled]
	UsbEmul6064 *string `json:"UsbEmul6064,omitempty"`

	// BIOS Token for setting USB Port Front configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortFront *string `json:"UsbPortFront,omitempty"`

	// BIOS Token for setting USB Port Internal configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortInternal *string `json:"UsbPortInternal,omitempty"`

	// BIOS Token for setting USB Port KVM configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortKvm *string `json:"UsbPortKvm,omitempty"`

	// BIOS Token for setting USB Port Rear configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortRear *string `json:"UsbPortRear,omitempty"`

	// BIOS Token for setting USB Port SD Card configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortSdCard *string `json:"UsbPortSdCard,omitempty"`

	// BIOS Token for setting USB Port VMedia configuration.
	// Enum: [platform-default enabled disabled]
	UsbPortVmedia *string `json:"UsbPortVmedia,omitempty"`

	// BIOS Token for setting XHCI Legacy Support configuration.
	// Enum: [platform-default enabled disabled]
	UsbXhciSupport *string `json:"UsbXhciSupport,omitempty"`

	// BIOS Token for setting VGA Priority configuration.
	// Enum: [platform-default Offboard Onboard Onboard VGA Disabled]
	VgaPriority *string `json:"VgaPriority,omitempty"`

	// BIOS Token for setting VMD Enablement configuration.
	// Enum: [platform-default enabled disabled]
	VmdEnable *string `json:"VmdEnable,omitempty"`

	// BIOS Token for setting Workload Configuration configuration.
	// Enum: [platform-default Balanced I/O Sensitive NUMA UMA]
	WorkLoadConfig *string `json:"WorkLoadConfig,omitempty"`

	// BIOS Token for setting XPT Prefetch configuration.
	// Enum: [platform-default Auto disabled enabled]
	XptPrefetch *string `json:"XptPrefetch,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BiosPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		AcsControlGpu1state *string `json:"AcsControlGpu1state,omitempty"`

		AcsControlGpu2state *string `json:"AcsControlGpu2state,omitempty"`

		AcsControlGpu3state *string `json:"AcsControlGpu3state,omitempty"`

		AcsControlGpu4state *string `json:"AcsControlGpu4state,omitempty"`

		AcsControlGpu5state *string `json:"AcsControlGpu5state,omitempty"`

		AcsControlGpu6state *string `json:"AcsControlGpu6state,omitempty"`

		AcsControlGpu7state *string `json:"AcsControlGpu7state,omitempty"`

		AcsControlGpu8state *string `json:"AcsControlGpu8state,omitempty"`

		AcsControlSlot11state *string `json:"AcsControlSlot11state,omitempty"`

		AcsControlSlot12state *string `json:"AcsControlSlot12state,omitempty"`

		AcsControlSlot13state *string `json:"AcsControlSlot13state,omitempty"`

		AcsControlSlot14state *string `json:"AcsControlSlot14state,omitempty"`

		AdjacentCacheLinePrefetch *string `json:"AdjacentCacheLinePrefetch,omitempty"`

		AllUsbDevices *string `json:"AllUsbDevices,omitempty"`

		Altitude *string `json:"Altitude,omitempty"`

		AspmSupport *string `json:"AspmSupport,omitempty"`

		AssertNmiOnPerr *string `json:"AssertNmiOnPerr,omitempty"`

		AssertNmiOnSerr *string `json:"AssertNmiOnSerr,omitempty"`

		AutoCcState *string `json:"AutoCcState,omitempty"`

		AutonumousCstateEnable *string `json:"AutonumousCstateEnable,omitempty"`

		BaudRate *string `json:"BaudRate,omitempty"`

		BmeDmaMitigation *string `json:"BmeDmaMitigation,omitempty"`

		BootOptionNumRetry *string `json:"BootOptionNumRetry,omitempty"`

		BootOptionReCoolDown *string `json:"BootOptionReCoolDown,omitempty"`

		BootOptionRetry *string `json:"BootOptionRetry,omitempty"`

		BootPerformanceMode *string `json:"BootPerformanceMode,omitempty"`

		CbsCmnCPUCpb *string `json:"CbsCmnCpuCpb,omitempty"`

		CbsCmnCPUGenDowncoreCtrl *string `json:"CbsCmnCpuGenDowncoreCtrl,omitempty"`

		CbsCmnCPUGlobalCstateCtrl *string `json:"CbsCmnCpuGlobalCstateCtrl,omitempty"`

		CbsCmnCPUL1streamHwPrefetcher *string `json:"CbsCmnCpuL1streamHwPrefetcher,omitempty"`

		CbsCmnCPUL2streamHwPrefetcher *string `json:"CbsCmnCpuL2streamHwPrefetcher,omitempty"`

		CbsCmnDeterminismSlider *string `json:"CbsCmnDeterminismSlider,omitempty"`

		CbsCmnGnbNbIommu *string `json:"CbsCmnGnbNbIommu,omitempty"`

		CbsCmnMemCtrlBankGroupSwapDdr4 *string `json:"CbsCmnMemCtrlBankGroupSwapDdr4,omitempty"`

		CbsCmnMemMapBankInterleaveDdr4 *string `json:"CbsCmnMemMapBankInterleaveDdr4,omitempty"`

		CbsCmncTdpCtl *string `json:"CbsCmncTdpCtl,omitempty"`

		CbsDfCmnMemIntlv *string `json:"CbsDfCmnMemIntlv,omitempty"`

		CbsDfCmnMemIntlvSize *string `json:"CbsDfCmnMemIntlvSize,omitempty"`

		CdnEnable *string `json:"CdnEnable,omitempty"`

		CdnSupport *string `json:"CdnSupport,omitempty"`

		ChannelInterLeave *string `json:"ChannelInterLeave,omitempty"`

		CiscoAdaptiveMemTraining *string `json:"CiscoAdaptiveMemTraining,omitempty"`

		CiscoDebugLevel *string `json:"CiscoDebugLevel,omitempty"`

		CiscoOpromLaunchOptimization *string `json:"CiscoOpromLaunchOptimization,omitempty"`

		CkeLowPolicy *string `json:"CkeLowPolicy,omitempty"`

		ClosedLoopThermThrotl *string `json:"ClosedLoopThermThrotl,omitempty"`

		CmciEnable *string `json:"CmciEnable,omitempty"`

		ConfigTdp *string `json:"ConfigTdp,omitempty"`

		ConsoleRedirection *string `json:"ConsoleRedirection,omitempty"`

		CoreMultiProcessing *string `json:"CoreMultiProcessing,omitempty"`

		CPUEnergyPerformance *string `json:"CpuEnergyPerformance,omitempty"`

		CPUFrequencyFloor *string `json:"CpuFrequencyFloor,omitempty"`

		CPUPerformance *string `json:"CpuPerformance,omitempty"`

		CPUPowerManagement *string `json:"CpuPowerManagement,omitempty"`

		DcpmmFirmwareDowngrade *string `json:"DcpmmFirmwareDowngrade,omitempty"`

		DemandScrub *string `json:"DemandScrub,omitempty"`

		DirectCacheAccess *string `json:"DirectCacheAccess,omitempty"`

		DramClockThrottling *string `json:"DramClockThrottling,omitempty"`

		DramRefreshRate *string `json:"DramRefreshRate,omitempty"`

		EnergyEfficientTurbo *string `json:"EnergyEfficientTurbo,omitempty"`

		EngPerfTuning *string `json:"EngPerfTuning,omitempty"`

		EnhancedIntelSpeedStepTech *string `json:"EnhancedIntelSpeedStepTech,omitempty"`

		EppProfile *string `json:"EppProfile,omitempty"`

		ExecuteDisableBit *string `json:"ExecuteDisableBit,omitempty"`

		ExtendedApic *string `json:"ExtendedApic,omitempty"`

		FlowControl *string `json:"FlowControl,omitempty"`

		Frb2enable *string `json:"Frb2enable,omitempty"`

		HardwarePrefetch *string `json:"HardwarePrefetch,omitempty"`

		HwpmEnable *string `json:"HwpmEnable,omitempty"`

		ImcInterleave *string `json:"ImcInterleave,omitempty"`

		IntelHyperThreadingTech *string `json:"IntelHyperThreadingTech,omitempty"`

		IntelSpeedSelect *string `json:"IntelSpeedSelect,omitempty"`

		IntelTurboBoostTech *string `json:"IntelTurboBoostTech,omitempty"`

		IntelVirtualizationTechnology *string `json:"IntelVirtualizationTechnology,omitempty"`

		IntelVtForDirectedIo *string `json:"IntelVtForDirectedIo,omitempty"`

		IntelVtdCoherencySupport *string `json:"IntelVtdCoherencySupport,omitempty"`

		IntelVtdInterruptRemapping *string `json:"IntelVtdInterruptRemapping,omitempty"`

		IntelVtdPassThroughDmaSupport *string `json:"IntelVtdPassThroughDmaSupport,omitempty"`

		IntelVtdatsSupport *string `json:"IntelVtdatsSupport,omitempty"`

		IohErrorEnable *string `json:"IohErrorEnable,omitempty"`

		IohResource *string `json:"IohResource,omitempty"`

		IPPrefetch *string `json:"IpPrefetch,omitempty"`

		Ipv6pxe *string `json:"Ipv6pxe,omitempty"`

		KtiPrefetch *string `json:"KtiPrefetch,omitempty"`

		LegacyOsRedirection *string `json:"LegacyOsRedirection,omitempty"`

		LegacyUsbSupport *string `json:"LegacyUsbSupport,omitempty"`

		LlcPrefetch *string `json:"LlcPrefetch,omitempty"`

		LomPort0state *string `json:"LomPort0state,omitempty"`

		LomPort1state *string `json:"LomPort1state,omitempty"`

		LomPort2state *string `json:"LomPort2state,omitempty"`

		LomPort3state *string `json:"LomPort3state,omitempty"`

		LomPortsAllState *string `json:"LomPortsAllState,omitempty"`

		LvDdrMode *string `json:"LvDdrMode,omitempty"`

		MakeDeviceNonBootable *string `json:"MakeDeviceNonBootable,omitempty"`

		MemoryInterLeave *string `json:"MemoryInterLeave,omitempty"`

		MemoryMappedIoAbove4gb *string `json:"MemoryMappedIoAbove4gb,omitempty"`

		MirroringMode *string `json:"MirroringMode,omitempty"`

		MmcfgBase *string `json:"MmcfgBase,omitempty"`

		NumaOptimized *string `json:"NumaOptimized,omitempty"`

		Onboard10gbitLom *string `json:"Onboard10gbitLom,omitempty"`

		OnboardGbitLom *string `json:"OnboardGbitLom,omitempty"`

		OnboardScuStorageSupport *string `json:"OnboardScuStorageSupport,omitempty"`

		OnboardScuStorageSwStack *string `json:"OnboardScuStorageSwStack,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		OsBootWatchdogTimer *string `json:"OsBootWatchdogTimer,omitempty"`

		OsBootWatchdogTimerPolicy *string `json:"OsBootWatchdogTimerPolicy,omitempty"`

		OsBootWatchdogTimerTimeout *string `json:"OsBootWatchdogTimerTimeout,omitempty"`

		OutOfBandMgmtPort *string `json:"OutOfBandMgmtPort,omitempty"`

		PackageCstateLimit *string `json:"PackageCstateLimit,omitempty"`

		PatrolScrub *string `json:"PatrolScrub,omitempty"`

		PatrolScrubDuration *string `json:"PatrolScrubDuration,omitempty"`

		PcIeSsdHotPlugSupport *string `json:"PcIeSsdHotPlugSupport,omitempty"`

		PchUsb30mode *string `json:"PchUsb30mode,omitempty"`

		PciOptionRoMs *string `json:"PciOptionRoMs,omitempty"`

		PciRomClp *string `json:"PciRomClp,omitempty"`

		PopSupport *string `json:"PopSupport,omitempty"`

		PostErrorPause *string `json:"PostErrorPause,omitempty"`

		ProcessorC1e *string `json:"ProcessorC1e,omitempty"`

		ProcessorC3report *string `json:"ProcessorC3report,omitempty"`

		ProcessorC6report *string `json:"ProcessorC6report,omitempty"`

		ProcessorCstate *string `json:"ProcessorCstate,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		Psata *string `json:"Psata,omitempty"`

		PstateCoordType *string `json:"PstateCoordType,omitempty"`

		PuttyKeyPad *string `json:"PuttyKeyPad,omitempty"`

		PwrPerfTuning *string `json:"PwrPerfTuning,omitempty"`

		QpiLinkFrequency *string `json:"QpiLinkFrequency,omitempty"`

		QpiSnoopMode *string `json:"QpiSnoopMode,omitempty"`

		RankInterLeave *string `json:"RankInterLeave,omitempty"`

		RedirectionAfterPost *string `json:"RedirectionAfterPost,omitempty"`

		SataModeSelect *string `json:"SataModeSelect,omitempty"`

		SelectMemoryRasConfiguration *string `json:"SelectMemoryRasConfiguration,omitempty"`

		SerialPortAenable *string `json:"SerialPortAenable,omitempty"`

		SinglePctlEnable *string `json:"SinglePctlEnable,omitempty"`

		Slot10linkSpeed *string `json:"Slot10linkSpeed,omitempty"`

		Slot10state *string `json:"Slot10state,omitempty"`

		Slot11linkSpeed *string `json:"Slot11linkSpeed,omitempty"`

		Slot11state *string `json:"Slot11state,omitempty"`

		Slot12linkSpeed *string `json:"Slot12linkSpeed,omitempty"`

		Slot12state *string `json:"Slot12state,omitempty"`

		Slot13state *string `json:"Slot13state,omitempty"`

		Slot14state *string `json:"Slot14state,omitempty"`

		Slot1linkSpeed *string `json:"Slot1linkSpeed,omitempty"`

		Slot1state *string `json:"Slot1state,omitempty"`

		Slot2linkSpeed *string `json:"Slot2linkSpeed,omitempty"`

		Slot2state *string `json:"Slot2state,omitempty"`

		Slot3linkSpeed *string `json:"Slot3linkSpeed,omitempty"`

		Slot3state *string `json:"Slot3state,omitempty"`

		Slot4linkSpeed *string `json:"Slot4linkSpeed,omitempty"`

		Slot4state *string `json:"Slot4state,omitempty"`

		Slot5linkSpeed *string `json:"Slot5linkSpeed,omitempty"`

		Slot5state *string `json:"Slot5state,omitempty"`

		Slot6linkSpeed *string `json:"Slot6linkSpeed,omitempty"`

		Slot6state *string `json:"Slot6state,omitempty"`

		Slot7linkSpeed *string `json:"Slot7linkSpeed,omitempty"`

		Slot7state *string `json:"Slot7state,omitempty"`

		Slot8linkSpeed *string `json:"Slot8linkSpeed,omitempty"`

		Slot8state *string `json:"Slot8state,omitempty"`

		Slot9linkSpeed *string `json:"Slot9linkSpeed,omitempty"`

		Slot9state *string `json:"Slot9state,omitempty"`

		SlotFlomLinkSpeed *string `json:"SlotFlomLinkSpeed,omitempty"`

		SlotFrontNvme1linkSpeed *string `json:"SlotFrontNvme1linkSpeed,omitempty"`

		SlotFrontNvme2linkSpeed *string `json:"SlotFrontNvme2linkSpeed,omitempty"`

		SlotFrontSlot5linkSpeed *string `json:"SlotFrontSlot5linkSpeed,omitempty"`

		SlotFrontSlot6linkSpeed *string `json:"SlotFrontSlot6linkSpeed,omitempty"`

		SlotGpu1state *string `json:"SlotGpu1state,omitempty"`

		SlotGpu2state *string `json:"SlotGpu2state,omitempty"`

		SlotGpu3state *string `json:"SlotGpu3state,omitempty"`

		SlotGpu4state *string `json:"SlotGpu4state,omitempty"`

		SlotGpu5state *string `json:"SlotGpu5state,omitempty"`

		SlotGpu6state *string `json:"SlotGpu6state,omitempty"`

		SlotGpu7state *string `json:"SlotGpu7state,omitempty"`

		SlotGpu8state *string `json:"SlotGpu8state,omitempty"`

		SlotHbaLinkSpeed *string `json:"SlotHbaLinkSpeed,omitempty"`

		SlotHbaState *string `json:"SlotHbaState,omitempty"`

		SlotLom1link *string `json:"SlotLom1link,omitempty"`

		SlotLom2link *string `json:"SlotLom2link,omitempty"`

		SlotMezzState *string `json:"SlotMezzState,omitempty"`

		SlotMlomLinkSpeed *string `json:"SlotMlomLinkSpeed,omitempty"`

		SlotMlomState *string `json:"SlotMlomState,omitempty"`

		SlotMraidLinkSpeed *string `json:"SlotMraidLinkSpeed,omitempty"`

		SlotMraidState *string `json:"SlotMraidState,omitempty"`

		SlotN10state *string `json:"SlotN10state,omitempty"`

		SlotN11state *string `json:"SlotN11state,omitempty"`

		SlotN12state *string `json:"SlotN12state,omitempty"`

		SlotN13state *string `json:"SlotN13state,omitempty"`

		SlotN14state *string `json:"SlotN14state,omitempty"`

		SlotN15state *string `json:"SlotN15state,omitempty"`

		SlotN16state *string `json:"SlotN16state,omitempty"`

		SlotN17state *string `json:"SlotN17state,omitempty"`

		SlotN18state *string `json:"SlotN18state,omitempty"`

		SlotN19state *string `json:"SlotN19state,omitempty"`

		SlotN1state *string `json:"SlotN1state,omitempty"`

		SlotN20state *string `json:"SlotN20state,omitempty"`

		SlotN21state *string `json:"SlotN21state,omitempty"`

		SlotN22state *string `json:"SlotN22state,omitempty"`

		SlotN23state *string `json:"SlotN23state,omitempty"`

		SlotN24state *string `json:"SlotN24state,omitempty"`

		SlotN2state *string `json:"SlotN2state,omitempty"`

		SlotN3state *string `json:"SlotN3state,omitempty"`

		SlotN4state *string `json:"SlotN4state,omitempty"`

		SlotN5state *string `json:"SlotN5state,omitempty"`

		SlotN6state *string `json:"SlotN6state,omitempty"`

		SlotN7state *string `json:"SlotN7state,omitempty"`

		SlotN8state *string `json:"SlotN8state,omitempty"`

		SlotN9state *string `json:"SlotN9state,omitempty"`

		SlotRaidLinkSpeed *string `json:"SlotRaidLinkSpeed,omitempty"`

		SlotRaidState *string `json:"SlotRaidState,omitempty"`

		SlotRearNvme1linkSpeed *string `json:"SlotRearNvme1linkSpeed,omitempty"`

		SlotRearNvme1state *string `json:"SlotRearNvme1state,omitempty"`

		SlotRearNvme2linkSpeed *string `json:"SlotRearNvme2linkSpeed,omitempty"`

		SlotRearNvme2state *string `json:"SlotRearNvme2state,omitempty"`

		SlotRearNvme3state *string `json:"SlotRearNvme3state,omitempty"`

		SlotRearNvme4state *string `json:"SlotRearNvme4state,omitempty"`

		SlotRearNvme5state *string `json:"SlotRearNvme5state,omitempty"`

		SlotRearNvme6state *string `json:"SlotRearNvme6state,omitempty"`

		SlotRearNvme7state *string `json:"SlotRearNvme7state,omitempty"`

		SlotRearNvme8state *string `json:"SlotRearNvme8state,omitempty"`

		SlotRiser1linkSpeed *string `json:"SlotRiser1linkSpeed,omitempty"`

		SlotRiser1slot1linkSpeed *string `json:"SlotRiser1slot1linkSpeed,omitempty"`

		SlotRiser1slot2linkSpeed *string `json:"SlotRiser1slot2linkSpeed,omitempty"`

		SlotRiser1slot3linkSpeed *string `json:"SlotRiser1slot3linkSpeed,omitempty"`

		SlotRiser2linkSpeed *string `json:"SlotRiser2linkSpeed,omitempty"`

		SlotRiser2slot4linkSpeed *string `json:"SlotRiser2slot4linkSpeed,omitempty"`

		SlotRiser2slot5linkSpeed *string `json:"SlotRiser2slot5linkSpeed,omitempty"`

		SlotRiser2slot6linkSpeed *string `json:"SlotRiser2slot6linkSpeed,omitempty"`

		SlotSasState *string `json:"SlotSasState,omitempty"`

		SlotSsdSlot1linkSpeed *string `json:"SlotSsdSlot1linkSpeed,omitempty"`

		SlotSsdSlot2linkSpeed *string `json:"SlotSsdSlot2linkSpeed,omitempty"`

		Smee *string `json:"Smee,omitempty"`

		SmtMode *string `json:"SmtMode,omitempty"`

		Snc *string `json:"Snc,omitempty"`

		SparingMode *string `json:"SparingMode,omitempty"`

		SrIov *string `json:"SrIov,omitempty"`

		StreamerPrefetch *string `json:"StreamerPrefetch,omitempty"`

		SvmMode *string `json:"SvmMode,omitempty"`

		TerminalType *string `json:"TerminalType,omitempty"`

		TpmControl *string `json:"TpmControl,omitempty"`

		TpmSupport *string `json:"TpmSupport,omitempty"`

		TxtSupport *string `json:"TxtSupport,omitempty"`

		UcsmBootOrderRule *string `json:"UcsmBootOrderRule,omitempty"`

		UsbEmul6064 *string `json:"UsbEmul6064,omitempty"`

		UsbPortFront *string `json:"UsbPortFront,omitempty"`

		UsbPortInternal *string `json:"UsbPortInternal,omitempty"`

		UsbPortKvm *string `json:"UsbPortKvm,omitempty"`

		UsbPortRear *string `json:"UsbPortRear,omitempty"`

		UsbPortSdCard *string `json:"UsbPortSdCard,omitempty"`

		UsbPortVmedia *string `json:"UsbPortVmedia,omitempty"`

		UsbXhciSupport *string `json:"UsbXhciSupport,omitempty"`

		VgaPriority *string `json:"VgaPriority,omitempty"`

		VmdEnable *string `json:"VmdEnable,omitempty"`

		WorkLoadConfig *string `json:"WorkLoadConfig,omitempty"`

		XptPrefetch *string `json:"XptPrefetch,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AcsControlGpu1state = dataAO1.AcsControlGpu1state

	m.AcsControlGpu2state = dataAO1.AcsControlGpu2state

	m.AcsControlGpu3state = dataAO1.AcsControlGpu3state

	m.AcsControlGpu4state = dataAO1.AcsControlGpu4state

	m.AcsControlGpu5state = dataAO1.AcsControlGpu5state

	m.AcsControlGpu6state = dataAO1.AcsControlGpu6state

	m.AcsControlGpu7state = dataAO1.AcsControlGpu7state

	m.AcsControlGpu8state = dataAO1.AcsControlGpu8state

	m.AcsControlSlot11state = dataAO1.AcsControlSlot11state

	m.AcsControlSlot12state = dataAO1.AcsControlSlot12state

	m.AcsControlSlot13state = dataAO1.AcsControlSlot13state

	m.AcsControlSlot14state = dataAO1.AcsControlSlot14state

	m.AdjacentCacheLinePrefetch = dataAO1.AdjacentCacheLinePrefetch

	m.AllUsbDevices = dataAO1.AllUsbDevices

	m.Altitude = dataAO1.Altitude

	m.AspmSupport = dataAO1.AspmSupport

	m.AssertNmiOnPerr = dataAO1.AssertNmiOnPerr

	m.AssertNmiOnSerr = dataAO1.AssertNmiOnSerr

	m.AutoCcState = dataAO1.AutoCcState

	m.AutonumousCstateEnable = dataAO1.AutonumousCstateEnable

	m.BaudRate = dataAO1.BaudRate

	m.BmeDmaMitigation = dataAO1.BmeDmaMitigation

	m.BootOptionNumRetry = dataAO1.BootOptionNumRetry

	m.BootOptionReCoolDown = dataAO1.BootOptionReCoolDown

	m.BootOptionRetry = dataAO1.BootOptionRetry

	m.BootPerformanceMode = dataAO1.BootPerformanceMode

	m.CbsCmnCPUCpb = dataAO1.CbsCmnCPUCpb

	m.CbsCmnCPUGenDowncoreCtrl = dataAO1.CbsCmnCPUGenDowncoreCtrl

	m.CbsCmnCPUGlobalCstateCtrl = dataAO1.CbsCmnCPUGlobalCstateCtrl

	m.CbsCmnCPUL1streamHwPrefetcher = dataAO1.CbsCmnCPUL1streamHwPrefetcher

	m.CbsCmnCPUL2streamHwPrefetcher = dataAO1.CbsCmnCPUL2streamHwPrefetcher

	m.CbsCmnDeterminismSlider = dataAO1.CbsCmnDeterminismSlider

	m.CbsCmnGnbNbIommu = dataAO1.CbsCmnGnbNbIommu

	m.CbsCmnMemCtrlBankGroupSwapDdr4 = dataAO1.CbsCmnMemCtrlBankGroupSwapDdr4

	m.CbsCmnMemMapBankInterleaveDdr4 = dataAO1.CbsCmnMemMapBankInterleaveDdr4

	m.CbsCmncTdpCtl = dataAO1.CbsCmncTdpCtl

	m.CbsDfCmnMemIntlv = dataAO1.CbsDfCmnMemIntlv

	m.CbsDfCmnMemIntlvSize = dataAO1.CbsDfCmnMemIntlvSize

	m.CdnEnable = dataAO1.CdnEnable

	m.CdnSupport = dataAO1.CdnSupport

	m.ChannelInterLeave = dataAO1.ChannelInterLeave

	m.CiscoAdaptiveMemTraining = dataAO1.CiscoAdaptiveMemTraining

	m.CiscoDebugLevel = dataAO1.CiscoDebugLevel

	m.CiscoOpromLaunchOptimization = dataAO1.CiscoOpromLaunchOptimization

	m.CkeLowPolicy = dataAO1.CkeLowPolicy

	m.ClosedLoopThermThrotl = dataAO1.ClosedLoopThermThrotl

	m.CmciEnable = dataAO1.CmciEnable

	m.ConfigTdp = dataAO1.ConfigTdp

	m.ConsoleRedirection = dataAO1.ConsoleRedirection

	m.CoreMultiProcessing = dataAO1.CoreMultiProcessing

	m.CPUEnergyPerformance = dataAO1.CPUEnergyPerformance

	m.CPUFrequencyFloor = dataAO1.CPUFrequencyFloor

	m.CPUPerformance = dataAO1.CPUPerformance

	m.CPUPowerManagement = dataAO1.CPUPowerManagement

	m.DcpmmFirmwareDowngrade = dataAO1.DcpmmFirmwareDowngrade

	m.DemandScrub = dataAO1.DemandScrub

	m.DirectCacheAccess = dataAO1.DirectCacheAccess

	m.DramClockThrottling = dataAO1.DramClockThrottling

	m.DramRefreshRate = dataAO1.DramRefreshRate

	m.EnergyEfficientTurbo = dataAO1.EnergyEfficientTurbo

	m.EngPerfTuning = dataAO1.EngPerfTuning

	m.EnhancedIntelSpeedStepTech = dataAO1.EnhancedIntelSpeedStepTech

	m.EppProfile = dataAO1.EppProfile

	m.ExecuteDisableBit = dataAO1.ExecuteDisableBit

	m.ExtendedApic = dataAO1.ExtendedApic

	m.FlowControl = dataAO1.FlowControl

	m.Frb2enable = dataAO1.Frb2enable

	m.HardwarePrefetch = dataAO1.HardwarePrefetch

	m.HwpmEnable = dataAO1.HwpmEnable

	m.ImcInterleave = dataAO1.ImcInterleave

	m.IntelHyperThreadingTech = dataAO1.IntelHyperThreadingTech

	m.IntelSpeedSelect = dataAO1.IntelSpeedSelect

	m.IntelTurboBoostTech = dataAO1.IntelTurboBoostTech

	m.IntelVirtualizationTechnology = dataAO1.IntelVirtualizationTechnology

	m.IntelVtForDirectedIo = dataAO1.IntelVtForDirectedIo

	m.IntelVtdCoherencySupport = dataAO1.IntelVtdCoherencySupport

	m.IntelVtdInterruptRemapping = dataAO1.IntelVtdInterruptRemapping

	m.IntelVtdPassThroughDmaSupport = dataAO1.IntelVtdPassThroughDmaSupport

	m.IntelVtdatsSupport = dataAO1.IntelVtdatsSupport

	m.IohErrorEnable = dataAO1.IohErrorEnable

	m.IohResource = dataAO1.IohResource

	m.IPPrefetch = dataAO1.IPPrefetch

	m.Ipv6pxe = dataAO1.Ipv6pxe

	m.KtiPrefetch = dataAO1.KtiPrefetch

	m.LegacyOsRedirection = dataAO1.LegacyOsRedirection

	m.LegacyUsbSupport = dataAO1.LegacyUsbSupport

	m.LlcPrefetch = dataAO1.LlcPrefetch

	m.LomPort0state = dataAO1.LomPort0state

	m.LomPort1state = dataAO1.LomPort1state

	m.LomPort2state = dataAO1.LomPort2state

	m.LomPort3state = dataAO1.LomPort3state

	m.LomPortsAllState = dataAO1.LomPortsAllState

	m.LvDdrMode = dataAO1.LvDdrMode

	m.MakeDeviceNonBootable = dataAO1.MakeDeviceNonBootable

	m.MemoryInterLeave = dataAO1.MemoryInterLeave

	m.MemoryMappedIoAbove4gb = dataAO1.MemoryMappedIoAbove4gb

	m.MirroringMode = dataAO1.MirroringMode

	m.MmcfgBase = dataAO1.MmcfgBase

	m.NumaOptimized = dataAO1.NumaOptimized

	m.Onboard10gbitLom = dataAO1.Onboard10gbitLom

	m.OnboardGbitLom = dataAO1.OnboardGbitLom

	m.OnboardScuStorageSupport = dataAO1.OnboardScuStorageSupport

	m.OnboardScuStorageSwStack = dataAO1.OnboardScuStorageSwStack

	m.Organization = dataAO1.Organization

	m.OsBootWatchdogTimer = dataAO1.OsBootWatchdogTimer

	m.OsBootWatchdogTimerPolicy = dataAO1.OsBootWatchdogTimerPolicy

	m.OsBootWatchdogTimerTimeout = dataAO1.OsBootWatchdogTimerTimeout

	m.OutOfBandMgmtPort = dataAO1.OutOfBandMgmtPort

	m.PackageCstateLimit = dataAO1.PackageCstateLimit

	m.PatrolScrub = dataAO1.PatrolScrub

	m.PatrolScrubDuration = dataAO1.PatrolScrubDuration

	m.PcIeSsdHotPlugSupport = dataAO1.PcIeSsdHotPlugSupport

	m.PchUsb30mode = dataAO1.PchUsb30mode

	m.PciOptionRoMs = dataAO1.PciOptionRoMs

	m.PciRomClp = dataAO1.PciRomClp

	m.PopSupport = dataAO1.PopSupport

	m.PostErrorPause = dataAO1.PostErrorPause

	m.ProcessorC1e = dataAO1.ProcessorC1e

	m.ProcessorC3report = dataAO1.ProcessorC3report

	m.ProcessorC6report = dataAO1.ProcessorC6report

	m.ProcessorCstate = dataAO1.ProcessorCstate

	m.Profiles = dataAO1.Profiles

	m.Psata = dataAO1.Psata

	m.PstateCoordType = dataAO1.PstateCoordType

	m.PuttyKeyPad = dataAO1.PuttyKeyPad

	m.PwrPerfTuning = dataAO1.PwrPerfTuning

	m.QpiLinkFrequency = dataAO1.QpiLinkFrequency

	m.QpiSnoopMode = dataAO1.QpiSnoopMode

	m.RankInterLeave = dataAO1.RankInterLeave

	m.RedirectionAfterPost = dataAO1.RedirectionAfterPost

	m.SataModeSelect = dataAO1.SataModeSelect

	m.SelectMemoryRasConfiguration = dataAO1.SelectMemoryRasConfiguration

	m.SerialPortAenable = dataAO1.SerialPortAenable

	m.SinglePctlEnable = dataAO1.SinglePctlEnable

	m.Slot10linkSpeed = dataAO1.Slot10linkSpeed

	m.Slot10state = dataAO1.Slot10state

	m.Slot11linkSpeed = dataAO1.Slot11linkSpeed

	m.Slot11state = dataAO1.Slot11state

	m.Slot12linkSpeed = dataAO1.Slot12linkSpeed

	m.Slot12state = dataAO1.Slot12state

	m.Slot13state = dataAO1.Slot13state

	m.Slot14state = dataAO1.Slot14state

	m.Slot1linkSpeed = dataAO1.Slot1linkSpeed

	m.Slot1state = dataAO1.Slot1state

	m.Slot2linkSpeed = dataAO1.Slot2linkSpeed

	m.Slot2state = dataAO1.Slot2state

	m.Slot3linkSpeed = dataAO1.Slot3linkSpeed

	m.Slot3state = dataAO1.Slot3state

	m.Slot4linkSpeed = dataAO1.Slot4linkSpeed

	m.Slot4state = dataAO1.Slot4state

	m.Slot5linkSpeed = dataAO1.Slot5linkSpeed

	m.Slot5state = dataAO1.Slot5state

	m.Slot6linkSpeed = dataAO1.Slot6linkSpeed

	m.Slot6state = dataAO1.Slot6state

	m.Slot7linkSpeed = dataAO1.Slot7linkSpeed

	m.Slot7state = dataAO1.Slot7state

	m.Slot8linkSpeed = dataAO1.Slot8linkSpeed

	m.Slot8state = dataAO1.Slot8state

	m.Slot9linkSpeed = dataAO1.Slot9linkSpeed

	m.Slot9state = dataAO1.Slot9state

	m.SlotFlomLinkSpeed = dataAO1.SlotFlomLinkSpeed

	m.SlotFrontNvme1linkSpeed = dataAO1.SlotFrontNvme1linkSpeed

	m.SlotFrontNvme2linkSpeed = dataAO1.SlotFrontNvme2linkSpeed

	m.SlotFrontSlot5linkSpeed = dataAO1.SlotFrontSlot5linkSpeed

	m.SlotFrontSlot6linkSpeed = dataAO1.SlotFrontSlot6linkSpeed

	m.SlotGpu1state = dataAO1.SlotGpu1state

	m.SlotGpu2state = dataAO1.SlotGpu2state

	m.SlotGpu3state = dataAO1.SlotGpu3state

	m.SlotGpu4state = dataAO1.SlotGpu4state

	m.SlotGpu5state = dataAO1.SlotGpu5state

	m.SlotGpu6state = dataAO1.SlotGpu6state

	m.SlotGpu7state = dataAO1.SlotGpu7state

	m.SlotGpu8state = dataAO1.SlotGpu8state

	m.SlotHbaLinkSpeed = dataAO1.SlotHbaLinkSpeed

	m.SlotHbaState = dataAO1.SlotHbaState

	m.SlotLom1link = dataAO1.SlotLom1link

	m.SlotLom2link = dataAO1.SlotLom2link

	m.SlotMezzState = dataAO1.SlotMezzState

	m.SlotMlomLinkSpeed = dataAO1.SlotMlomLinkSpeed

	m.SlotMlomState = dataAO1.SlotMlomState

	m.SlotMraidLinkSpeed = dataAO1.SlotMraidLinkSpeed

	m.SlotMraidState = dataAO1.SlotMraidState

	m.SlotN10state = dataAO1.SlotN10state

	m.SlotN11state = dataAO1.SlotN11state

	m.SlotN12state = dataAO1.SlotN12state

	m.SlotN13state = dataAO1.SlotN13state

	m.SlotN14state = dataAO1.SlotN14state

	m.SlotN15state = dataAO1.SlotN15state

	m.SlotN16state = dataAO1.SlotN16state

	m.SlotN17state = dataAO1.SlotN17state

	m.SlotN18state = dataAO1.SlotN18state

	m.SlotN19state = dataAO1.SlotN19state

	m.SlotN1state = dataAO1.SlotN1state

	m.SlotN20state = dataAO1.SlotN20state

	m.SlotN21state = dataAO1.SlotN21state

	m.SlotN22state = dataAO1.SlotN22state

	m.SlotN23state = dataAO1.SlotN23state

	m.SlotN24state = dataAO1.SlotN24state

	m.SlotN2state = dataAO1.SlotN2state

	m.SlotN3state = dataAO1.SlotN3state

	m.SlotN4state = dataAO1.SlotN4state

	m.SlotN5state = dataAO1.SlotN5state

	m.SlotN6state = dataAO1.SlotN6state

	m.SlotN7state = dataAO1.SlotN7state

	m.SlotN8state = dataAO1.SlotN8state

	m.SlotN9state = dataAO1.SlotN9state

	m.SlotRaidLinkSpeed = dataAO1.SlotRaidLinkSpeed

	m.SlotRaidState = dataAO1.SlotRaidState

	m.SlotRearNvme1linkSpeed = dataAO1.SlotRearNvme1linkSpeed

	m.SlotRearNvme1state = dataAO1.SlotRearNvme1state

	m.SlotRearNvme2linkSpeed = dataAO1.SlotRearNvme2linkSpeed

	m.SlotRearNvme2state = dataAO1.SlotRearNvme2state

	m.SlotRearNvme3state = dataAO1.SlotRearNvme3state

	m.SlotRearNvme4state = dataAO1.SlotRearNvme4state

	m.SlotRearNvme5state = dataAO1.SlotRearNvme5state

	m.SlotRearNvme6state = dataAO1.SlotRearNvme6state

	m.SlotRearNvme7state = dataAO1.SlotRearNvme7state

	m.SlotRearNvme8state = dataAO1.SlotRearNvme8state

	m.SlotRiser1linkSpeed = dataAO1.SlotRiser1linkSpeed

	m.SlotRiser1slot1linkSpeed = dataAO1.SlotRiser1slot1linkSpeed

	m.SlotRiser1slot2linkSpeed = dataAO1.SlotRiser1slot2linkSpeed

	m.SlotRiser1slot3linkSpeed = dataAO1.SlotRiser1slot3linkSpeed

	m.SlotRiser2linkSpeed = dataAO1.SlotRiser2linkSpeed

	m.SlotRiser2slot4linkSpeed = dataAO1.SlotRiser2slot4linkSpeed

	m.SlotRiser2slot5linkSpeed = dataAO1.SlotRiser2slot5linkSpeed

	m.SlotRiser2slot6linkSpeed = dataAO1.SlotRiser2slot6linkSpeed

	m.SlotSasState = dataAO1.SlotSasState

	m.SlotSsdSlot1linkSpeed = dataAO1.SlotSsdSlot1linkSpeed

	m.SlotSsdSlot2linkSpeed = dataAO1.SlotSsdSlot2linkSpeed

	m.Smee = dataAO1.Smee

	m.SmtMode = dataAO1.SmtMode

	m.Snc = dataAO1.Snc

	m.SparingMode = dataAO1.SparingMode

	m.SrIov = dataAO1.SrIov

	m.StreamerPrefetch = dataAO1.StreamerPrefetch

	m.SvmMode = dataAO1.SvmMode

	m.TerminalType = dataAO1.TerminalType

	m.TpmControl = dataAO1.TpmControl

	m.TpmSupport = dataAO1.TpmSupport

	m.TxtSupport = dataAO1.TxtSupport

	m.UcsmBootOrderRule = dataAO1.UcsmBootOrderRule

	m.UsbEmul6064 = dataAO1.UsbEmul6064

	m.UsbPortFront = dataAO1.UsbPortFront

	m.UsbPortInternal = dataAO1.UsbPortInternal

	m.UsbPortKvm = dataAO1.UsbPortKvm

	m.UsbPortRear = dataAO1.UsbPortRear

	m.UsbPortSdCard = dataAO1.UsbPortSdCard

	m.UsbPortVmedia = dataAO1.UsbPortVmedia

	m.UsbXhciSupport = dataAO1.UsbXhciSupport

	m.VgaPriority = dataAO1.VgaPriority

	m.VmdEnable = dataAO1.VmdEnable

	m.WorkLoadConfig = dataAO1.WorkLoadConfig

	m.XptPrefetch = dataAO1.XptPrefetch

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BiosPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AcsControlGpu1state *string `json:"AcsControlGpu1state,omitempty"`

		AcsControlGpu2state *string `json:"AcsControlGpu2state,omitempty"`

		AcsControlGpu3state *string `json:"AcsControlGpu3state,omitempty"`

		AcsControlGpu4state *string `json:"AcsControlGpu4state,omitempty"`

		AcsControlGpu5state *string `json:"AcsControlGpu5state,omitempty"`

		AcsControlGpu6state *string `json:"AcsControlGpu6state,omitempty"`

		AcsControlGpu7state *string `json:"AcsControlGpu7state,omitempty"`

		AcsControlGpu8state *string `json:"AcsControlGpu8state,omitempty"`

		AcsControlSlot11state *string `json:"AcsControlSlot11state,omitempty"`

		AcsControlSlot12state *string `json:"AcsControlSlot12state,omitempty"`

		AcsControlSlot13state *string `json:"AcsControlSlot13state,omitempty"`

		AcsControlSlot14state *string `json:"AcsControlSlot14state,omitempty"`

		AdjacentCacheLinePrefetch *string `json:"AdjacentCacheLinePrefetch,omitempty"`

		AllUsbDevices *string `json:"AllUsbDevices,omitempty"`

		Altitude *string `json:"Altitude,omitempty"`

		AspmSupport *string `json:"AspmSupport,omitempty"`

		AssertNmiOnPerr *string `json:"AssertNmiOnPerr,omitempty"`

		AssertNmiOnSerr *string `json:"AssertNmiOnSerr,omitempty"`

		AutoCcState *string `json:"AutoCcState,omitempty"`

		AutonumousCstateEnable *string `json:"AutonumousCstateEnable,omitempty"`

		BaudRate *string `json:"BaudRate,omitempty"`

		BmeDmaMitigation *string `json:"BmeDmaMitigation,omitempty"`

		BootOptionNumRetry *string `json:"BootOptionNumRetry,omitempty"`

		BootOptionReCoolDown *string `json:"BootOptionReCoolDown,omitempty"`

		BootOptionRetry *string `json:"BootOptionRetry,omitempty"`

		BootPerformanceMode *string `json:"BootPerformanceMode,omitempty"`

		CbsCmnCPUCpb *string `json:"CbsCmnCpuCpb,omitempty"`

		CbsCmnCPUGenDowncoreCtrl *string `json:"CbsCmnCpuGenDowncoreCtrl,omitempty"`

		CbsCmnCPUGlobalCstateCtrl *string `json:"CbsCmnCpuGlobalCstateCtrl,omitempty"`

		CbsCmnCPUL1streamHwPrefetcher *string `json:"CbsCmnCpuL1streamHwPrefetcher,omitempty"`

		CbsCmnCPUL2streamHwPrefetcher *string `json:"CbsCmnCpuL2streamHwPrefetcher,omitempty"`

		CbsCmnDeterminismSlider *string `json:"CbsCmnDeterminismSlider,omitempty"`

		CbsCmnGnbNbIommu *string `json:"CbsCmnGnbNbIommu,omitempty"`

		CbsCmnMemCtrlBankGroupSwapDdr4 *string `json:"CbsCmnMemCtrlBankGroupSwapDdr4,omitempty"`

		CbsCmnMemMapBankInterleaveDdr4 *string `json:"CbsCmnMemMapBankInterleaveDdr4,omitempty"`

		CbsCmncTdpCtl *string `json:"CbsCmncTdpCtl,omitempty"`

		CbsDfCmnMemIntlv *string `json:"CbsDfCmnMemIntlv,omitempty"`

		CbsDfCmnMemIntlvSize *string `json:"CbsDfCmnMemIntlvSize,omitempty"`

		CdnEnable *string `json:"CdnEnable,omitempty"`

		CdnSupport *string `json:"CdnSupport,omitempty"`

		ChannelInterLeave *string `json:"ChannelInterLeave,omitempty"`

		CiscoAdaptiveMemTraining *string `json:"CiscoAdaptiveMemTraining,omitempty"`

		CiscoDebugLevel *string `json:"CiscoDebugLevel,omitempty"`

		CiscoOpromLaunchOptimization *string `json:"CiscoOpromLaunchOptimization,omitempty"`

		CkeLowPolicy *string `json:"CkeLowPolicy,omitempty"`

		ClosedLoopThermThrotl *string `json:"ClosedLoopThermThrotl,omitempty"`

		CmciEnable *string `json:"CmciEnable,omitempty"`

		ConfigTdp *string `json:"ConfigTdp,omitempty"`

		ConsoleRedirection *string `json:"ConsoleRedirection,omitempty"`

		CoreMultiProcessing *string `json:"CoreMultiProcessing,omitempty"`

		CPUEnergyPerformance *string `json:"CpuEnergyPerformance,omitempty"`

		CPUFrequencyFloor *string `json:"CpuFrequencyFloor,omitempty"`

		CPUPerformance *string `json:"CpuPerformance,omitempty"`

		CPUPowerManagement *string `json:"CpuPowerManagement,omitempty"`

		DcpmmFirmwareDowngrade *string `json:"DcpmmFirmwareDowngrade,omitempty"`

		DemandScrub *string `json:"DemandScrub,omitempty"`

		DirectCacheAccess *string `json:"DirectCacheAccess,omitempty"`

		DramClockThrottling *string `json:"DramClockThrottling,omitempty"`

		DramRefreshRate *string `json:"DramRefreshRate,omitempty"`

		EnergyEfficientTurbo *string `json:"EnergyEfficientTurbo,omitempty"`

		EngPerfTuning *string `json:"EngPerfTuning,omitempty"`

		EnhancedIntelSpeedStepTech *string `json:"EnhancedIntelSpeedStepTech,omitempty"`

		EppProfile *string `json:"EppProfile,omitempty"`

		ExecuteDisableBit *string `json:"ExecuteDisableBit,omitempty"`

		ExtendedApic *string `json:"ExtendedApic,omitempty"`

		FlowControl *string `json:"FlowControl,omitempty"`

		Frb2enable *string `json:"Frb2enable,omitempty"`

		HardwarePrefetch *string `json:"HardwarePrefetch,omitempty"`

		HwpmEnable *string `json:"HwpmEnable,omitempty"`

		ImcInterleave *string `json:"ImcInterleave,omitempty"`

		IntelHyperThreadingTech *string `json:"IntelHyperThreadingTech,omitempty"`

		IntelSpeedSelect *string `json:"IntelSpeedSelect,omitempty"`

		IntelTurboBoostTech *string `json:"IntelTurboBoostTech,omitempty"`

		IntelVirtualizationTechnology *string `json:"IntelVirtualizationTechnology,omitempty"`

		IntelVtForDirectedIo *string `json:"IntelVtForDirectedIo,omitempty"`

		IntelVtdCoherencySupport *string `json:"IntelVtdCoherencySupport,omitempty"`

		IntelVtdInterruptRemapping *string `json:"IntelVtdInterruptRemapping,omitempty"`

		IntelVtdPassThroughDmaSupport *string `json:"IntelVtdPassThroughDmaSupport,omitempty"`

		IntelVtdatsSupport *string `json:"IntelVtdatsSupport,omitempty"`

		IohErrorEnable *string `json:"IohErrorEnable,omitempty"`

		IohResource *string `json:"IohResource,omitempty"`

		IPPrefetch *string `json:"IpPrefetch,omitempty"`

		Ipv6pxe *string `json:"Ipv6pxe,omitempty"`

		KtiPrefetch *string `json:"KtiPrefetch,omitempty"`

		LegacyOsRedirection *string `json:"LegacyOsRedirection,omitempty"`

		LegacyUsbSupport *string `json:"LegacyUsbSupport,omitempty"`

		LlcPrefetch *string `json:"LlcPrefetch,omitempty"`

		LomPort0state *string `json:"LomPort0state,omitempty"`

		LomPort1state *string `json:"LomPort1state,omitempty"`

		LomPort2state *string `json:"LomPort2state,omitempty"`

		LomPort3state *string `json:"LomPort3state,omitempty"`

		LomPortsAllState *string `json:"LomPortsAllState,omitempty"`

		LvDdrMode *string `json:"LvDdrMode,omitempty"`

		MakeDeviceNonBootable *string `json:"MakeDeviceNonBootable,omitempty"`

		MemoryInterLeave *string `json:"MemoryInterLeave,omitempty"`

		MemoryMappedIoAbove4gb *string `json:"MemoryMappedIoAbove4gb,omitempty"`

		MirroringMode *string `json:"MirroringMode,omitempty"`

		MmcfgBase *string `json:"MmcfgBase,omitempty"`

		NumaOptimized *string `json:"NumaOptimized,omitempty"`

		Onboard10gbitLom *string `json:"Onboard10gbitLom,omitempty"`

		OnboardGbitLom *string `json:"OnboardGbitLom,omitempty"`

		OnboardScuStorageSupport *string `json:"OnboardScuStorageSupport,omitempty"`

		OnboardScuStorageSwStack *string `json:"OnboardScuStorageSwStack,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		OsBootWatchdogTimer *string `json:"OsBootWatchdogTimer,omitempty"`

		OsBootWatchdogTimerPolicy *string `json:"OsBootWatchdogTimerPolicy,omitempty"`

		OsBootWatchdogTimerTimeout *string `json:"OsBootWatchdogTimerTimeout,omitempty"`

		OutOfBandMgmtPort *string `json:"OutOfBandMgmtPort,omitempty"`

		PackageCstateLimit *string `json:"PackageCstateLimit,omitempty"`

		PatrolScrub *string `json:"PatrolScrub,omitempty"`

		PatrolScrubDuration *string `json:"PatrolScrubDuration,omitempty"`

		PcIeSsdHotPlugSupport *string `json:"PcIeSsdHotPlugSupport,omitempty"`

		PchUsb30mode *string `json:"PchUsb30mode,omitempty"`

		PciOptionRoMs *string `json:"PciOptionRoMs,omitempty"`

		PciRomClp *string `json:"PciRomClp,omitempty"`

		PopSupport *string `json:"PopSupport,omitempty"`

		PostErrorPause *string `json:"PostErrorPause,omitempty"`

		ProcessorC1e *string `json:"ProcessorC1e,omitempty"`

		ProcessorC3report *string `json:"ProcessorC3report,omitempty"`

		ProcessorC6report *string `json:"ProcessorC6report,omitempty"`

		ProcessorCstate *string `json:"ProcessorCstate,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		Psata *string `json:"Psata,omitempty"`

		PstateCoordType *string `json:"PstateCoordType,omitempty"`

		PuttyKeyPad *string `json:"PuttyKeyPad,omitempty"`

		PwrPerfTuning *string `json:"PwrPerfTuning,omitempty"`

		QpiLinkFrequency *string `json:"QpiLinkFrequency,omitempty"`

		QpiSnoopMode *string `json:"QpiSnoopMode,omitempty"`

		RankInterLeave *string `json:"RankInterLeave,omitempty"`

		RedirectionAfterPost *string `json:"RedirectionAfterPost,omitempty"`

		SataModeSelect *string `json:"SataModeSelect,omitempty"`

		SelectMemoryRasConfiguration *string `json:"SelectMemoryRasConfiguration,omitempty"`

		SerialPortAenable *string `json:"SerialPortAenable,omitempty"`

		SinglePctlEnable *string `json:"SinglePctlEnable,omitempty"`

		Slot10linkSpeed *string `json:"Slot10linkSpeed,omitempty"`

		Slot10state *string `json:"Slot10state,omitempty"`

		Slot11linkSpeed *string `json:"Slot11linkSpeed,omitempty"`

		Slot11state *string `json:"Slot11state,omitempty"`

		Slot12linkSpeed *string `json:"Slot12linkSpeed,omitempty"`

		Slot12state *string `json:"Slot12state,omitempty"`

		Slot13state *string `json:"Slot13state,omitempty"`

		Slot14state *string `json:"Slot14state,omitempty"`

		Slot1linkSpeed *string `json:"Slot1linkSpeed,omitempty"`

		Slot1state *string `json:"Slot1state,omitempty"`

		Slot2linkSpeed *string `json:"Slot2linkSpeed,omitempty"`

		Slot2state *string `json:"Slot2state,omitempty"`

		Slot3linkSpeed *string `json:"Slot3linkSpeed,omitempty"`

		Slot3state *string `json:"Slot3state,omitempty"`

		Slot4linkSpeed *string `json:"Slot4linkSpeed,omitempty"`

		Slot4state *string `json:"Slot4state,omitempty"`

		Slot5linkSpeed *string `json:"Slot5linkSpeed,omitempty"`

		Slot5state *string `json:"Slot5state,omitempty"`

		Slot6linkSpeed *string `json:"Slot6linkSpeed,omitempty"`

		Slot6state *string `json:"Slot6state,omitempty"`

		Slot7linkSpeed *string `json:"Slot7linkSpeed,omitempty"`

		Slot7state *string `json:"Slot7state,omitempty"`

		Slot8linkSpeed *string `json:"Slot8linkSpeed,omitempty"`

		Slot8state *string `json:"Slot8state,omitempty"`

		Slot9linkSpeed *string `json:"Slot9linkSpeed,omitempty"`

		Slot9state *string `json:"Slot9state,omitempty"`

		SlotFlomLinkSpeed *string `json:"SlotFlomLinkSpeed,omitempty"`

		SlotFrontNvme1linkSpeed *string `json:"SlotFrontNvme1linkSpeed,omitempty"`

		SlotFrontNvme2linkSpeed *string `json:"SlotFrontNvme2linkSpeed,omitempty"`

		SlotFrontSlot5linkSpeed *string `json:"SlotFrontSlot5linkSpeed,omitempty"`

		SlotFrontSlot6linkSpeed *string `json:"SlotFrontSlot6linkSpeed,omitempty"`

		SlotGpu1state *string `json:"SlotGpu1state,omitempty"`

		SlotGpu2state *string `json:"SlotGpu2state,omitempty"`

		SlotGpu3state *string `json:"SlotGpu3state,omitempty"`

		SlotGpu4state *string `json:"SlotGpu4state,omitempty"`

		SlotGpu5state *string `json:"SlotGpu5state,omitempty"`

		SlotGpu6state *string `json:"SlotGpu6state,omitempty"`

		SlotGpu7state *string `json:"SlotGpu7state,omitempty"`

		SlotGpu8state *string `json:"SlotGpu8state,omitempty"`

		SlotHbaLinkSpeed *string `json:"SlotHbaLinkSpeed,omitempty"`

		SlotHbaState *string `json:"SlotHbaState,omitempty"`

		SlotLom1link *string `json:"SlotLom1link,omitempty"`

		SlotLom2link *string `json:"SlotLom2link,omitempty"`

		SlotMezzState *string `json:"SlotMezzState,omitempty"`

		SlotMlomLinkSpeed *string `json:"SlotMlomLinkSpeed,omitempty"`

		SlotMlomState *string `json:"SlotMlomState,omitempty"`

		SlotMraidLinkSpeed *string `json:"SlotMraidLinkSpeed,omitempty"`

		SlotMraidState *string `json:"SlotMraidState,omitempty"`

		SlotN10state *string `json:"SlotN10state,omitempty"`

		SlotN11state *string `json:"SlotN11state,omitempty"`

		SlotN12state *string `json:"SlotN12state,omitempty"`

		SlotN13state *string `json:"SlotN13state,omitempty"`

		SlotN14state *string `json:"SlotN14state,omitempty"`

		SlotN15state *string `json:"SlotN15state,omitempty"`

		SlotN16state *string `json:"SlotN16state,omitempty"`

		SlotN17state *string `json:"SlotN17state,omitempty"`

		SlotN18state *string `json:"SlotN18state,omitempty"`

		SlotN19state *string `json:"SlotN19state,omitempty"`

		SlotN1state *string `json:"SlotN1state,omitempty"`

		SlotN20state *string `json:"SlotN20state,omitempty"`

		SlotN21state *string `json:"SlotN21state,omitempty"`

		SlotN22state *string `json:"SlotN22state,omitempty"`

		SlotN23state *string `json:"SlotN23state,omitempty"`

		SlotN24state *string `json:"SlotN24state,omitempty"`

		SlotN2state *string `json:"SlotN2state,omitempty"`

		SlotN3state *string `json:"SlotN3state,omitempty"`

		SlotN4state *string `json:"SlotN4state,omitempty"`

		SlotN5state *string `json:"SlotN5state,omitempty"`

		SlotN6state *string `json:"SlotN6state,omitempty"`

		SlotN7state *string `json:"SlotN7state,omitempty"`

		SlotN8state *string `json:"SlotN8state,omitempty"`

		SlotN9state *string `json:"SlotN9state,omitempty"`

		SlotRaidLinkSpeed *string `json:"SlotRaidLinkSpeed,omitempty"`

		SlotRaidState *string `json:"SlotRaidState,omitempty"`

		SlotRearNvme1linkSpeed *string `json:"SlotRearNvme1linkSpeed,omitempty"`

		SlotRearNvme1state *string `json:"SlotRearNvme1state,omitempty"`

		SlotRearNvme2linkSpeed *string `json:"SlotRearNvme2linkSpeed,omitempty"`

		SlotRearNvme2state *string `json:"SlotRearNvme2state,omitempty"`

		SlotRearNvme3state *string `json:"SlotRearNvme3state,omitempty"`

		SlotRearNvme4state *string `json:"SlotRearNvme4state,omitempty"`

		SlotRearNvme5state *string `json:"SlotRearNvme5state,omitempty"`

		SlotRearNvme6state *string `json:"SlotRearNvme6state,omitempty"`

		SlotRearNvme7state *string `json:"SlotRearNvme7state,omitempty"`

		SlotRearNvme8state *string `json:"SlotRearNvme8state,omitempty"`

		SlotRiser1linkSpeed *string `json:"SlotRiser1linkSpeed,omitempty"`

		SlotRiser1slot1linkSpeed *string `json:"SlotRiser1slot1linkSpeed,omitempty"`

		SlotRiser1slot2linkSpeed *string `json:"SlotRiser1slot2linkSpeed,omitempty"`

		SlotRiser1slot3linkSpeed *string `json:"SlotRiser1slot3linkSpeed,omitempty"`

		SlotRiser2linkSpeed *string `json:"SlotRiser2linkSpeed,omitempty"`

		SlotRiser2slot4linkSpeed *string `json:"SlotRiser2slot4linkSpeed,omitempty"`

		SlotRiser2slot5linkSpeed *string `json:"SlotRiser2slot5linkSpeed,omitempty"`

		SlotRiser2slot6linkSpeed *string `json:"SlotRiser2slot6linkSpeed,omitempty"`

		SlotSasState *string `json:"SlotSasState,omitempty"`

		SlotSsdSlot1linkSpeed *string `json:"SlotSsdSlot1linkSpeed,omitempty"`

		SlotSsdSlot2linkSpeed *string `json:"SlotSsdSlot2linkSpeed,omitempty"`

		Smee *string `json:"Smee,omitempty"`

		SmtMode *string `json:"SmtMode,omitempty"`

		Snc *string `json:"Snc,omitempty"`

		SparingMode *string `json:"SparingMode,omitempty"`

		SrIov *string `json:"SrIov,omitempty"`

		StreamerPrefetch *string `json:"StreamerPrefetch,omitempty"`

		SvmMode *string `json:"SvmMode,omitempty"`

		TerminalType *string `json:"TerminalType,omitempty"`

		TpmControl *string `json:"TpmControl,omitempty"`

		TpmSupport *string `json:"TpmSupport,omitempty"`

		TxtSupport *string `json:"TxtSupport,omitempty"`

		UcsmBootOrderRule *string `json:"UcsmBootOrderRule,omitempty"`

		UsbEmul6064 *string `json:"UsbEmul6064,omitempty"`

		UsbPortFront *string `json:"UsbPortFront,omitempty"`

		UsbPortInternal *string `json:"UsbPortInternal,omitempty"`

		UsbPortKvm *string `json:"UsbPortKvm,omitempty"`

		UsbPortRear *string `json:"UsbPortRear,omitempty"`

		UsbPortSdCard *string `json:"UsbPortSdCard,omitempty"`

		UsbPortVmedia *string `json:"UsbPortVmedia,omitempty"`

		UsbXhciSupport *string `json:"UsbXhciSupport,omitempty"`

		VgaPriority *string `json:"VgaPriority,omitempty"`

		VmdEnable *string `json:"VmdEnable,omitempty"`

		WorkLoadConfig *string `json:"WorkLoadConfig,omitempty"`

		XptPrefetch *string `json:"XptPrefetch,omitempty"`
	}

	dataAO1.AcsControlGpu1state = m.AcsControlGpu1state

	dataAO1.AcsControlGpu2state = m.AcsControlGpu2state

	dataAO1.AcsControlGpu3state = m.AcsControlGpu3state

	dataAO1.AcsControlGpu4state = m.AcsControlGpu4state

	dataAO1.AcsControlGpu5state = m.AcsControlGpu5state

	dataAO1.AcsControlGpu6state = m.AcsControlGpu6state

	dataAO1.AcsControlGpu7state = m.AcsControlGpu7state

	dataAO1.AcsControlGpu8state = m.AcsControlGpu8state

	dataAO1.AcsControlSlot11state = m.AcsControlSlot11state

	dataAO1.AcsControlSlot12state = m.AcsControlSlot12state

	dataAO1.AcsControlSlot13state = m.AcsControlSlot13state

	dataAO1.AcsControlSlot14state = m.AcsControlSlot14state

	dataAO1.AdjacentCacheLinePrefetch = m.AdjacentCacheLinePrefetch

	dataAO1.AllUsbDevices = m.AllUsbDevices

	dataAO1.Altitude = m.Altitude

	dataAO1.AspmSupport = m.AspmSupport

	dataAO1.AssertNmiOnPerr = m.AssertNmiOnPerr

	dataAO1.AssertNmiOnSerr = m.AssertNmiOnSerr

	dataAO1.AutoCcState = m.AutoCcState

	dataAO1.AutonumousCstateEnable = m.AutonumousCstateEnable

	dataAO1.BaudRate = m.BaudRate

	dataAO1.BmeDmaMitigation = m.BmeDmaMitigation

	dataAO1.BootOptionNumRetry = m.BootOptionNumRetry

	dataAO1.BootOptionReCoolDown = m.BootOptionReCoolDown

	dataAO1.BootOptionRetry = m.BootOptionRetry

	dataAO1.BootPerformanceMode = m.BootPerformanceMode

	dataAO1.CbsCmnCPUCpb = m.CbsCmnCPUCpb

	dataAO1.CbsCmnCPUGenDowncoreCtrl = m.CbsCmnCPUGenDowncoreCtrl

	dataAO1.CbsCmnCPUGlobalCstateCtrl = m.CbsCmnCPUGlobalCstateCtrl

	dataAO1.CbsCmnCPUL1streamHwPrefetcher = m.CbsCmnCPUL1streamHwPrefetcher

	dataAO1.CbsCmnCPUL2streamHwPrefetcher = m.CbsCmnCPUL2streamHwPrefetcher

	dataAO1.CbsCmnDeterminismSlider = m.CbsCmnDeterminismSlider

	dataAO1.CbsCmnGnbNbIommu = m.CbsCmnGnbNbIommu

	dataAO1.CbsCmnMemCtrlBankGroupSwapDdr4 = m.CbsCmnMemCtrlBankGroupSwapDdr4

	dataAO1.CbsCmnMemMapBankInterleaveDdr4 = m.CbsCmnMemMapBankInterleaveDdr4

	dataAO1.CbsCmncTdpCtl = m.CbsCmncTdpCtl

	dataAO1.CbsDfCmnMemIntlv = m.CbsDfCmnMemIntlv

	dataAO1.CbsDfCmnMemIntlvSize = m.CbsDfCmnMemIntlvSize

	dataAO1.CdnEnable = m.CdnEnable

	dataAO1.CdnSupport = m.CdnSupport

	dataAO1.ChannelInterLeave = m.ChannelInterLeave

	dataAO1.CiscoAdaptiveMemTraining = m.CiscoAdaptiveMemTraining

	dataAO1.CiscoDebugLevel = m.CiscoDebugLevel

	dataAO1.CiscoOpromLaunchOptimization = m.CiscoOpromLaunchOptimization

	dataAO1.CkeLowPolicy = m.CkeLowPolicy

	dataAO1.ClosedLoopThermThrotl = m.ClosedLoopThermThrotl

	dataAO1.CmciEnable = m.CmciEnable

	dataAO1.ConfigTdp = m.ConfigTdp

	dataAO1.ConsoleRedirection = m.ConsoleRedirection

	dataAO1.CoreMultiProcessing = m.CoreMultiProcessing

	dataAO1.CPUEnergyPerformance = m.CPUEnergyPerformance

	dataAO1.CPUFrequencyFloor = m.CPUFrequencyFloor

	dataAO1.CPUPerformance = m.CPUPerformance

	dataAO1.CPUPowerManagement = m.CPUPowerManagement

	dataAO1.DcpmmFirmwareDowngrade = m.DcpmmFirmwareDowngrade

	dataAO1.DemandScrub = m.DemandScrub

	dataAO1.DirectCacheAccess = m.DirectCacheAccess

	dataAO1.DramClockThrottling = m.DramClockThrottling

	dataAO1.DramRefreshRate = m.DramRefreshRate

	dataAO1.EnergyEfficientTurbo = m.EnergyEfficientTurbo

	dataAO1.EngPerfTuning = m.EngPerfTuning

	dataAO1.EnhancedIntelSpeedStepTech = m.EnhancedIntelSpeedStepTech

	dataAO1.EppProfile = m.EppProfile

	dataAO1.ExecuteDisableBit = m.ExecuteDisableBit

	dataAO1.ExtendedApic = m.ExtendedApic

	dataAO1.FlowControl = m.FlowControl

	dataAO1.Frb2enable = m.Frb2enable

	dataAO1.HardwarePrefetch = m.HardwarePrefetch

	dataAO1.HwpmEnable = m.HwpmEnable

	dataAO1.ImcInterleave = m.ImcInterleave

	dataAO1.IntelHyperThreadingTech = m.IntelHyperThreadingTech

	dataAO1.IntelSpeedSelect = m.IntelSpeedSelect

	dataAO1.IntelTurboBoostTech = m.IntelTurboBoostTech

	dataAO1.IntelVirtualizationTechnology = m.IntelVirtualizationTechnology

	dataAO1.IntelVtForDirectedIo = m.IntelVtForDirectedIo

	dataAO1.IntelVtdCoherencySupport = m.IntelVtdCoherencySupport

	dataAO1.IntelVtdInterruptRemapping = m.IntelVtdInterruptRemapping

	dataAO1.IntelVtdPassThroughDmaSupport = m.IntelVtdPassThroughDmaSupport

	dataAO1.IntelVtdatsSupport = m.IntelVtdatsSupport

	dataAO1.IohErrorEnable = m.IohErrorEnable

	dataAO1.IohResource = m.IohResource

	dataAO1.IPPrefetch = m.IPPrefetch

	dataAO1.Ipv6pxe = m.Ipv6pxe

	dataAO1.KtiPrefetch = m.KtiPrefetch

	dataAO1.LegacyOsRedirection = m.LegacyOsRedirection

	dataAO1.LegacyUsbSupport = m.LegacyUsbSupport

	dataAO1.LlcPrefetch = m.LlcPrefetch

	dataAO1.LomPort0state = m.LomPort0state

	dataAO1.LomPort1state = m.LomPort1state

	dataAO1.LomPort2state = m.LomPort2state

	dataAO1.LomPort3state = m.LomPort3state

	dataAO1.LomPortsAllState = m.LomPortsAllState

	dataAO1.LvDdrMode = m.LvDdrMode

	dataAO1.MakeDeviceNonBootable = m.MakeDeviceNonBootable

	dataAO1.MemoryInterLeave = m.MemoryInterLeave

	dataAO1.MemoryMappedIoAbove4gb = m.MemoryMappedIoAbove4gb

	dataAO1.MirroringMode = m.MirroringMode

	dataAO1.MmcfgBase = m.MmcfgBase

	dataAO1.NumaOptimized = m.NumaOptimized

	dataAO1.Onboard10gbitLom = m.Onboard10gbitLom

	dataAO1.OnboardGbitLom = m.OnboardGbitLom

	dataAO1.OnboardScuStorageSupport = m.OnboardScuStorageSupport

	dataAO1.OnboardScuStorageSwStack = m.OnboardScuStorageSwStack

	dataAO1.Organization = m.Organization

	dataAO1.OsBootWatchdogTimer = m.OsBootWatchdogTimer

	dataAO1.OsBootWatchdogTimerPolicy = m.OsBootWatchdogTimerPolicy

	dataAO1.OsBootWatchdogTimerTimeout = m.OsBootWatchdogTimerTimeout

	dataAO1.OutOfBandMgmtPort = m.OutOfBandMgmtPort

	dataAO1.PackageCstateLimit = m.PackageCstateLimit

	dataAO1.PatrolScrub = m.PatrolScrub

	dataAO1.PatrolScrubDuration = m.PatrolScrubDuration

	dataAO1.PcIeSsdHotPlugSupport = m.PcIeSsdHotPlugSupport

	dataAO1.PchUsb30mode = m.PchUsb30mode

	dataAO1.PciOptionRoMs = m.PciOptionRoMs

	dataAO1.PciRomClp = m.PciRomClp

	dataAO1.PopSupport = m.PopSupport

	dataAO1.PostErrorPause = m.PostErrorPause

	dataAO1.ProcessorC1e = m.ProcessorC1e

	dataAO1.ProcessorC3report = m.ProcessorC3report

	dataAO1.ProcessorC6report = m.ProcessorC6report

	dataAO1.ProcessorCstate = m.ProcessorCstate

	dataAO1.Profiles = m.Profiles

	dataAO1.Psata = m.Psata

	dataAO1.PstateCoordType = m.PstateCoordType

	dataAO1.PuttyKeyPad = m.PuttyKeyPad

	dataAO1.PwrPerfTuning = m.PwrPerfTuning

	dataAO1.QpiLinkFrequency = m.QpiLinkFrequency

	dataAO1.QpiSnoopMode = m.QpiSnoopMode

	dataAO1.RankInterLeave = m.RankInterLeave

	dataAO1.RedirectionAfterPost = m.RedirectionAfterPost

	dataAO1.SataModeSelect = m.SataModeSelect

	dataAO1.SelectMemoryRasConfiguration = m.SelectMemoryRasConfiguration

	dataAO1.SerialPortAenable = m.SerialPortAenable

	dataAO1.SinglePctlEnable = m.SinglePctlEnable

	dataAO1.Slot10linkSpeed = m.Slot10linkSpeed

	dataAO1.Slot10state = m.Slot10state

	dataAO1.Slot11linkSpeed = m.Slot11linkSpeed

	dataAO1.Slot11state = m.Slot11state

	dataAO1.Slot12linkSpeed = m.Slot12linkSpeed

	dataAO1.Slot12state = m.Slot12state

	dataAO1.Slot13state = m.Slot13state

	dataAO1.Slot14state = m.Slot14state

	dataAO1.Slot1linkSpeed = m.Slot1linkSpeed

	dataAO1.Slot1state = m.Slot1state

	dataAO1.Slot2linkSpeed = m.Slot2linkSpeed

	dataAO1.Slot2state = m.Slot2state

	dataAO1.Slot3linkSpeed = m.Slot3linkSpeed

	dataAO1.Slot3state = m.Slot3state

	dataAO1.Slot4linkSpeed = m.Slot4linkSpeed

	dataAO1.Slot4state = m.Slot4state

	dataAO1.Slot5linkSpeed = m.Slot5linkSpeed

	dataAO1.Slot5state = m.Slot5state

	dataAO1.Slot6linkSpeed = m.Slot6linkSpeed

	dataAO1.Slot6state = m.Slot6state

	dataAO1.Slot7linkSpeed = m.Slot7linkSpeed

	dataAO1.Slot7state = m.Slot7state

	dataAO1.Slot8linkSpeed = m.Slot8linkSpeed

	dataAO1.Slot8state = m.Slot8state

	dataAO1.Slot9linkSpeed = m.Slot9linkSpeed

	dataAO1.Slot9state = m.Slot9state

	dataAO1.SlotFlomLinkSpeed = m.SlotFlomLinkSpeed

	dataAO1.SlotFrontNvme1linkSpeed = m.SlotFrontNvme1linkSpeed

	dataAO1.SlotFrontNvme2linkSpeed = m.SlotFrontNvme2linkSpeed

	dataAO1.SlotFrontSlot5linkSpeed = m.SlotFrontSlot5linkSpeed

	dataAO1.SlotFrontSlot6linkSpeed = m.SlotFrontSlot6linkSpeed

	dataAO1.SlotGpu1state = m.SlotGpu1state

	dataAO1.SlotGpu2state = m.SlotGpu2state

	dataAO1.SlotGpu3state = m.SlotGpu3state

	dataAO1.SlotGpu4state = m.SlotGpu4state

	dataAO1.SlotGpu5state = m.SlotGpu5state

	dataAO1.SlotGpu6state = m.SlotGpu6state

	dataAO1.SlotGpu7state = m.SlotGpu7state

	dataAO1.SlotGpu8state = m.SlotGpu8state

	dataAO1.SlotHbaLinkSpeed = m.SlotHbaLinkSpeed

	dataAO1.SlotHbaState = m.SlotHbaState

	dataAO1.SlotLom1link = m.SlotLom1link

	dataAO1.SlotLom2link = m.SlotLom2link

	dataAO1.SlotMezzState = m.SlotMezzState

	dataAO1.SlotMlomLinkSpeed = m.SlotMlomLinkSpeed

	dataAO1.SlotMlomState = m.SlotMlomState

	dataAO1.SlotMraidLinkSpeed = m.SlotMraidLinkSpeed

	dataAO1.SlotMraidState = m.SlotMraidState

	dataAO1.SlotN10state = m.SlotN10state

	dataAO1.SlotN11state = m.SlotN11state

	dataAO1.SlotN12state = m.SlotN12state

	dataAO1.SlotN13state = m.SlotN13state

	dataAO1.SlotN14state = m.SlotN14state

	dataAO1.SlotN15state = m.SlotN15state

	dataAO1.SlotN16state = m.SlotN16state

	dataAO1.SlotN17state = m.SlotN17state

	dataAO1.SlotN18state = m.SlotN18state

	dataAO1.SlotN19state = m.SlotN19state

	dataAO1.SlotN1state = m.SlotN1state

	dataAO1.SlotN20state = m.SlotN20state

	dataAO1.SlotN21state = m.SlotN21state

	dataAO1.SlotN22state = m.SlotN22state

	dataAO1.SlotN23state = m.SlotN23state

	dataAO1.SlotN24state = m.SlotN24state

	dataAO1.SlotN2state = m.SlotN2state

	dataAO1.SlotN3state = m.SlotN3state

	dataAO1.SlotN4state = m.SlotN4state

	dataAO1.SlotN5state = m.SlotN5state

	dataAO1.SlotN6state = m.SlotN6state

	dataAO1.SlotN7state = m.SlotN7state

	dataAO1.SlotN8state = m.SlotN8state

	dataAO1.SlotN9state = m.SlotN9state

	dataAO1.SlotRaidLinkSpeed = m.SlotRaidLinkSpeed

	dataAO1.SlotRaidState = m.SlotRaidState

	dataAO1.SlotRearNvme1linkSpeed = m.SlotRearNvme1linkSpeed

	dataAO1.SlotRearNvme1state = m.SlotRearNvme1state

	dataAO1.SlotRearNvme2linkSpeed = m.SlotRearNvme2linkSpeed

	dataAO1.SlotRearNvme2state = m.SlotRearNvme2state

	dataAO1.SlotRearNvme3state = m.SlotRearNvme3state

	dataAO1.SlotRearNvme4state = m.SlotRearNvme4state

	dataAO1.SlotRearNvme5state = m.SlotRearNvme5state

	dataAO1.SlotRearNvme6state = m.SlotRearNvme6state

	dataAO1.SlotRearNvme7state = m.SlotRearNvme7state

	dataAO1.SlotRearNvme8state = m.SlotRearNvme8state

	dataAO1.SlotRiser1linkSpeed = m.SlotRiser1linkSpeed

	dataAO1.SlotRiser1slot1linkSpeed = m.SlotRiser1slot1linkSpeed

	dataAO1.SlotRiser1slot2linkSpeed = m.SlotRiser1slot2linkSpeed

	dataAO1.SlotRiser1slot3linkSpeed = m.SlotRiser1slot3linkSpeed

	dataAO1.SlotRiser2linkSpeed = m.SlotRiser2linkSpeed

	dataAO1.SlotRiser2slot4linkSpeed = m.SlotRiser2slot4linkSpeed

	dataAO1.SlotRiser2slot5linkSpeed = m.SlotRiser2slot5linkSpeed

	dataAO1.SlotRiser2slot6linkSpeed = m.SlotRiser2slot6linkSpeed

	dataAO1.SlotSasState = m.SlotSasState

	dataAO1.SlotSsdSlot1linkSpeed = m.SlotSsdSlot1linkSpeed

	dataAO1.SlotSsdSlot2linkSpeed = m.SlotSsdSlot2linkSpeed

	dataAO1.Smee = m.Smee

	dataAO1.SmtMode = m.SmtMode

	dataAO1.Snc = m.Snc

	dataAO1.SparingMode = m.SparingMode

	dataAO1.SrIov = m.SrIov

	dataAO1.StreamerPrefetch = m.StreamerPrefetch

	dataAO1.SvmMode = m.SvmMode

	dataAO1.TerminalType = m.TerminalType

	dataAO1.TpmControl = m.TpmControl

	dataAO1.TpmSupport = m.TpmSupport

	dataAO1.TxtSupport = m.TxtSupport

	dataAO1.UcsmBootOrderRule = m.UcsmBootOrderRule

	dataAO1.UsbEmul6064 = m.UsbEmul6064

	dataAO1.UsbPortFront = m.UsbPortFront

	dataAO1.UsbPortInternal = m.UsbPortInternal

	dataAO1.UsbPortKvm = m.UsbPortKvm

	dataAO1.UsbPortRear = m.UsbPortRear

	dataAO1.UsbPortSdCard = m.UsbPortSdCard

	dataAO1.UsbPortVmedia = m.UsbPortVmedia

	dataAO1.UsbXhciSupport = m.UsbXhciSupport

	dataAO1.VgaPriority = m.VgaPriority

	dataAO1.VmdEnable = m.VmdEnable

	dataAO1.WorkLoadConfig = m.WorkLoadConfig

	dataAO1.XptPrefetch = m.XptPrefetch

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this bios policy
func (m *BiosPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu4state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu5state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu6state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu7state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlGpu8state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlSlot11state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlSlot12state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlSlot13state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcsControlSlot14state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdjacentCacheLinePrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllUsbDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAspmSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssertNmiOnPerr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssertNmiOnSerr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoCcState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutonumousCstateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaudRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBmeDmaMitigation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootOptionNumRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootOptionReCoolDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootOptionRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootPerformanceMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnCPUCpb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnCPUGenDowncoreCtrl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnCPUGlobalCstateCtrl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnCPUL1streamHwPrefetcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnCPUL2streamHwPrefetcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnDeterminismSlider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnGnbNbIommu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnMemCtrlBankGroupSwapDdr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmnMemMapBankInterleaveDdr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsCmncTdpCtl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsDfCmnMemIntlv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbsDfCmnMemIntlvSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdnEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdnSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelInterLeave(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiscoAdaptiveMemTraining(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiscoDebugLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiscoOpromLaunchOptimization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCkeLowPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedLoopThermThrotl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmciEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigTdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsoleRedirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoreMultiProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUEnergyPerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUFrequencyFloor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUPerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUPowerManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcpmmFirmwareDowngrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemandScrub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectCacheAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDramClockThrottling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDramRefreshRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnergyEfficientTurbo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEngPerfTuning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnhancedIntelSpeedStepTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEppProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteDisableBit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedApic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrb2enable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwarePrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHwpmEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImcInterleave(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelHyperThreadingTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelSpeedSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelTurboBoostTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVirtualizationTechnology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVtForDirectedIo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVtdCoherencySupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVtdInterruptRemapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVtdPassThroughDmaSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelVtdatsSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIohErrorEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIohResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPPrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpv6pxe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKtiPrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegacyOsRedirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegacyUsbSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLlcPrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLomPort0state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLomPort1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLomPort2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLomPort3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLomPortsAllState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLvDdrMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMakeDeviceNonBootable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryInterLeave(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryMappedIoAbove4gb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirroringMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMmcfgBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumaOptimized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboard10gbitLom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboardGbitLom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboardScuStorageSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboardScuStorageSwStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsBootWatchdogTimer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsBootWatchdogTimerPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsBootWatchdogTimerTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutOfBandMgmtPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageCstateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatrolScrub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatrolScrubDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcIeSsdHotPlugSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePchUsb30mode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePciOptionRoMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePciRomClp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePopSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostErrorPause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorC1e(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorC3report(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorC6report(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorCstate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePsata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePstateCoordType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePuttyKeyPad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePwrPerfTuning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQpiLinkFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQpiSnoopMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankInterLeave(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectionAfterPost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSataModeSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectMemoryRasConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialPortAenable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinglePctlEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot10linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot10state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot11linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot11state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot12linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot12state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot13state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot14state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot3linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot4linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot4state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot5linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot5state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot6linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot6state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot7linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot7state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot8linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot8state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot9linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot9state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotFlomLinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotFrontNvme1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotFrontNvme2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotFrontSlot5linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotFrontSlot6linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu4state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu5state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu6state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu7state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotGpu8state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotHbaLinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotHbaState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotLom1link(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotLom2link(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotMezzState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotMlomLinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotMlomState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotMraidLinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotMraidState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN10state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN11state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN12state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN13state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN14state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN15state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN16state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN17state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN18state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN19state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN20state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN21state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN22state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN23state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN24state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN4state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN5state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN6state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN7state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN8state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotN9state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRaidLinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRaidState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme1state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme2state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme3state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme4state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme5state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme6state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme7state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRearNvme8state(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser1slot1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser1slot2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser1slot3linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser2slot4linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser2slot5linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotRiser2slot6linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotSasState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotSsdSlot1linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotSsdSlot2linkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmtMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSparingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrIov(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamerPrefetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvmMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpmControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpmSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxtSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcsmBootOrderRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbEmul6064(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortFront(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortInternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortKvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortRear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortSdCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbPortVmedia(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbXhciSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVgaPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmdEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkLoadConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXptPrefetch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var biosPolicyTypeAcsControlGpu1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu1statePropEnum = append(biosPolicyTypeAcsControlGpu1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu1state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu1stateEnum("AcsControlGpu1state", "body", *m.AcsControlGpu1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu2statePropEnum = append(biosPolicyTypeAcsControlGpu2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu2state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu2stateEnum("AcsControlGpu2state", "body", *m.AcsControlGpu2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu3statePropEnum = append(biosPolicyTypeAcsControlGpu3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu3state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu3stateEnum("AcsControlGpu3state", "body", *m.AcsControlGpu3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu4statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu4statePropEnum = append(biosPolicyTypeAcsControlGpu4statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu4stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu4statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu4state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu4state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu4stateEnum("AcsControlGpu4state", "body", *m.AcsControlGpu4state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu5statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu5statePropEnum = append(biosPolicyTypeAcsControlGpu5statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu5stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu5statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu5state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu5state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu5stateEnum("AcsControlGpu5state", "body", *m.AcsControlGpu5state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu6statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu6statePropEnum = append(biosPolicyTypeAcsControlGpu6statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu6stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu6statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu6state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu6state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu6stateEnum("AcsControlGpu6state", "body", *m.AcsControlGpu6state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu7statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu7statePropEnum = append(biosPolicyTypeAcsControlGpu7statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu7stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu7statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu7state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu7state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu7stateEnum("AcsControlGpu7state", "body", *m.AcsControlGpu7state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlGpu8statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlGpu8statePropEnum = append(biosPolicyTypeAcsControlGpu8statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlGpu8stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlGpu8statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlGpu8state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlGpu8state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlGpu8stateEnum("AcsControlGpu8state", "body", *m.AcsControlGpu8state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlSlot11statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlSlot11statePropEnum = append(biosPolicyTypeAcsControlSlot11statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlSlot11stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlSlot11statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlSlot11state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlSlot11state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlSlot11stateEnum("AcsControlSlot11state", "body", *m.AcsControlSlot11state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlSlot12statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlSlot12statePropEnum = append(biosPolicyTypeAcsControlSlot12statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlSlot12stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlSlot12statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlSlot12state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlSlot12state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlSlot12stateEnum("AcsControlSlot12state", "body", *m.AcsControlSlot12state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlSlot13statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlSlot13statePropEnum = append(biosPolicyTypeAcsControlSlot13statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlSlot13stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlSlot13statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlSlot13state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlSlot13state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlSlot13stateEnum("AcsControlSlot13state", "body", *m.AcsControlSlot13state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAcsControlSlot14statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAcsControlSlot14statePropEnum = append(biosPolicyTypeAcsControlSlot14statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAcsControlSlot14stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAcsControlSlot14statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAcsControlSlot14state(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsControlSlot14state) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcsControlSlot14stateEnum("AcsControlSlot14state", "body", *m.AcsControlSlot14state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAdjacentCacheLinePrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAdjacentCacheLinePrefetchPropEnum = append(biosPolicyTypeAdjacentCacheLinePrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAdjacentCacheLinePrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAdjacentCacheLinePrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAdjacentCacheLinePrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjacentCacheLinePrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdjacentCacheLinePrefetchEnum("AdjacentCacheLinePrefetch", "body", *m.AdjacentCacheLinePrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAllUsbDevicesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAllUsbDevicesPropEnum = append(biosPolicyTypeAllUsbDevicesPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAllUsbDevicesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAllUsbDevicesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAllUsbDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.AllUsbDevices) { // not required
		return nil
	}

	// value enum
	if err := m.validateAllUsbDevicesEnum("AllUsbDevices", "body", *m.AllUsbDevices); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAltitudePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1500-m","300-m","3000-m","900-m","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAltitudePropEnum = append(biosPolicyTypeAltitudePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAltitudeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAltitudePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAltitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Altitude) { // not required
		return nil
	}

	// value enum
	if err := m.validateAltitudeEnum("Altitude", "body", *m.Altitude); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAspmSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","Force L0s","L1 Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAspmSupportPropEnum = append(biosPolicyTypeAspmSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAspmSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAspmSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAspmSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.AspmSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateAspmSupportEnum("AspmSupport", "body", *m.AspmSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAssertNmiOnPerrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAssertNmiOnPerrPropEnum = append(biosPolicyTypeAssertNmiOnPerrPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAssertNmiOnPerrEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAssertNmiOnPerrPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAssertNmiOnPerr(formats strfmt.Registry) error {

	if swag.IsZero(m.AssertNmiOnPerr) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssertNmiOnPerrEnum("AssertNmiOnPerr", "body", *m.AssertNmiOnPerr); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAssertNmiOnSerrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAssertNmiOnSerrPropEnum = append(biosPolicyTypeAssertNmiOnSerrPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAssertNmiOnSerrEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAssertNmiOnSerrPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAssertNmiOnSerr(formats strfmt.Registry) error {

	if swag.IsZero(m.AssertNmiOnSerr) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssertNmiOnSerrEnum("AssertNmiOnSerr", "body", *m.AssertNmiOnSerr); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAutoCcStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAutoCcStatePropEnum = append(biosPolicyTypeAutoCcStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAutoCcStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAutoCcStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAutoCcState(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoCcState) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoCcStateEnum("AutoCcState", "body", *m.AutoCcState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeAutonumousCstateEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeAutonumousCstateEnablePropEnum = append(biosPolicyTypeAutonumousCstateEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateAutonumousCstateEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeAutonumousCstateEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateAutonumousCstateEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.AutonumousCstateEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutonumousCstateEnableEnum("AutonumousCstateEnable", "body", *m.AutonumousCstateEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBaudRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","115200","19200","38400","57600","9600"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBaudRatePropEnum = append(biosPolicyTypeBaudRatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBaudRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBaudRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBaudRate(formats strfmt.Registry) error {

	if swag.IsZero(m.BaudRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateBaudRateEnum("BaudRate", "body", *m.BaudRate); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBmeDmaMitigationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBmeDmaMitigationPropEnum = append(biosPolicyTypeBmeDmaMitigationPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBmeDmaMitigationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBmeDmaMitigationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBmeDmaMitigation(formats strfmt.Registry) error {

	if swag.IsZero(m.BmeDmaMitigation) { // not required
		return nil
	}

	// value enum
	if err := m.validateBmeDmaMitigationEnum("BmeDmaMitigation", "body", *m.BmeDmaMitigation); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBootOptionNumRetryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","13","5","Infinite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBootOptionNumRetryPropEnum = append(biosPolicyTypeBootOptionNumRetryPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBootOptionNumRetryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBootOptionNumRetryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBootOptionNumRetry(formats strfmt.Registry) error {

	if swag.IsZero(m.BootOptionNumRetry) { // not required
		return nil
	}

	// value enum
	if err := m.validateBootOptionNumRetryEnum("BootOptionNumRetry", "body", *m.BootOptionNumRetry); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBootOptionReCoolDownPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","15","45","90"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBootOptionReCoolDownPropEnum = append(biosPolicyTypeBootOptionReCoolDownPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBootOptionReCoolDownEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBootOptionReCoolDownPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBootOptionReCoolDown(formats strfmt.Registry) error {

	if swag.IsZero(m.BootOptionReCoolDown) { // not required
		return nil
	}

	// value enum
	if err := m.validateBootOptionReCoolDownEnum("BootOptionReCoolDown", "body", *m.BootOptionReCoolDown); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBootOptionRetryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBootOptionRetryPropEnum = append(biosPolicyTypeBootOptionRetryPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBootOptionRetryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBootOptionRetryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBootOptionRetry(formats strfmt.Registry) error {

	if swag.IsZero(m.BootOptionRetry) { // not required
		return nil
	}

	// value enum
	if err := m.validateBootOptionRetryEnum("BootOptionRetry", "body", *m.BootOptionRetry); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeBootPerformanceModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Max Efficient","Max Performance","Set by Intel NM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeBootPerformanceModePropEnum = append(biosPolicyTypeBootPerformanceModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateBootPerformanceModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeBootPerformanceModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateBootPerformanceMode(formats strfmt.Registry) error {

	if swag.IsZero(m.BootPerformanceMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBootPerformanceModeEnum("BootPerformanceMode", "body", *m.BootPerformanceMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnCPUCpbPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnCPUCpbPropEnum = append(biosPolicyTypeCbsCmnCPUCpbPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnCPUCpbEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnCPUCpbPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnCPUCpb(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnCPUCpb) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnCPUCpbEnum("CbsCmnCpuCpb", "body", *m.CbsCmnCPUCpb); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnCPUGenDowncoreCtrlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","FOUR (2 + 2)","FOUR (4 + 0)","SIX (3 + 3)","THREE (3 + 0)","TWO (1 + 1)","TWO (2 + 0)"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnCPUGenDowncoreCtrlPropEnum = append(biosPolicyTypeCbsCmnCPUGenDowncoreCtrlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnCPUGenDowncoreCtrlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnCPUGenDowncoreCtrlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnCPUGenDowncoreCtrl(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnCPUGenDowncoreCtrl) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnCPUGenDowncoreCtrlEnum("CbsCmnCpuGenDowncoreCtrl", "body", *m.CbsCmnCPUGenDowncoreCtrl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnCPUGlobalCstateCtrlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnCPUGlobalCstateCtrlPropEnum = append(biosPolicyTypeCbsCmnCPUGlobalCstateCtrlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnCPUGlobalCstateCtrlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnCPUGlobalCstateCtrlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnCPUGlobalCstateCtrl(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnCPUGlobalCstateCtrl) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnCPUGlobalCstateCtrlEnum("CbsCmnCpuGlobalCstateCtrl", "body", *m.CbsCmnCPUGlobalCstateCtrl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnCPUL1streamHwPrefetcherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnCPUL1streamHwPrefetcherPropEnum = append(biosPolicyTypeCbsCmnCPUL1streamHwPrefetcherPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnCPUL1streamHwPrefetcherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnCPUL1streamHwPrefetcherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnCPUL1streamHwPrefetcher(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnCPUL1streamHwPrefetcher) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnCPUL1streamHwPrefetcherEnum("CbsCmnCpuL1streamHwPrefetcher", "body", *m.CbsCmnCPUL1streamHwPrefetcher); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnCPUL2streamHwPrefetcherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnCPUL2streamHwPrefetcherPropEnum = append(biosPolicyTypeCbsCmnCPUL2streamHwPrefetcherPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnCPUL2streamHwPrefetcherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnCPUL2streamHwPrefetcherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnCPUL2streamHwPrefetcher(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnCPUL2streamHwPrefetcher) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnCPUL2streamHwPrefetcherEnum("CbsCmnCpuL2streamHwPrefetcher", "body", *m.CbsCmnCPUL2streamHwPrefetcher); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnDeterminismSliderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Performance","Power"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnDeterminismSliderPropEnum = append(biosPolicyTypeCbsCmnDeterminismSliderPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnDeterminismSliderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnDeterminismSliderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnDeterminismSlider(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnDeterminismSlider) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnDeterminismSliderEnum("CbsCmnDeterminismSlider", "body", *m.CbsCmnDeterminismSlider); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnGnbNbIommuPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnGnbNbIommuPropEnum = append(biosPolicyTypeCbsCmnGnbNbIommuPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnGnbNbIommuEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnGnbNbIommuPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnGnbNbIommu(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnGnbNbIommu) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnGnbNbIommuEnum("CbsCmnGnbNbIommu", "body", *m.CbsCmnGnbNbIommu); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnMemCtrlBankGroupSwapDdr4PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnMemCtrlBankGroupSwapDdr4PropEnum = append(biosPolicyTypeCbsCmnMemCtrlBankGroupSwapDdr4PropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnMemCtrlBankGroupSwapDdr4Enum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnMemCtrlBankGroupSwapDdr4PropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnMemCtrlBankGroupSwapDdr4(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnMemCtrlBankGroupSwapDdr4) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnMemCtrlBankGroupSwapDdr4Enum("CbsCmnMemCtrlBankGroupSwapDdr4", "body", *m.CbsCmnMemCtrlBankGroupSwapDdr4); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmnMemMapBankInterleaveDdr4PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmnMemMapBankInterleaveDdr4PropEnum = append(biosPolicyTypeCbsCmnMemMapBankInterleaveDdr4PropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmnMemMapBankInterleaveDdr4Enum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmnMemMapBankInterleaveDdr4PropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmnMemMapBankInterleaveDdr4(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmnMemMapBankInterleaveDdr4) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmnMemMapBankInterleaveDdr4Enum("CbsCmnMemMapBankInterleaveDdr4", "body", *m.CbsCmnMemMapBankInterleaveDdr4); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsCmncTdpCtlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsCmncTdpCtlPropEnum = append(biosPolicyTypeCbsCmncTdpCtlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsCmncTdpCtlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsCmncTdpCtlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsCmncTdpCtl(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsCmncTdpCtl) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsCmncTdpCtlEnum("CbsCmncTdpCtl", "body", *m.CbsCmncTdpCtl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsDfCmnMemIntlvPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Channel","Die","None","Socket"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsDfCmnMemIntlvPropEnum = append(biosPolicyTypeCbsDfCmnMemIntlvPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsDfCmnMemIntlvEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsDfCmnMemIntlvPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsDfCmnMemIntlv(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsDfCmnMemIntlv) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsDfCmnMemIntlvEnum("CbsDfCmnMemIntlv", "body", *m.CbsDfCmnMemIntlv); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCbsDfCmnMemIntlvSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1 KB","2 KB","256 Bytes","512 Bytes","Auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCbsDfCmnMemIntlvSizePropEnum = append(biosPolicyTypeCbsDfCmnMemIntlvSizePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCbsDfCmnMemIntlvSizeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCbsDfCmnMemIntlvSizePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCbsDfCmnMemIntlvSize(formats strfmt.Registry) error {

	if swag.IsZero(m.CbsDfCmnMemIntlvSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateCbsDfCmnMemIntlvSizeEnum("CbsDfCmnMemIntlvSize", "body", *m.CbsDfCmnMemIntlvSize); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCdnEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCdnEnablePropEnum = append(biosPolicyTypeCdnEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCdnEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCdnEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCdnEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.CdnEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateCdnEnableEnum("CdnEnable", "body", *m.CdnEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCdnSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","LOMs Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCdnSupportPropEnum = append(biosPolicyTypeCdnSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCdnSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCdnSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCdnSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.CdnSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateCdnSupportEnum("CdnSupport", "body", *m.CdnSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeChannelInterLeavePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1-way","2-way","3-way","4-way","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeChannelInterLeavePropEnum = append(biosPolicyTypeChannelInterLeavePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateChannelInterLeaveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeChannelInterLeavePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateChannelInterLeave(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelInterLeave) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelInterLeaveEnum("ChannelInterLeave", "body", *m.ChannelInterLeave); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCiscoAdaptiveMemTrainingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCiscoAdaptiveMemTrainingPropEnum = append(biosPolicyTypeCiscoAdaptiveMemTrainingPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCiscoAdaptiveMemTrainingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCiscoAdaptiveMemTrainingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCiscoAdaptiveMemTraining(formats strfmt.Registry) error {

	if swag.IsZero(m.CiscoAdaptiveMemTraining) { // not required
		return nil
	}

	// value enum
	if err := m.validateCiscoAdaptiveMemTrainingEnum("CiscoAdaptiveMemTraining", "body", *m.CiscoAdaptiveMemTraining); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCiscoDebugLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Maximum","Minimum","Normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCiscoDebugLevelPropEnum = append(biosPolicyTypeCiscoDebugLevelPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCiscoDebugLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCiscoDebugLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCiscoDebugLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.CiscoDebugLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateCiscoDebugLevelEnum("CiscoDebugLevel", "body", *m.CiscoDebugLevel); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCiscoOpromLaunchOptimizationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCiscoOpromLaunchOptimizationPropEnum = append(biosPolicyTypeCiscoOpromLaunchOptimizationPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCiscoOpromLaunchOptimizationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCiscoOpromLaunchOptimizationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCiscoOpromLaunchOptimization(formats strfmt.Registry) error {

	if swag.IsZero(m.CiscoOpromLaunchOptimization) { // not required
		return nil
	}

	// value enum
	if err := m.validateCiscoOpromLaunchOptimizationEnum("CiscoOpromLaunchOptimization", "body", *m.CiscoOpromLaunchOptimization); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCkeLowPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","auto","disabled","fast","slow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCkeLowPolicyPropEnum = append(biosPolicyTypeCkeLowPolicyPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCkeLowPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCkeLowPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCkeLowPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.CkeLowPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCkeLowPolicyEnum("CkeLowPolicy", "body", *m.CkeLowPolicy); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeClosedLoopThermThrotlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeClosedLoopThermThrotlPropEnum = append(biosPolicyTypeClosedLoopThermThrotlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateClosedLoopThermThrotlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeClosedLoopThermThrotlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateClosedLoopThermThrotl(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedLoopThermThrotl) { // not required
		return nil
	}

	// value enum
	if err := m.validateClosedLoopThermThrotlEnum("ClosedLoopThermThrotl", "body", *m.ClosedLoopThermThrotl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCmciEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCmciEnablePropEnum = append(biosPolicyTypeCmciEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCmciEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCmciEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCmciEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.CmciEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateCmciEnableEnum("CmciEnable", "body", *m.CmciEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeConfigTdpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeConfigTdpPropEnum = append(biosPolicyTypeConfigTdpPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateConfigTdpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeConfigTdpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateConfigTdp(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigTdp) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigTdpEnum("ConfigTdp", "body", *m.ConfigTdp); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeConsoleRedirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","com-0","com-1","disabled","enabled","serial-port-a"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeConsoleRedirectionPropEnum = append(biosPolicyTypeConsoleRedirectionPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateConsoleRedirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeConsoleRedirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateConsoleRedirection(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsoleRedirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateConsoleRedirectionEnum("ConsoleRedirection", "body", *m.ConsoleRedirection); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCoreMultiProcessingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1","10","11","12","13","14","15","16","17","18","19","2","20","21","22","23","24","25","26","27","28","3","4","5","6","7","8","9","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCoreMultiProcessingPropEnum = append(biosPolicyTypeCoreMultiProcessingPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCoreMultiProcessingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCoreMultiProcessingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCoreMultiProcessing(formats strfmt.Registry) error {

	if swag.IsZero(m.CoreMultiProcessing) { // not required
		return nil
	}

	// value enum
	if err := m.validateCoreMultiProcessingEnum("CoreMultiProcessing", "body", *m.CoreMultiProcessing); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCPUEnergyPerformancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","balanced-energy","balanced-performance","balanced-power","energy-efficient","performance","power"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCPUEnergyPerformancePropEnum = append(biosPolicyTypeCPUEnergyPerformancePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCPUEnergyPerformanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCPUEnergyPerformancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCPUEnergyPerformance(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUEnergyPerformance) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUEnergyPerformanceEnum("CpuEnergyPerformance", "body", *m.CPUEnergyPerformance); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCPUFrequencyFloorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCPUFrequencyFloorPropEnum = append(biosPolicyTypeCPUFrequencyFloorPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCPUFrequencyFloorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCPUFrequencyFloorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCPUFrequencyFloor(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUFrequencyFloor) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUFrequencyFloorEnum("CpuFrequencyFloor", "body", *m.CPUFrequencyFloor); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCPUPerformancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","custom","enterprise","high-throughput","hpc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCPUPerformancePropEnum = append(biosPolicyTypeCPUPerformancePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCPUPerformanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCPUPerformancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCPUPerformance(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUPerformance) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUPerformanceEnum("CpuPerformance", "body", *m.CPUPerformance); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeCPUPowerManagementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","custom","disabled","energy-efficient","performance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeCPUPowerManagementPropEnum = append(biosPolicyTypeCPUPowerManagementPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateCPUPowerManagementEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeCPUPowerManagementPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateCPUPowerManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUPowerManagement) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUPowerManagementEnum("CpuPowerManagement", "body", *m.CPUPowerManagement); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeDcpmmFirmwareDowngradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeDcpmmFirmwareDowngradePropEnum = append(biosPolicyTypeDcpmmFirmwareDowngradePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateDcpmmFirmwareDowngradeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeDcpmmFirmwareDowngradePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateDcpmmFirmwareDowngrade(formats strfmt.Registry) error {

	if swag.IsZero(m.DcpmmFirmwareDowngrade) { // not required
		return nil
	}

	// value enum
	if err := m.validateDcpmmFirmwareDowngradeEnum("DcpmmFirmwareDowngrade", "body", *m.DcpmmFirmwareDowngrade); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeDemandScrubPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeDemandScrubPropEnum = append(biosPolicyTypeDemandScrubPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateDemandScrubEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeDemandScrubPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateDemandScrub(formats strfmt.Registry) error {

	if swag.IsZero(m.DemandScrub) { // not required
		return nil
	}

	// value enum
	if err := m.validateDemandScrubEnum("DemandScrub", "body", *m.DemandScrub); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeDirectCacheAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeDirectCacheAccessPropEnum = append(biosPolicyTypeDirectCacheAccessPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateDirectCacheAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeDirectCacheAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateDirectCacheAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectCacheAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectCacheAccessEnum("DirectCacheAccess", "body", *m.DirectCacheAccess); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeDramClockThrottlingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Balanced","Energy Efficient","Performance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeDramClockThrottlingPropEnum = append(biosPolicyTypeDramClockThrottlingPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateDramClockThrottlingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeDramClockThrottlingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateDramClockThrottling(formats strfmt.Registry) error {

	if swag.IsZero(m.DramClockThrottling) { // not required
		return nil
	}

	// value enum
	if err := m.validateDramClockThrottlingEnum("DramClockThrottling", "body", *m.DramClockThrottling); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeDramRefreshRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1x","2x","3x","4x","Auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeDramRefreshRatePropEnum = append(biosPolicyTypeDramRefreshRatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateDramRefreshRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeDramRefreshRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateDramRefreshRate(formats strfmt.Registry) error {

	if swag.IsZero(m.DramRefreshRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateDramRefreshRateEnum("DramRefreshRate", "body", *m.DramRefreshRate); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeEnergyEfficientTurboPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeEnergyEfficientTurboPropEnum = append(biosPolicyTypeEnergyEfficientTurboPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateEnergyEfficientTurboEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeEnergyEfficientTurboPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateEnergyEfficientTurbo(formats strfmt.Registry) error {

	if swag.IsZero(m.EnergyEfficientTurbo) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnergyEfficientTurboEnum("EnergyEfficientTurbo", "body", *m.EnergyEfficientTurbo); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeEngPerfTuningPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","BIOS","OS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeEngPerfTuningPropEnum = append(biosPolicyTypeEngPerfTuningPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateEngPerfTuningEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeEngPerfTuningPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateEngPerfTuning(formats strfmt.Registry) error {

	if swag.IsZero(m.EngPerfTuning) { // not required
		return nil
	}

	// value enum
	if err := m.validateEngPerfTuningEnum("EngPerfTuning", "body", *m.EngPerfTuning); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeEnhancedIntelSpeedStepTechPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeEnhancedIntelSpeedStepTechPropEnum = append(biosPolicyTypeEnhancedIntelSpeedStepTechPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateEnhancedIntelSpeedStepTechEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeEnhancedIntelSpeedStepTechPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateEnhancedIntelSpeedStepTech(formats strfmt.Registry) error {

	if swag.IsZero(m.EnhancedIntelSpeedStepTech) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnhancedIntelSpeedStepTechEnum("EnhancedIntelSpeedStepTech", "body", *m.EnhancedIntelSpeedStepTech); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeEppProfilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Balanced Performance","Balanced Power","Performance","Power"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeEppProfilePropEnum = append(biosPolicyTypeEppProfilePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateEppProfileEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeEppProfilePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateEppProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.EppProfile) { // not required
		return nil
	}

	// value enum
	if err := m.validateEppProfileEnum("EppProfile", "body", *m.EppProfile); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeExecuteDisableBitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeExecuteDisableBitPropEnum = append(biosPolicyTypeExecuteDisableBitPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateExecuteDisableBitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeExecuteDisableBitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateExecuteDisableBit(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecuteDisableBit) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecuteDisableBitEnum("ExecuteDisableBit", "body", *m.ExecuteDisableBit); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeExtendedApicPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","X2APIC","XAPIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeExtendedApicPropEnum = append(biosPolicyTypeExtendedApicPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateExtendedApicEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeExtendedApicPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateExtendedApic(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtendedApic) { // not required
		return nil
	}

	// value enum
	if err := m.validateExtendedApicEnum("ExtendedApic", "body", *m.ExtendedApic); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeFlowControlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","none","rts-cts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeFlowControlPropEnum = append(biosPolicyTypeFlowControlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateFlowControlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeFlowControlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateFlowControl(formats strfmt.Registry) error {

	if swag.IsZero(m.FlowControl) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowControlEnum("FlowControl", "body", *m.FlowControl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeFrb2enablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeFrb2enablePropEnum = append(biosPolicyTypeFrb2enablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateFrb2enableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeFrb2enablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateFrb2enable(formats strfmt.Registry) error {

	if swag.IsZero(m.Frb2enable) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrb2enableEnum("Frb2enable", "body", *m.Frb2enable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeHardwarePrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeHardwarePrefetchPropEnum = append(biosPolicyTypeHardwarePrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateHardwarePrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeHardwarePrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateHardwarePrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwarePrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateHardwarePrefetchEnum("HardwarePrefetch", "body", *m.HardwarePrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeHwpmEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Disabled","HWPM Native Mode","HWPM OOB Mode","NATIVE MODE","Native Mode with no Legacy","OOB MODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeHwpmEnablePropEnum = append(biosPolicyTypeHwpmEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateHwpmEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeHwpmEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateHwpmEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.HwpmEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateHwpmEnableEnum("HwpmEnable", "body", *m.HwpmEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeImcInterleavePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1-way Interleave","2-way Interleave","Auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeImcInterleavePropEnum = append(biosPolicyTypeImcInterleavePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateImcInterleaveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeImcInterleavePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateImcInterleave(formats strfmt.Registry) error {

	if swag.IsZero(m.ImcInterleave) { // not required
		return nil
	}

	// value enum
	if err := m.validateImcInterleaveEnum("ImcInterleave", "body", *m.ImcInterleave); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelHyperThreadingTechPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelHyperThreadingTechPropEnum = append(biosPolicyTypeIntelHyperThreadingTechPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelHyperThreadingTechEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelHyperThreadingTechPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelHyperThreadingTech(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelHyperThreadingTech) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelHyperThreadingTechEnum("IntelHyperThreadingTech", "body", *m.IntelHyperThreadingTech); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelSpeedSelectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Base","Config 1","Config 2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelSpeedSelectPropEnum = append(biosPolicyTypeIntelSpeedSelectPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelSpeedSelectEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelSpeedSelectPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelSpeedSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelSpeedSelect) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelSpeedSelectEnum("IntelSpeedSelect", "body", *m.IntelSpeedSelect); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelTurboBoostTechPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelTurboBoostTechPropEnum = append(biosPolicyTypeIntelTurboBoostTechPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelTurboBoostTechEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelTurboBoostTechPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelTurboBoostTech(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelTurboBoostTech) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelTurboBoostTechEnum("IntelTurboBoostTech", "body", *m.IntelTurboBoostTech); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVirtualizationTechnologyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVirtualizationTechnologyPropEnum = append(biosPolicyTypeIntelVirtualizationTechnologyPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVirtualizationTechnologyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVirtualizationTechnologyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVirtualizationTechnology(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVirtualizationTechnology) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVirtualizationTechnologyEnum("IntelVirtualizationTechnology", "body", *m.IntelVirtualizationTechnology); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVtForDirectedIoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVtForDirectedIoPropEnum = append(biosPolicyTypeIntelVtForDirectedIoPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVtForDirectedIoEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVtForDirectedIoPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVtForDirectedIo(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVtForDirectedIo) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVtForDirectedIoEnum("IntelVtForDirectedIo", "body", *m.IntelVtForDirectedIo); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVtdCoherencySupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVtdCoherencySupportPropEnum = append(biosPolicyTypeIntelVtdCoherencySupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVtdCoherencySupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVtdCoherencySupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVtdCoherencySupport(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVtdCoherencySupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVtdCoherencySupportEnum("IntelVtdCoherencySupport", "body", *m.IntelVtdCoherencySupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVtdInterruptRemappingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVtdInterruptRemappingPropEnum = append(biosPolicyTypeIntelVtdInterruptRemappingPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVtdInterruptRemappingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVtdInterruptRemappingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVtdInterruptRemapping(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVtdInterruptRemapping) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVtdInterruptRemappingEnum("IntelVtdInterruptRemapping", "body", *m.IntelVtdInterruptRemapping); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVtdPassThroughDmaSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVtdPassThroughDmaSupportPropEnum = append(biosPolicyTypeIntelVtdPassThroughDmaSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVtdPassThroughDmaSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVtdPassThroughDmaSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVtdPassThroughDmaSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVtdPassThroughDmaSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVtdPassThroughDmaSupportEnum("IntelVtdPassThroughDmaSupport", "body", *m.IntelVtdPassThroughDmaSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIntelVtdatsSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIntelVtdatsSupportPropEnum = append(biosPolicyTypeIntelVtdatsSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIntelVtdatsSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIntelVtdatsSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIntelVtdatsSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelVtdatsSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntelVtdatsSupportEnum("IntelVtdatsSupport", "body", *m.IntelVtdatsSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIohErrorEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","No","Yes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIohErrorEnablePropEnum = append(biosPolicyTypeIohErrorEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIohErrorEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIohErrorEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIohErrorEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.IohErrorEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateIohErrorEnableEnum("IohErrorEnable", "body", *m.IohErrorEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIohResourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","IOH0 24k IOH1 40k","IOH0 32k IOH1 32k","IOH0 40k IOH1 24k","IOH0 48k IOH1 16k","IOH0 56k IOH1 8k"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIohResourcePropEnum = append(biosPolicyTypeIohResourcePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIohResourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIohResourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIohResource(formats strfmt.Registry) error {

	if swag.IsZero(m.IohResource) { // not required
		return nil
	}

	// value enum
	if err := m.validateIohResourceEnum("IohResource", "body", *m.IohResource); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIPPrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIPPrefetchPropEnum = append(biosPolicyTypeIPPrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIPPrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIPPrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIPPrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.IPPrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPPrefetchEnum("IpPrefetch", "body", *m.IPPrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeIpv6pxePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeIpv6pxePropEnum = append(biosPolicyTypeIpv6pxePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateIpv6pxeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeIpv6pxePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateIpv6pxe(formats strfmt.Registry) error {

	if swag.IsZero(m.Ipv6pxe) { // not required
		return nil
	}

	// value enum
	if err := m.validateIpv6pxeEnum("Ipv6pxe", "body", *m.Ipv6pxe); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeKtiPrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeKtiPrefetchPropEnum = append(biosPolicyTypeKtiPrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateKtiPrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeKtiPrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateKtiPrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.KtiPrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateKtiPrefetchEnum("KtiPrefetch", "body", *m.KtiPrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLegacyOsRedirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLegacyOsRedirectionPropEnum = append(biosPolicyTypeLegacyOsRedirectionPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLegacyOsRedirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLegacyOsRedirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLegacyOsRedirection(formats strfmt.Registry) error {

	if swag.IsZero(m.LegacyOsRedirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateLegacyOsRedirectionEnum("LegacyOsRedirection", "body", *m.LegacyOsRedirection); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLegacyUsbSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLegacyUsbSupportPropEnum = append(biosPolicyTypeLegacyUsbSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLegacyUsbSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLegacyUsbSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLegacyUsbSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.LegacyUsbSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateLegacyUsbSupportEnum("LegacyUsbSupport", "body", *m.LegacyUsbSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLlcPrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLlcPrefetchPropEnum = append(biosPolicyTypeLlcPrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLlcPrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLlcPrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLlcPrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.LlcPrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateLlcPrefetchEnum("LlcPrefetch", "body", *m.LlcPrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLomPort0statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLomPort0statePropEnum = append(biosPolicyTypeLomPort0statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLomPort0stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLomPort0statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLomPort0state(formats strfmt.Registry) error {

	if swag.IsZero(m.LomPort0state) { // not required
		return nil
	}

	// value enum
	if err := m.validateLomPort0stateEnum("LomPort0state", "body", *m.LomPort0state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLomPort1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLomPort1statePropEnum = append(biosPolicyTypeLomPort1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLomPort1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLomPort1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLomPort1state(formats strfmt.Registry) error {

	if swag.IsZero(m.LomPort1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateLomPort1stateEnum("LomPort1state", "body", *m.LomPort1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLomPort2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLomPort2statePropEnum = append(biosPolicyTypeLomPort2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLomPort2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLomPort2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLomPort2state(formats strfmt.Registry) error {

	if swag.IsZero(m.LomPort2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateLomPort2stateEnum("LomPort2state", "body", *m.LomPort2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLomPort3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLomPort3statePropEnum = append(biosPolicyTypeLomPort3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLomPort3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLomPort3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLomPort3state(formats strfmt.Registry) error {

	if swag.IsZero(m.LomPort3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateLomPort3stateEnum("LomPort3state", "body", *m.LomPort3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLomPortsAllStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLomPortsAllStatePropEnum = append(biosPolicyTypeLomPortsAllStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLomPortsAllStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLomPortsAllStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLomPortsAllState(formats strfmt.Registry) error {

	if swag.IsZero(m.LomPortsAllState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLomPortsAllStateEnum("LomPortsAllState", "body", *m.LomPortsAllState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeLvDdrModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","auto","performance-mode","power-saving-mode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeLvDdrModePropEnum = append(biosPolicyTypeLvDdrModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateLvDdrModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeLvDdrModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateLvDdrMode(formats strfmt.Registry) error {

	if swag.IsZero(m.LvDdrMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLvDdrModeEnum("LvDdrMode", "body", *m.LvDdrMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeMakeDeviceNonBootablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeMakeDeviceNonBootablePropEnum = append(biosPolicyTypeMakeDeviceNonBootablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateMakeDeviceNonBootableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeMakeDeviceNonBootablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateMakeDeviceNonBootable(formats strfmt.Registry) error {

	if swag.IsZero(m.MakeDeviceNonBootable) { // not required
		return nil
	}

	// value enum
	if err := m.validateMakeDeviceNonBootableEnum("MakeDeviceNonBootable", "body", *m.MakeDeviceNonBootable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeMemoryInterLeavePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1 Way Node Interleave","2 Way Node Interleave","4 Way Node Interleave","8 Way Node Interleave","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeMemoryInterLeavePropEnum = append(biosPolicyTypeMemoryInterLeavePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateMemoryInterLeaveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeMemoryInterLeavePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateMemoryInterLeave(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryInterLeave) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemoryInterLeaveEnum("MemoryInterLeave", "body", *m.MemoryInterLeave); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeMemoryMappedIoAbove4gbPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeMemoryMappedIoAbove4gbPropEnum = append(biosPolicyTypeMemoryMappedIoAbove4gbPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateMemoryMappedIoAbove4gbEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeMemoryMappedIoAbove4gbPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateMemoryMappedIoAbove4gb(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryMappedIoAbove4gb) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemoryMappedIoAbove4gbEnum("MemoryMappedIoAbove4gb", "body", *m.MemoryMappedIoAbove4gb); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeMirroringModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","inter-socket","intra-socket"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeMirroringModePropEnum = append(biosPolicyTypeMirroringModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateMirroringModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeMirroringModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateMirroringMode(formats strfmt.Registry) error {

	if swag.IsZero(m.MirroringMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateMirroringModeEnum("MirroringMode", "body", *m.MirroringMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeMmcfgBasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1 GB","2 GB","2.5 GB","3 GB","Auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeMmcfgBasePropEnum = append(biosPolicyTypeMmcfgBasePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateMmcfgBaseEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeMmcfgBasePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateMmcfgBase(formats strfmt.Registry) error {

	if swag.IsZero(m.MmcfgBase) { // not required
		return nil
	}

	// value enum
	if err := m.validateMmcfgBaseEnum("MmcfgBase", "body", *m.MmcfgBase); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeNumaOptimizedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeNumaOptimizedPropEnum = append(biosPolicyTypeNumaOptimizedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateNumaOptimizedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeNumaOptimizedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateNumaOptimized(formats strfmt.Registry) error {

	if swag.IsZero(m.NumaOptimized) { // not required
		return nil
	}

	// value enum
	if err := m.validateNumaOptimizedEnum("NumaOptimized", "body", *m.NumaOptimized); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOnboard10gbitLomPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOnboard10gbitLomPropEnum = append(biosPolicyTypeOnboard10gbitLomPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOnboard10gbitLomEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOnboard10gbitLomPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOnboard10gbitLom(formats strfmt.Registry) error {

	if swag.IsZero(m.Onboard10gbitLom) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnboard10gbitLomEnum("Onboard10gbitLom", "body", *m.Onboard10gbitLom); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOnboardGbitLomPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOnboardGbitLomPropEnum = append(biosPolicyTypeOnboardGbitLomPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOnboardGbitLomEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOnboardGbitLomPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOnboardGbitLom(formats strfmt.Registry) error {

	if swag.IsZero(m.OnboardGbitLom) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnboardGbitLomEnum("OnboardGbitLom", "body", *m.OnboardGbitLom); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOnboardScuStorageSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOnboardScuStorageSupportPropEnum = append(biosPolicyTypeOnboardScuStorageSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOnboardScuStorageSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOnboardScuStorageSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOnboardScuStorageSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.OnboardScuStorageSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnboardScuStorageSupportEnum("OnboardScuStorageSupport", "body", *m.OnboardScuStorageSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOnboardScuStorageSwStackPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Intel RSTe","LSI SW RAID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOnboardScuStorageSwStackPropEnum = append(biosPolicyTypeOnboardScuStorageSwStackPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOnboardScuStorageSwStackEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOnboardScuStorageSwStackPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOnboardScuStorageSwStack(formats strfmt.Registry) error {

	if swag.IsZero(m.OnboardScuStorageSwStack) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnboardScuStorageSwStackEnum("OnboardScuStorageSwStack", "body", *m.OnboardScuStorageSwStack); err != nil {
		return err
	}

	return nil
}

func (m *BiosPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var biosPolicyTypeOsBootWatchdogTimerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOsBootWatchdogTimerPropEnum = append(biosPolicyTypeOsBootWatchdogTimerPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOsBootWatchdogTimerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOsBootWatchdogTimerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOsBootWatchdogTimer(formats strfmt.Registry) error {

	if swag.IsZero(m.OsBootWatchdogTimer) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsBootWatchdogTimerEnum("OsBootWatchdogTimer", "body", *m.OsBootWatchdogTimer); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOsBootWatchdogTimerPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","do-nothing","power-off","reset"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOsBootWatchdogTimerPolicyPropEnum = append(biosPolicyTypeOsBootWatchdogTimerPolicyPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOsBootWatchdogTimerPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOsBootWatchdogTimerPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOsBootWatchdogTimerPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.OsBootWatchdogTimerPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsBootWatchdogTimerPolicyEnum("OsBootWatchdogTimerPolicy", "body", *m.OsBootWatchdogTimerPolicy); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOsBootWatchdogTimerTimeoutPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","10-minutes","15-minutes","20-minutes","5-minutes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOsBootWatchdogTimerTimeoutPropEnum = append(biosPolicyTypeOsBootWatchdogTimerTimeoutPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOsBootWatchdogTimerTimeoutEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOsBootWatchdogTimerTimeoutPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOsBootWatchdogTimerTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.OsBootWatchdogTimerTimeout) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsBootWatchdogTimerTimeoutEnum("OsBootWatchdogTimerTimeout", "body", *m.OsBootWatchdogTimerTimeout); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeOutOfBandMgmtPortPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeOutOfBandMgmtPortPropEnum = append(biosPolicyTypeOutOfBandMgmtPortPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateOutOfBandMgmtPortEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeOutOfBandMgmtPortPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateOutOfBandMgmtPort(formats strfmt.Registry) error {

	if swag.IsZero(m.OutOfBandMgmtPort) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutOfBandMgmtPortEnum("OutOfBandMgmtPort", "body", *m.OutOfBandMgmtPort); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePackageCstateLimitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","C0 C1 State","C0/C1","C2","C6 Non Retention","C6 Retention","No Limit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePackageCstateLimitPropEnum = append(biosPolicyTypePackageCstateLimitPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePackageCstateLimitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePackageCstateLimitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePackageCstateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.PackageCstateLimit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePackageCstateLimitEnum("PackageCstateLimit", "body", *m.PackageCstateLimit); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePatrolScrubPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePatrolScrubPropEnum = append(biosPolicyTypePatrolScrubPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePatrolScrubEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePatrolScrubPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePatrolScrub(formats strfmt.Registry) error {

	if swag.IsZero(m.PatrolScrub) { // not required
		return nil
	}

	// value enum
	if err := m.validatePatrolScrubEnum("PatrolScrub", "body", *m.PatrolScrub); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePatrolScrubDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePatrolScrubDurationPropEnum = append(biosPolicyTypePatrolScrubDurationPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePatrolScrubDurationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePatrolScrubDurationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePatrolScrubDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.PatrolScrubDuration) { // not required
		return nil
	}

	// value enum
	if err := m.validatePatrolScrubDurationEnum("PatrolScrubDuration", "body", *m.PatrolScrubDuration); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePcIeSsdHotPlugSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePcIeSsdHotPlugSupportPropEnum = append(biosPolicyTypePcIeSsdHotPlugSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePcIeSsdHotPlugSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePcIeSsdHotPlugSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePcIeSsdHotPlugSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.PcIeSsdHotPlugSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validatePcIeSsdHotPlugSupportEnum("PcIeSsdHotPlugSupport", "body", *m.PcIeSsdHotPlugSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePchUsb30modePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePchUsb30modePropEnum = append(biosPolicyTypePchUsb30modePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePchUsb30modeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePchUsb30modePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePchUsb30mode(formats strfmt.Registry) error {

	if swag.IsZero(m.PchUsb30mode) { // not required
		return nil
	}

	// value enum
	if err := m.validatePchUsb30modeEnum("PchUsb30mode", "body", *m.PchUsb30mode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePciOptionRoMsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePciOptionRoMsPropEnum = append(biosPolicyTypePciOptionRoMsPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePciOptionRoMsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePciOptionRoMsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePciOptionRoMs(formats strfmt.Registry) error {

	if swag.IsZero(m.PciOptionRoMs) { // not required
		return nil
	}

	// value enum
	if err := m.validatePciOptionRoMsEnum("PciOptionRoMs", "body", *m.PciOptionRoMs); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePciRomClpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePciRomClpPropEnum = append(biosPolicyTypePciRomClpPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePciRomClpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePciRomClpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePciRomClp(formats strfmt.Registry) error {

	if swag.IsZero(m.PciRomClp) { // not required
		return nil
	}

	// value enum
	if err := m.validatePciRomClpEnum("PciRomClp", "body", *m.PciRomClp); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePopSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePopSupportPropEnum = append(biosPolicyTypePopSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePopSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePopSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePopSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.PopSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validatePopSupportEnum("PopSupport", "body", *m.PopSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePostErrorPausePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePostErrorPausePropEnum = append(biosPolicyTypePostErrorPausePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePostErrorPauseEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePostErrorPausePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePostErrorPause(formats strfmt.Registry) error {

	if swag.IsZero(m.PostErrorPause) { // not required
		return nil
	}

	// value enum
	if err := m.validatePostErrorPauseEnum("PostErrorPause", "body", *m.PostErrorPause); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeProcessorC1ePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeProcessorC1ePropEnum = append(biosPolicyTypeProcessorC1ePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateProcessorC1eEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeProcessorC1ePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateProcessorC1e(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorC1e) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorC1eEnum("ProcessorC1e", "body", *m.ProcessorC1e); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeProcessorC3reportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeProcessorC3reportPropEnum = append(biosPolicyTypeProcessorC3reportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateProcessorC3reportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeProcessorC3reportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateProcessorC3report(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorC3report) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorC3reportEnum("ProcessorC3report", "body", *m.ProcessorC3report); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeProcessorC6reportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeProcessorC6reportPropEnum = append(biosPolicyTypeProcessorC6reportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateProcessorC6reportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeProcessorC6reportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateProcessorC6report(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorC6report) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorC6reportEnum("ProcessorC6report", "body", *m.ProcessorC6report); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeProcessorCstatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeProcessorCstatePropEnum = append(biosPolicyTypeProcessorCstatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateProcessorCstateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeProcessorCstatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateProcessorCstate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorCstate) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorCstateEnum("ProcessorCstate", "body", *m.ProcessorCstate); err != nil {
		return err
	}

	return nil
}

func (m *BiosPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var biosPolicyTypePsataPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","AHCI","Disabled","LSI SW RAID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePsataPropEnum = append(biosPolicyTypePsataPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePsataEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePsataPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePsata(formats strfmt.Registry) error {

	if swag.IsZero(m.Psata) { // not required
		return nil
	}

	// value enum
	if err := m.validatePsataEnum("Psata", "body", *m.Psata); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePstateCoordTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","HW ALL","SW ALL","SW ANY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePstateCoordTypePropEnum = append(biosPolicyTypePstateCoordTypePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePstateCoordTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePstateCoordTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePstateCoordType(formats strfmt.Registry) error {

	if swag.IsZero(m.PstateCoordType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePstateCoordTypeEnum("PstateCoordType", "body", *m.PstateCoordType); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePuttyKeyPadPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","ESCN","LINUX","SCO","VT100","VT400","XTERMR6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePuttyKeyPadPropEnum = append(biosPolicyTypePuttyKeyPadPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePuttyKeyPadEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePuttyKeyPadPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePuttyKeyPad(formats strfmt.Registry) error {

	if swag.IsZero(m.PuttyKeyPad) { // not required
		return nil
	}

	// value enum
	if err := m.validatePuttyKeyPadEnum("PuttyKeyPad", "body", *m.PuttyKeyPad); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypePwrPerfTuningPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","bios","os"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypePwrPerfTuningPropEnum = append(biosPolicyTypePwrPerfTuningPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validatePwrPerfTuningEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypePwrPerfTuningPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validatePwrPerfTuning(formats strfmt.Registry) error {

	if swag.IsZero(m.PwrPerfTuning) { // not required
		return nil
	}

	// value enum
	if err := m.validatePwrPerfTuningEnum("PwrPerfTuning", "body", *m.PwrPerfTuning); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeQpiLinkFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","6.4-gt/s","7.2-gt/s","8.0-gt/s","9.6-gt/s","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeQpiLinkFrequencyPropEnum = append(biosPolicyTypeQpiLinkFrequencyPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateQpiLinkFrequencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeQpiLinkFrequencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateQpiLinkFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.QpiLinkFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateQpiLinkFrequencyEnum("QpiLinkFrequency", "body", *m.QpiLinkFrequency); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeQpiSnoopModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","auto","cluster-on-die","early-snoop","home-directory-snoop","home-directory-snoop-with-osb","home-snoop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeQpiSnoopModePropEnum = append(biosPolicyTypeQpiSnoopModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateQpiSnoopModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeQpiSnoopModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateQpiSnoopMode(formats strfmt.Registry) error {

	if swag.IsZero(m.QpiSnoopMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateQpiSnoopModeEnum("QpiSnoopMode", "body", *m.QpiSnoopMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeRankInterLeavePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","1-way","2-way","4-way","8-way","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeRankInterLeavePropEnum = append(biosPolicyTypeRankInterLeavePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateRankInterLeaveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeRankInterLeavePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateRankInterLeave(formats strfmt.Registry) error {

	if swag.IsZero(m.RankInterLeave) { // not required
		return nil
	}

	// value enum
	if err := m.validateRankInterLeaveEnum("RankInterLeave", "body", *m.RankInterLeave); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeRedirectionAfterPostPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Always Enable","Bootloader"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeRedirectionAfterPostPropEnum = append(biosPolicyTypeRedirectionAfterPostPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateRedirectionAfterPostEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeRedirectionAfterPostPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateRedirectionAfterPost(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectionAfterPost) { // not required
		return nil
	}

	// value enum
	if err := m.validateRedirectionAfterPostEnum("RedirectionAfterPost", "body", *m.RedirectionAfterPost); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSataModeSelectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","AHCI","Disabled","LSI SW RAID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSataModeSelectPropEnum = append(biosPolicyTypeSataModeSelectPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSataModeSelectEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSataModeSelectPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSataModeSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.SataModeSelect) { // not required
		return nil
	}

	// value enum
	if err := m.validateSataModeSelectEnum("SataModeSelect", "body", *m.SataModeSelect); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSelectMemoryRasConfigurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","adddc-sparing","lockstep","maximum-performance","mirror-mode-1lm","mirroring","sparing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSelectMemoryRasConfigurationPropEnum = append(biosPolicyTypeSelectMemoryRasConfigurationPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSelectMemoryRasConfigurationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSelectMemoryRasConfigurationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSelectMemoryRasConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectMemoryRasConfiguration) { // not required
		return nil
	}

	// value enum
	if err := m.validateSelectMemoryRasConfigurationEnum("SelectMemoryRasConfiguration", "body", *m.SelectMemoryRasConfiguration); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSerialPortAenablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSerialPortAenablePropEnum = append(biosPolicyTypeSerialPortAenablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSerialPortAenableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSerialPortAenablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSerialPortAenable(formats strfmt.Registry) error {

	if swag.IsZero(m.SerialPortAenable) { // not required
		return nil
	}

	// value enum
	if err := m.validateSerialPortAenableEnum("SerialPortAenable", "body", *m.SerialPortAenable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSinglePctlEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","No","Yes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSinglePctlEnablePropEnum = append(biosPolicyTypeSinglePctlEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSinglePctlEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSinglePctlEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSinglePctlEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.SinglePctlEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateSinglePctlEnableEnum("SinglePctlEnable", "body", *m.SinglePctlEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot10linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot10linkSpeedPropEnum = append(biosPolicyTypeSlot10linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot10linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot10linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot10linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot10linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot10linkSpeedEnum("Slot10linkSpeed", "body", *m.Slot10linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot10statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot10statePropEnum = append(biosPolicyTypeSlot10statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot10stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot10statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot10state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot10state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot10stateEnum("Slot10state", "body", *m.Slot10state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot11linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot11linkSpeedPropEnum = append(biosPolicyTypeSlot11linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot11linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot11linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot11linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot11linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot11linkSpeedEnum("Slot11linkSpeed", "body", *m.Slot11linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot11statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot11statePropEnum = append(biosPolicyTypeSlot11statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot11stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot11statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot11state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot11state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot11stateEnum("Slot11state", "body", *m.Slot11state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot12linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot12linkSpeedPropEnum = append(biosPolicyTypeSlot12linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot12linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot12linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot12linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot12linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot12linkSpeedEnum("Slot12linkSpeed", "body", *m.Slot12linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot12statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot12statePropEnum = append(biosPolicyTypeSlot12statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot12stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot12statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot12state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot12state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot12stateEnum("Slot12state", "body", *m.Slot12state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot13statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot13statePropEnum = append(biosPolicyTypeSlot13statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot13stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot13statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot13state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot13state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot13stateEnum("Slot13state", "body", *m.Slot13state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot14statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot14statePropEnum = append(biosPolicyTypeSlot14statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot14stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot14statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot14state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot14state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot14stateEnum("Slot14state", "body", *m.Slot14state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot1linkSpeedPropEnum = append(biosPolicyTypeSlot1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot1linkSpeedEnum("Slot1linkSpeed", "body", *m.Slot1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot1statePropEnum = append(biosPolicyTypeSlot1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot1state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot1stateEnum("Slot1state", "body", *m.Slot1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot2linkSpeedPropEnum = append(biosPolicyTypeSlot2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot2linkSpeedEnum("Slot2linkSpeed", "body", *m.Slot2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot2statePropEnum = append(biosPolicyTypeSlot2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot2state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot2stateEnum("Slot2state", "body", *m.Slot2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot3linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot3linkSpeedPropEnum = append(biosPolicyTypeSlot3linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot3linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot3linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot3linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot3linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot3linkSpeedEnum("Slot3linkSpeed", "body", *m.Slot3linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot3statePropEnum = append(biosPolicyTypeSlot3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot3state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot3stateEnum("Slot3state", "body", *m.Slot3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot4linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot4linkSpeedPropEnum = append(biosPolicyTypeSlot4linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot4linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot4linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot4linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot4linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot4linkSpeedEnum("Slot4linkSpeed", "body", *m.Slot4linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot4statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot4statePropEnum = append(biosPolicyTypeSlot4statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot4stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot4statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot4state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot4state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot4stateEnum("Slot4state", "body", *m.Slot4state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot5linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot5linkSpeedPropEnum = append(biosPolicyTypeSlot5linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot5linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot5linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot5linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot5linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot5linkSpeedEnum("Slot5linkSpeed", "body", *m.Slot5linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot5statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot5statePropEnum = append(biosPolicyTypeSlot5statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot5stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot5statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot5state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot5state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot5stateEnum("Slot5state", "body", *m.Slot5state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot6linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot6linkSpeedPropEnum = append(biosPolicyTypeSlot6linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot6linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot6linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot6linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot6linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot6linkSpeedEnum("Slot6linkSpeed", "body", *m.Slot6linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot6statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot6statePropEnum = append(biosPolicyTypeSlot6statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot6stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot6statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot6state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot6state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot6stateEnum("Slot6state", "body", *m.Slot6state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot7linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot7linkSpeedPropEnum = append(biosPolicyTypeSlot7linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot7linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot7linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot7linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot7linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot7linkSpeedEnum("Slot7linkSpeed", "body", *m.Slot7linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot7statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot7statePropEnum = append(biosPolicyTypeSlot7statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot7stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot7statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot7state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot7state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot7stateEnum("Slot7state", "body", *m.Slot7state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot8linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot8linkSpeedPropEnum = append(biosPolicyTypeSlot8linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot8linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot8linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot8linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot8linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot8linkSpeedEnum("Slot8linkSpeed", "body", *m.Slot8linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot8statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot8statePropEnum = append(biosPolicyTypeSlot8statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot8stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot8statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot8state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot8state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot8stateEnum("Slot8state", "body", *m.Slot8state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot9linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot9linkSpeedPropEnum = append(biosPolicyTypeSlot9linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot9linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot9linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot9linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot9linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot9linkSpeedEnum("Slot9linkSpeed", "body", *m.Slot9linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlot9statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlot9statePropEnum = append(biosPolicyTypeSlot9statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlot9stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlot9statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlot9state(formats strfmt.Registry) error {

	if swag.IsZero(m.Slot9state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlot9stateEnum("Slot9state", "body", *m.Slot9state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotFlomLinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotFlomLinkSpeedPropEnum = append(biosPolicyTypeSlotFlomLinkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotFlomLinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotFlomLinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotFlomLinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotFlomLinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotFlomLinkSpeedEnum("SlotFlomLinkSpeed", "body", *m.SlotFlomLinkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotFrontNvme1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotFrontNvme1linkSpeedPropEnum = append(biosPolicyTypeSlotFrontNvme1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotFrontNvme1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotFrontNvme1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotFrontNvme1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotFrontNvme1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotFrontNvme1linkSpeedEnum("SlotFrontNvme1linkSpeed", "body", *m.SlotFrontNvme1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotFrontNvme2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotFrontNvme2linkSpeedPropEnum = append(biosPolicyTypeSlotFrontNvme2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotFrontNvme2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotFrontNvme2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotFrontNvme2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotFrontNvme2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotFrontNvme2linkSpeedEnum("SlotFrontNvme2linkSpeed", "body", *m.SlotFrontNvme2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotFrontSlot5linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotFrontSlot5linkSpeedPropEnum = append(biosPolicyTypeSlotFrontSlot5linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotFrontSlot5linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotFrontSlot5linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotFrontSlot5linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotFrontSlot5linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotFrontSlot5linkSpeedEnum("SlotFrontSlot5linkSpeed", "body", *m.SlotFrontSlot5linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotFrontSlot6linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotFrontSlot6linkSpeedPropEnum = append(biosPolicyTypeSlotFrontSlot6linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotFrontSlot6linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotFrontSlot6linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotFrontSlot6linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotFrontSlot6linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotFrontSlot6linkSpeedEnum("SlotFrontSlot6linkSpeed", "body", *m.SlotFrontSlot6linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu1statePropEnum = append(biosPolicyTypeSlotGpu1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu1state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu1stateEnum("SlotGpu1state", "body", *m.SlotGpu1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu2statePropEnum = append(biosPolicyTypeSlotGpu2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu2state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu2stateEnum("SlotGpu2state", "body", *m.SlotGpu2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu3statePropEnum = append(biosPolicyTypeSlotGpu3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu3state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu3stateEnum("SlotGpu3state", "body", *m.SlotGpu3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu4statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu4statePropEnum = append(biosPolicyTypeSlotGpu4statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu4stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu4statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu4state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu4state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu4stateEnum("SlotGpu4state", "body", *m.SlotGpu4state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu5statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu5statePropEnum = append(biosPolicyTypeSlotGpu5statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu5stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu5statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu5state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu5state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu5stateEnum("SlotGpu5state", "body", *m.SlotGpu5state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu6statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu6statePropEnum = append(biosPolicyTypeSlotGpu6statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu6stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu6statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu6state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu6state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu6stateEnum("SlotGpu6state", "body", *m.SlotGpu6state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu7statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu7statePropEnum = append(biosPolicyTypeSlotGpu7statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu7stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu7statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu7state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu7state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu7stateEnum("SlotGpu7state", "body", *m.SlotGpu7state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotGpu8statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotGpu8statePropEnum = append(biosPolicyTypeSlotGpu8statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotGpu8stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotGpu8statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotGpu8state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotGpu8state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotGpu8stateEnum("SlotGpu8state", "body", *m.SlotGpu8state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotHbaLinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotHbaLinkSpeedPropEnum = append(biosPolicyTypeSlotHbaLinkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotHbaLinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotHbaLinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotHbaLinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotHbaLinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotHbaLinkSpeedEnum("SlotHbaLinkSpeed", "body", *m.SlotHbaLinkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotHbaStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotHbaStatePropEnum = append(biosPolicyTypeSlotHbaStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotHbaStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotHbaStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotHbaState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotHbaState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotHbaStateEnum("SlotHbaState", "body", *m.SlotHbaState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotLom1linkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotLom1linkPropEnum = append(biosPolicyTypeSlotLom1linkPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotLom1linkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotLom1linkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotLom1link(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotLom1link) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotLom1linkEnum("SlotLom1link", "body", *m.SlotLom1link); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotLom2linkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotLom2linkPropEnum = append(biosPolicyTypeSlotLom2linkPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotLom2linkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotLom2linkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotLom2link(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotLom2link) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotLom2linkEnum("SlotLom2link", "body", *m.SlotLom2link); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotMezzStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotMezzStatePropEnum = append(biosPolicyTypeSlotMezzStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotMezzStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotMezzStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotMezzState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotMezzState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotMezzStateEnum("SlotMezzState", "body", *m.SlotMezzState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotMlomLinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotMlomLinkSpeedPropEnum = append(biosPolicyTypeSlotMlomLinkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotMlomLinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotMlomLinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotMlomLinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotMlomLinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotMlomLinkSpeedEnum("SlotMlomLinkSpeed", "body", *m.SlotMlomLinkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotMlomStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotMlomStatePropEnum = append(biosPolicyTypeSlotMlomStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotMlomStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotMlomStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotMlomState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotMlomState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotMlomStateEnum("SlotMlomState", "body", *m.SlotMlomState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotMraidLinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotMraidLinkSpeedPropEnum = append(biosPolicyTypeSlotMraidLinkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotMraidLinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotMraidLinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotMraidLinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotMraidLinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotMraidLinkSpeedEnum("SlotMraidLinkSpeed", "body", *m.SlotMraidLinkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotMraidStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotMraidStatePropEnum = append(biosPolicyTypeSlotMraidStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotMraidStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotMraidStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotMraidState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotMraidState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotMraidStateEnum("SlotMraidState", "body", *m.SlotMraidState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN10statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN10statePropEnum = append(biosPolicyTypeSlotN10statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN10stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN10statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN10state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN10state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN10stateEnum("SlotN10state", "body", *m.SlotN10state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN11statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN11statePropEnum = append(biosPolicyTypeSlotN11statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN11stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN11statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN11state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN11state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN11stateEnum("SlotN11state", "body", *m.SlotN11state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN12statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN12statePropEnum = append(biosPolicyTypeSlotN12statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN12stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN12statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN12state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN12state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN12stateEnum("SlotN12state", "body", *m.SlotN12state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN13statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN13statePropEnum = append(biosPolicyTypeSlotN13statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN13stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN13statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN13state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN13state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN13stateEnum("SlotN13state", "body", *m.SlotN13state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN14statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN14statePropEnum = append(biosPolicyTypeSlotN14statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN14stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN14statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN14state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN14state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN14stateEnum("SlotN14state", "body", *m.SlotN14state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN15statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN15statePropEnum = append(biosPolicyTypeSlotN15statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN15stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN15statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN15state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN15state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN15stateEnum("SlotN15state", "body", *m.SlotN15state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN16statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN16statePropEnum = append(biosPolicyTypeSlotN16statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN16stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN16statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN16state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN16state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN16stateEnum("SlotN16state", "body", *m.SlotN16state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN17statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN17statePropEnum = append(biosPolicyTypeSlotN17statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN17stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN17statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN17state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN17state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN17stateEnum("SlotN17state", "body", *m.SlotN17state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN18statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN18statePropEnum = append(biosPolicyTypeSlotN18statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN18stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN18statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN18state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN18state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN18stateEnum("SlotN18state", "body", *m.SlotN18state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN19statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN19statePropEnum = append(biosPolicyTypeSlotN19statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN19stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN19statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN19state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN19state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN19stateEnum("SlotN19state", "body", *m.SlotN19state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN1statePropEnum = append(biosPolicyTypeSlotN1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN1state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN1stateEnum("SlotN1state", "body", *m.SlotN1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN20statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN20statePropEnum = append(biosPolicyTypeSlotN20statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN20stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN20statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN20state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN20state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN20stateEnum("SlotN20state", "body", *m.SlotN20state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN21statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN21statePropEnum = append(biosPolicyTypeSlotN21statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN21stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN21statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN21state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN21state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN21stateEnum("SlotN21state", "body", *m.SlotN21state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN22statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN22statePropEnum = append(biosPolicyTypeSlotN22statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN22stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN22statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN22state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN22state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN22stateEnum("SlotN22state", "body", *m.SlotN22state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN23statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN23statePropEnum = append(biosPolicyTypeSlotN23statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN23stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN23statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN23state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN23state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN23stateEnum("SlotN23state", "body", *m.SlotN23state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN24statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN24statePropEnum = append(biosPolicyTypeSlotN24statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN24stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN24statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN24state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN24state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN24stateEnum("SlotN24state", "body", *m.SlotN24state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN2statePropEnum = append(biosPolicyTypeSlotN2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN2state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN2stateEnum("SlotN2state", "body", *m.SlotN2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN3statePropEnum = append(biosPolicyTypeSlotN3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN3state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN3stateEnum("SlotN3state", "body", *m.SlotN3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN4statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN4statePropEnum = append(biosPolicyTypeSlotN4statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN4stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN4statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN4state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN4state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN4stateEnum("SlotN4state", "body", *m.SlotN4state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN5statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN5statePropEnum = append(biosPolicyTypeSlotN5statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN5stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN5statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN5state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN5state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN5stateEnum("SlotN5state", "body", *m.SlotN5state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN6statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN6statePropEnum = append(biosPolicyTypeSlotN6statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN6stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN6statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN6state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN6state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN6stateEnum("SlotN6state", "body", *m.SlotN6state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN7statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN7statePropEnum = append(biosPolicyTypeSlotN7statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN7stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN7statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN7state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN7state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN7stateEnum("SlotN7state", "body", *m.SlotN7state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN8statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN8statePropEnum = append(biosPolicyTypeSlotN8statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN8stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN8statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN8state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN8state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN8stateEnum("SlotN8state", "body", *m.SlotN8state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotN9statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotN9statePropEnum = append(biosPolicyTypeSlotN9statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotN9stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotN9statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotN9state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotN9state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotN9stateEnum("SlotN9state", "body", *m.SlotN9state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRaidLinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRaidLinkSpeedPropEnum = append(biosPolicyTypeSlotRaidLinkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRaidLinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRaidLinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRaidLinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRaidLinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRaidLinkSpeedEnum("SlotRaidLinkSpeed", "body", *m.SlotRaidLinkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRaidStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRaidStatePropEnum = append(biosPolicyTypeSlotRaidStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRaidStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRaidStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRaidState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRaidState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRaidStateEnum("SlotRaidState", "body", *m.SlotRaidState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme1linkSpeedPropEnum = append(biosPolicyTypeSlotRearNvme1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme1linkSpeedEnum("SlotRearNvme1linkSpeed", "body", *m.SlotRearNvme1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme1statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme1statePropEnum = append(biosPolicyTypeSlotRearNvme1statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme1stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme1statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme1state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme1state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme1stateEnum("SlotRearNvme1state", "body", *m.SlotRearNvme1state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme2linkSpeedPropEnum = append(biosPolicyTypeSlotRearNvme2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme2linkSpeedEnum("SlotRearNvme2linkSpeed", "body", *m.SlotRearNvme2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme2statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme2statePropEnum = append(biosPolicyTypeSlotRearNvme2statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme2stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme2statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme2state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme2state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme2stateEnum("SlotRearNvme2state", "body", *m.SlotRearNvme2state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme3statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme3statePropEnum = append(biosPolicyTypeSlotRearNvme3statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme3stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme3statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme3state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme3state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme3stateEnum("SlotRearNvme3state", "body", *m.SlotRearNvme3state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme4statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme4statePropEnum = append(biosPolicyTypeSlotRearNvme4statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme4stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme4statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme4state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme4state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme4stateEnum("SlotRearNvme4state", "body", *m.SlotRearNvme4state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme5statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme5statePropEnum = append(biosPolicyTypeSlotRearNvme5statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme5stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme5statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme5state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme5state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme5stateEnum("SlotRearNvme5state", "body", *m.SlotRearNvme5state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme6statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme6statePropEnum = append(biosPolicyTypeSlotRearNvme6statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme6stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme6statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme6state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme6state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme6stateEnum("SlotRearNvme6state", "body", *m.SlotRearNvme6state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme7statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme7statePropEnum = append(biosPolicyTypeSlotRearNvme7statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme7stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme7statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme7state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme7state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme7stateEnum("SlotRearNvme7state", "body", *m.SlotRearNvme7state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRearNvme8statePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRearNvme8statePropEnum = append(biosPolicyTypeSlotRearNvme8statePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRearNvme8stateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRearNvme8statePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRearNvme8state(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRearNvme8state) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRearNvme8stateEnum("SlotRearNvme8state", "body", *m.SlotRearNvme8state); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser1linkSpeedPropEnum = append(biosPolicyTypeSlotRiser1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser1linkSpeedEnum("SlotRiser1linkSpeed", "body", *m.SlotRiser1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser1slot1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser1slot1linkSpeedPropEnum = append(biosPolicyTypeSlotRiser1slot1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser1slot1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser1slot1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser1slot1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser1slot1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser1slot1linkSpeedEnum("SlotRiser1slot1linkSpeed", "body", *m.SlotRiser1slot1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser1slot2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser1slot2linkSpeedPropEnum = append(biosPolicyTypeSlotRiser1slot2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser1slot2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser1slot2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser1slot2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser1slot2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser1slot2linkSpeedEnum("SlotRiser1slot2linkSpeed", "body", *m.SlotRiser1slot2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser1slot3linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser1slot3linkSpeedPropEnum = append(biosPolicyTypeSlotRiser1slot3linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser1slot3linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser1slot3linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser1slot3linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser1slot3linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser1slot3linkSpeedEnum("SlotRiser1slot3linkSpeed", "body", *m.SlotRiser1slot3linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser2linkSpeedPropEnum = append(biosPolicyTypeSlotRiser2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser2linkSpeedEnum("SlotRiser2linkSpeed", "body", *m.SlotRiser2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser2slot4linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser2slot4linkSpeedPropEnum = append(biosPolicyTypeSlotRiser2slot4linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser2slot4linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser2slot4linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser2slot4linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser2slot4linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser2slot4linkSpeedEnum("SlotRiser2slot4linkSpeed", "body", *m.SlotRiser2slot4linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser2slot5linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser2slot5linkSpeedPropEnum = append(biosPolicyTypeSlotRiser2slot5linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser2slot5linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser2slot5linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser2slot5linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser2slot5linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser2slot5linkSpeedEnum("SlotRiser2slot5linkSpeed", "body", *m.SlotRiser2slot5linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotRiser2slot6linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotRiser2slot6linkSpeedPropEnum = append(biosPolicyTypeSlotRiser2slot6linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotRiser2slot6linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotRiser2slot6linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotRiser2slot6linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotRiser2slot6linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotRiser2slot6linkSpeedEnum("SlotRiser2slot6linkSpeed", "body", *m.SlotRiser2slot6linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotSasStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","disabled","enabled","Legacy Only","UEFI Only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotSasStatePropEnum = append(biosPolicyTypeSlotSasStatePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotSasStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotSasStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotSasState(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotSasState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotSasStateEnum("SlotSasState", "body", *m.SlotSasState); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotSsdSlot1linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotSsdSlot1linkSpeedPropEnum = append(biosPolicyTypeSlotSsdSlot1linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotSsdSlot1linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotSsdSlot1linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotSsdSlot1linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotSsdSlot1linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotSsdSlot1linkSpeedEnum("SlotSsdSlot1linkSpeed", "body", *m.SlotSsdSlot1linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSlotSsdSlot2linkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Disabled","GEN1","GEN2","GEN3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSlotSsdSlot2linkSpeedPropEnum = append(biosPolicyTypeSlotSsdSlot2linkSpeedPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSlotSsdSlot2linkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSlotSsdSlot2linkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSlotSsdSlot2linkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotSsdSlot2linkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlotSsdSlot2linkSpeedEnum("SlotSsdSlot2linkSpeed", "body", *m.SlotSsdSlot2linkSpeed); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSmeePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSmeePropEnum = append(biosPolicyTypeSmeePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSmeeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSmeePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSmee(formats strfmt.Registry) error {

	if swag.IsZero(m.Smee) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmeeEnum("Smee", "body", *m.Smee); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSmtModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","Off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSmtModePropEnum = append(biosPolicyTypeSmtModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSmtModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSmtModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSmtMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SmtMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmtModeEnum("SmtMode", "body", *m.SmtMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSncPropEnum = append(biosPolicyTypeSncPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSncEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSncPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSnc(formats strfmt.Registry) error {

	if swag.IsZero(m.Snc) { // not required
		return nil
	}

	// value enum
	if err := m.validateSncEnum("Snc", "body", *m.Snc); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSparingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","dimm-sparing","rank-sparing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSparingModePropEnum = append(biosPolicyTypeSparingModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSparingModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSparingModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSparingMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SparingMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSparingModeEnum("SparingMode", "body", *m.SparingMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSrIovPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSrIovPropEnum = append(biosPolicyTypeSrIovPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSrIovEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSrIovPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSrIov(formats strfmt.Registry) error {

	if swag.IsZero(m.SrIov) { // not required
		return nil
	}

	// value enum
	if err := m.validateSrIovEnum("SrIov", "body", *m.SrIov); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeStreamerPrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeStreamerPrefetchPropEnum = append(biosPolicyTypeStreamerPrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateStreamerPrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeStreamerPrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateStreamerPrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.StreamerPrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateStreamerPrefetchEnum("StreamerPrefetch", "body", *m.StreamerPrefetch); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeSvmModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeSvmModePropEnum = append(biosPolicyTypeSvmModePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateSvmModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeSvmModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateSvmMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvmMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSvmModeEnum("SvmMode", "body", *m.SvmMode); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeTerminalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","pc-ansi","vt-utf8","vt100","vt100-plus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeTerminalTypePropEnum = append(biosPolicyTypeTerminalTypePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateTerminalTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeTerminalTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateTerminalType(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTerminalTypeEnum("TerminalType", "body", *m.TerminalType); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeTpmControlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeTpmControlPropEnum = append(biosPolicyTypeTpmControlPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateTpmControlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeTpmControlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateTpmControl(formats strfmt.Registry) error {

	if swag.IsZero(m.TpmControl) { // not required
		return nil
	}

	// value enum
	if err := m.validateTpmControlEnum("TpmControl", "body", *m.TpmControl); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeTpmSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeTpmSupportPropEnum = append(biosPolicyTypeTpmSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateTpmSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeTpmSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateTpmSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.TpmSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateTpmSupportEnum("TpmSupport", "body", *m.TpmSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeTxtSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeTxtSupportPropEnum = append(biosPolicyTypeTxtSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateTxtSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeTxtSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateTxtSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.TxtSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateTxtSupportEnum("TxtSupport", "body", *m.TxtSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUcsmBootOrderRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Loose","Strict"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUcsmBootOrderRulePropEnum = append(biosPolicyTypeUcsmBootOrderRulePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUcsmBootOrderRuleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUcsmBootOrderRulePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUcsmBootOrderRule(formats strfmt.Registry) error {

	if swag.IsZero(m.UcsmBootOrderRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateUcsmBootOrderRuleEnum("UcsmBootOrderRule", "body", *m.UcsmBootOrderRule); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbEmul6064PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbEmul6064PropEnum = append(biosPolicyTypeUsbEmul6064PropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbEmul6064Enum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbEmul6064PropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbEmul6064(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbEmul6064) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbEmul6064Enum("UsbEmul6064", "body", *m.UsbEmul6064); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortFrontPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortFrontPropEnum = append(biosPolicyTypeUsbPortFrontPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortFrontEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortFrontPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortFront(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortFront) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortFrontEnum("UsbPortFront", "body", *m.UsbPortFront); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortInternalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortInternalPropEnum = append(biosPolicyTypeUsbPortInternalPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortInternalEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortInternalPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortInternal(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortInternal) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortInternalEnum("UsbPortInternal", "body", *m.UsbPortInternal); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortKvmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortKvmPropEnum = append(biosPolicyTypeUsbPortKvmPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortKvmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortKvmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortKvm(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortKvm) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortKvmEnum("UsbPortKvm", "body", *m.UsbPortKvm); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortRearPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortRearPropEnum = append(biosPolicyTypeUsbPortRearPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortRearEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortRearPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortRear(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortRear) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortRearEnum("UsbPortRear", "body", *m.UsbPortRear); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortSdCardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortSdCardPropEnum = append(biosPolicyTypeUsbPortSdCardPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortSdCardEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortSdCardPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortSdCard(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortSdCard) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortSdCardEnum("UsbPortSdCard", "body", *m.UsbPortSdCard); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbPortVmediaPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbPortVmediaPropEnum = append(biosPolicyTypeUsbPortVmediaPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbPortVmediaEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbPortVmediaPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbPortVmedia(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbPortVmedia) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbPortVmediaEnum("UsbPortVmedia", "body", *m.UsbPortVmedia); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeUsbXhciSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeUsbXhciSupportPropEnum = append(biosPolicyTypeUsbXhciSupportPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateUsbXhciSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeUsbXhciSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateUsbXhciSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.UsbXhciSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsbXhciSupportEnum("UsbXhciSupport", "body", *m.UsbXhciSupport); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeVgaPriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Offboard","Onboard","Onboard VGA Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeVgaPriorityPropEnum = append(biosPolicyTypeVgaPriorityPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateVgaPriorityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeVgaPriorityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateVgaPriority(formats strfmt.Registry) error {

	if swag.IsZero(m.VgaPriority) { // not required
		return nil
	}

	// value enum
	if err := m.validateVgaPriorityEnum("VgaPriority", "body", *m.VgaPriority); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeVmdEnablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeVmdEnablePropEnum = append(biosPolicyTypeVmdEnablePropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateVmdEnableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeVmdEnablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateVmdEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.VmdEnable) { // not required
		return nil
	}

	// value enum
	if err := m.validateVmdEnableEnum("VmdEnable", "body", *m.VmdEnable); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeWorkLoadConfigPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Balanced","I/O Sensitive","NUMA","UMA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeWorkLoadConfigPropEnum = append(biosPolicyTypeWorkLoadConfigPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateWorkLoadConfigEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeWorkLoadConfigPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateWorkLoadConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkLoadConfig) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkLoadConfigEnum("WorkLoadConfig", "body", *m.WorkLoadConfig); err != nil {
		return err
	}

	return nil
}

var biosPolicyTypeXptPrefetchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform-default","Auto","disabled","enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		biosPolicyTypeXptPrefetchPropEnum = append(biosPolicyTypeXptPrefetchPropEnum, v)
	}
}

// property enum
func (m *BiosPolicy) validateXptPrefetchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, biosPolicyTypeXptPrefetchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BiosPolicy) validateXptPrefetch(formats strfmt.Registry) error {

	if swag.IsZero(m.XptPrefetch) { // not required
		return nil
	}

	// value enum
	if err := m.validateXptPrefetchEnum("XptPrefetch", "body", *m.XptPrefetch); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BiosPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BiosPolicy) UnmarshalBinary(b []byte) error {
	var res BiosPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
