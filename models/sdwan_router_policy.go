// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdwanRouterPolicy Router Policy
//
// A policy specifying SD-WAN router details.
//
// swagger:model sdwanRouterPolicy
type SdwanRouterPolicy struct {
	PolicyAbstractPolicy

	// Scale of the SD-WAN router virtual machine deployment.
	// Enum: [Typical Minimal]
	DeploymentSize *string `json:"DeploymentSize,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Relationship to the SD-WAN profile object.
	Profiles []*SdwanProfileRef `json:"Profiles"`

	// Relationship to the solution distributable object.
	SolutionImage *SoftwareSolutionDistributableRef `json:"SolutionImage,omitempty"`

	// Number of WAN connections across the SD-WAN site.
	WanCount int64 `json:"WanCount,omitempty"`

	// Defines if the WAN networks are singly or dually terminated. Dually terminated WANs are configured on all the SD-WAN routers. Singly terminated WANs are configured only on one of the SD-WAN routers.
	// Enum: [Single Dual]
	WanTerminationType *string `json:"WanTerminationType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SdwanRouterPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		DeploymentSize *string `json:"DeploymentSize,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*SdwanProfileRef `json:"Profiles"`

		SolutionImage *SoftwareSolutionDistributableRef `json:"SolutionImage,omitempty"`

		WanCount int64 `json:"WanCount,omitempty"`

		WanTerminationType *string `json:"WanTerminationType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DeploymentSize = dataAO1.DeploymentSize

	m.Organization = dataAO1.Organization

	m.Profiles = dataAO1.Profiles

	m.SolutionImage = dataAO1.SolutionImage

	m.WanCount = dataAO1.WanCount

	m.WanTerminationType = dataAO1.WanTerminationType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SdwanRouterPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DeploymentSize *string `json:"DeploymentSize,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*SdwanProfileRef `json:"Profiles"`

		SolutionImage *SoftwareSolutionDistributableRef `json:"SolutionImage,omitempty"`

		WanCount int64 `json:"WanCount,omitempty"`

		WanTerminationType *string `json:"WanTerminationType,omitempty"`
	}

	dataAO1.DeploymentSize = m.DeploymentSize

	dataAO1.Organization = m.Organization

	dataAO1.Profiles = m.Profiles

	dataAO1.SolutionImage = m.SolutionImage

	dataAO1.WanCount = m.WanCount

	dataAO1.WanTerminationType = m.WanTerminationType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sdwan router policy
func (m *SdwanRouterPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolutionImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWanTerminationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sdwanRouterPolicyTypeDeploymentSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Typical","Minimal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdwanRouterPolicyTypeDeploymentSizePropEnum = append(sdwanRouterPolicyTypeDeploymentSizePropEnum, v)
	}
}

// property enum
func (m *SdwanRouterPolicy) validateDeploymentSizeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdwanRouterPolicyTypeDeploymentSizePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdwanRouterPolicy) validateDeploymentSize(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentSizeEnum("DeploymentSize", "body", *m.DeploymentSize); err != nil {
		return err
	}

	return nil
}

func (m *SdwanRouterPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanRouterPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SdwanRouterPolicy) validateSolutionImage(formats strfmt.Registry) error {

	if swag.IsZero(m.SolutionImage) { // not required
		return nil
	}

	if m.SolutionImage != nil {
		if err := m.SolutionImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SolutionImage")
			}
			return err
		}
	}

	return nil
}

var sdwanRouterPolicyTypeWanTerminationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Single","Dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdwanRouterPolicyTypeWanTerminationTypePropEnum = append(sdwanRouterPolicyTypeWanTerminationTypePropEnum, v)
	}
}

// property enum
func (m *SdwanRouterPolicy) validateWanTerminationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdwanRouterPolicyTypeWanTerminationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdwanRouterPolicy) validateWanTerminationType(formats strfmt.Registry) error {

	if swag.IsZero(m.WanTerminationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWanTerminationTypeEnum("WanTerminationType", "body", *m.WanTerminationType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdwanRouterPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdwanRouterPolicy) UnmarshalBinary(b []byte) error {
	var res SdwanRouterPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
