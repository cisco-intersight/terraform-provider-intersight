// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamCertificateRequest Iam:Certificate Request
//
// The information required to generate a certificate signing request (CSR),
// which is a block of encoded text that is given to a Certificate Authority when applying for an SSL Certificate.
//
// swagger:model iamCertificateRequest
type IamCertificateRequest struct {
	MoBaseMo

	// The account associated with the CertificateRequest.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// A collection of references to the [iam.Certificate](mo://iam.Certificate) Managed Object.
	// When this managed object is deleted, the referenced [iam.Certificate](mo://iam.Certificate) MO on the other side of the relationship is deleted.
	Certificate *IamCertificateRef `json:"Certificate,omitempty"`

	// User input email address, an optional part of the subject of the certificate request.
	EmailAddress string `json:"EmailAddress,omitempty"`

	// Name of the certificate request.
	Name string `json:"Name,omitempty"`

	// A collection of references to the [iam.PrivateKeySpec](mo://iam.PrivateKeySpec) Managed Object.
	// When this managed object is deleted, the referenced [iam.PrivateKeySpec](mo://iam.PrivateKeySpec) MO on the other side of the relationship is deleted.
	PrivateKeySpec *IamPrivateKeySpecRef `json:"PrivateKeySpec,omitempty"`

	// Generated certificate signing request (CSR) in PEM format.
	// Read Only: true
	Request string `json:"Request,omitempty"`

	// Whether the user wants the generated CSR to be self-signed by the appliance.
	SelfSigned *bool `json:"SelfSigned,omitempty"`

	// The x.509 distinguished name of the subject of the certificate request.
	Subject *PkixDistinguishedName `json:"Subject,omitempty"`

	// The x.509 subject alternate name values of the certificate request.
	SubjectAlternateName *PkixSubjectAlternateName `json:"SubjectAlternateName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamCertificateRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Certificate *IamCertificateRef `json:"Certificate,omitempty"`

		EmailAddress string `json:"EmailAddress,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivateKeySpec *IamPrivateKeySpecRef `json:"PrivateKeySpec,omitempty"`

		Request string `json:"Request,omitempty"`

		SelfSigned *bool `json:"SelfSigned,omitempty"`

		Subject *PkixDistinguishedName `json:"Subject,omitempty"`

		SubjectAlternateName *PkixSubjectAlternateName `json:"SubjectAlternateName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Certificate = dataAO1.Certificate

	m.EmailAddress = dataAO1.EmailAddress

	m.Name = dataAO1.Name

	m.PrivateKeySpec = dataAO1.PrivateKeySpec

	m.Request = dataAO1.Request

	m.SelfSigned = dataAO1.SelfSigned

	m.Subject = dataAO1.Subject

	m.SubjectAlternateName = dataAO1.SubjectAlternateName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamCertificateRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Certificate *IamCertificateRef `json:"Certificate,omitempty"`

		EmailAddress string `json:"EmailAddress,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivateKeySpec *IamPrivateKeySpecRef `json:"PrivateKeySpec,omitempty"`

		Request string `json:"Request,omitempty"`

		SelfSigned *bool `json:"SelfSigned,omitempty"`

		Subject *PkixDistinguishedName `json:"Subject,omitempty"`

		SubjectAlternateName *PkixSubjectAlternateName `json:"SubjectAlternateName,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Certificate = m.Certificate

	dataAO1.EmailAddress = m.EmailAddress

	dataAO1.Name = m.Name

	dataAO1.PrivateKeySpec = m.PrivateKeySpec

	dataAO1.Request = m.Request

	dataAO1.SelfSigned = m.SelfSigned

	dataAO1.Subject = m.Subject

	dataAO1.SubjectAlternateName = m.SubjectAlternateName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam certificate request
func (m *IamCertificateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamCertificateRequest) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *IamCertificateRequest) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Certificate")
			}
			return err
		}
	}

	return nil
}

func (m *IamCertificateRequest) validatePrivateKeySpec(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateKeySpec) { // not required
		return nil
	}

	if m.PrivateKeySpec != nil {
		if err := m.PrivateKeySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PrivateKeySpec")
			}
			return err
		}
	}

	return nil
}

func (m *IamCertificateRequest) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Subject")
			}
			return err
		}
	}

	return nil
}

func (m *IamCertificateRequest) validateSubjectAlternateName(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectAlternateName) { // not required
		return nil
	}

	if m.SubjectAlternateName != nil {
		if err := m.SubjectAlternateName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubjectAlternateName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamCertificateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamCertificateRequest) UnmarshalBinary(b []byte) error {
	var res IamCertificateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
