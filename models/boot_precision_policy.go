// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BootPrecisionPolicy Boot Order
//
// Boot order policy models a reusable boot order configuration that can be applied to multiple servers via profile association. It supports advanced boot order configuration on Cisco CIMC servers.
//
// swagger:model bootPrecisionPolicy
type BootPrecisionPolicy struct {
	PolicyAbstractPolicy

	// Set of boot devices to be configured.
	BootDevices []*BootDeviceBase `json:"BootDevices"`

	// Sets the BIOS boot mode. UEFI uses the GUID Partition Table (GPT) whereas Legacy mode uses the Master Boot Record (MBR) partitioning scheme.
	// Enum: [Legacy Uefi]
	ConfiguredBootMode *string `json:"ConfiguredBootMode,omitempty"`

	// If UEFI secure boot is enabled, the boot mode is set to UEFI by default. Secure boot enforces that device boots using only software that is trusted by the Original Equipment Manufacturer (OEM).
	EnforceUefiSecureBoot *bool `json:"EnforceUefiSecureBoot,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Reference to the profile objects that this policy is a part of.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BootPrecisionPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		BootDevices []*BootDeviceBase `json:"BootDevices"`

		ConfiguredBootMode *string `json:"ConfiguredBootMode,omitempty"`

		EnforceUefiSecureBoot *bool `json:"EnforceUefiSecureBoot,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BootDevices = dataAO1.BootDevices

	m.ConfiguredBootMode = dataAO1.ConfiguredBootMode

	m.EnforceUefiSecureBoot = dataAO1.EnforceUefiSecureBoot

	m.Organization = dataAO1.Organization

	m.Profiles = dataAO1.Profiles

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BootPrecisionPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BootDevices []*BootDeviceBase `json:"BootDevices"`

		ConfiguredBootMode *string `json:"ConfiguredBootMode,omitempty"`

		EnforceUefiSecureBoot *bool `json:"EnforceUefiSecureBoot,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`
	}

	dataAO1.BootDevices = m.BootDevices

	dataAO1.ConfiguredBootMode = m.ConfiguredBootMode

	dataAO1.EnforceUefiSecureBoot = m.EnforceUefiSecureBoot

	dataAO1.Organization = m.Organization

	dataAO1.Profiles = m.Profiles

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this boot precision policy
func (m *BootPrecisionPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguredBootMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BootPrecisionPolicy) validateBootDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.BootDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.BootDevices); i++ {
		if swag.IsZero(m.BootDevices[i]) { // not required
			continue
		}

		if m.BootDevices[i] != nil {
			if err := m.BootDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BootDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var bootPrecisionPolicyTypeConfiguredBootModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Legacy","Uefi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bootPrecisionPolicyTypeConfiguredBootModePropEnum = append(bootPrecisionPolicyTypeConfiguredBootModePropEnum, v)
	}
}

// property enum
func (m *BootPrecisionPolicy) validateConfiguredBootModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bootPrecisionPolicyTypeConfiguredBootModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BootPrecisionPolicy) validateConfiguredBootMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfiguredBootMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfiguredBootModeEnum("ConfiguredBootMode", "body", *m.ConfiguredBootMode); err != nil {
		return err
	}

	return nil
}

func (m *BootPrecisionPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *BootPrecisionPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BootPrecisionPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootPrecisionPolicy) UnmarshalBinary(b []byte) error {
	var res BootPrecisionPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
