// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentBaseParameter BaseParameter
//
// A Baseparameter is an abstract definition of specific value to be extracted from a given API or
// device response.
// The BaseParameter object provides the name, type and content specific path, such as XPath or
// JSONPath, that points to the location of the parameter value in the content. Additional parameters
// necessary to extract data based on content type needs to extend BaseParameter.
//
// swagger:model contentBaseParameter
type ContentBaseParameter struct {
	MoBaseComplexType

	ContentBaseParameterAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContentBaseParameter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 ContentBaseParameterAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ContentBaseParameterAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContentBaseParameter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ContentBaseParameterAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content base parameter
func (m *ContentBaseParameter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ContentBaseParameterAO1P1
	if err := m.ContentBaseParameterAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ContentBaseParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentBaseParameter) UnmarshalBinary(b []byte) error {
	var res ContentBaseParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContentBaseParameterAO1P1 content base parameter a o1 p1
//
// swagger:model ContentBaseParameterAO1P1
type ContentBaseParameterAO1P1 struct {

	// The flag that allows single values in content to be extracted as a
	// single element collection in case the parameter is of Collection type.
	// This flag is applicable for parameters of type Collection only.
	AcceptSingleValue *bool `json:"AcceptSingleValue,omitempty"`

	// The name of the complex type definition in case this is a complex
	// parameter. The content.Grammar object must have a complex type, content.ComplexType,
	// defined with the specified name in types collection property.
	ComplexType string `json:"ComplexType,omitempty"`

	// The type of the collection item in case this is a collection parameter.
	// Enum: [simple complex collection]
	ItemType *string `json:"ItemType,omitempty"`

	// The name of the parameter.
	Name string `json:"Name,omitempty"`

	// The content specific path information that identifies the parameter
	// value within the content. The value is usually a XPath or JSONPath or a
	// regular expression in case of text content.
	Path string `json:"Path,omitempty"`

	// The type of the parameter. Accepted values are simple, complex,
	// collection.
	// Enum: [simple complex collection]
	Type *string `json:"Type,omitempty"`

	// content base parameter a o1 p1
	ContentBaseParameterAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ContentBaseParameterAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The flag that allows single values in content to be extracted as a
		// single element collection in case the parameter is of Collection type.
		// This flag is applicable for parameters of type Collection only.
		AcceptSingleValue *bool `json:"AcceptSingleValue,omitempty"`

		// The name of the complex type definition in case this is a complex
		// parameter. The content.Grammar object must have a complex type, content.ComplexType,
		// defined with the specified name in types collection property.
		ComplexType string `json:"ComplexType,omitempty"`

		// The type of the collection item in case this is a collection parameter.
		// Enum: [simple complex collection]
		ItemType *string `json:"ItemType,omitempty"`

		// The name of the parameter.
		Name string `json:"Name,omitempty"`

		// The content specific path information that identifies the parameter
		// value within the content. The value is usually a XPath or JSONPath or a
		// regular expression in case of text content.
		Path string `json:"Path,omitempty"`

		// The type of the parameter. Accepted values are simple, complex,
		// collection.
		// Enum: [simple complex collection]
		Type *string `json:"Type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ContentBaseParameterAO1P1

	rcv.AcceptSingleValue = stage1.AcceptSingleValue
	rcv.ComplexType = stage1.ComplexType
	rcv.ItemType = stage1.ItemType
	rcv.Name = stage1.Name
	rcv.Path = stage1.Path
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AcceptSingleValue")
	delete(stage2, "ComplexType")
	delete(stage2, "ItemType")
	delete(stage2, "Name")
	delete(stage2, "Path")
	delete(stage2, "Type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ContentBaseParameterAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ContentBaseParameterAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The flag that allows single values in content to be extracted as a
		// single element collection in case the parameter is of Collection type.
		// This flag is applicable for parameters of type Collection only.
		AcceptSingleValue *bool `json:"AcceptSingleValue,omitempty"`

		// The name of the complex type definition in case this is a complex
		// parameter. The content.Grammar object must have a complex type, content.ComplexType,
		// defined with the specified name in types collection property.
		ComplexType string `json:"ComplexType,omitempty"`

		// The type of the collection item in case this is a collection parameter.
		// Enum: [simple complex collection]
		ItemType *string `json:"ItemType,omitempty"`

		// The name of the parameter.
		Name string `json:"Name,omitempty"`

		// The content specific path information that identifies the parameter
		// value within the content. The value is usually a XPath or JSONPath or a
		// regular expression in case of text content.
		Path string `json:"Path,omitempty"`

		// The type of the parameter. Accepted values are simple, complex,
		// collection.
		// Enum: [simple complex collection]
		Type *string `json:"Type,omitempty"`
	}

	stage1.AcceptSingleValue = m.AcceptSingleValue
	stage1.ComplexType = m.ComplexType
	stage1.ItemType = m.ItemType
	stage1.Name = m.Name
	stage1.Path = m.Path
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ContentBaseParameterAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ContentBaseParameterAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this content base parameter a o1 p1
func (m *ContentBaseParameterAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contentBaseParameterAO1P1TypeItemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["simple","complex","collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentBaseParameterAO1P1TypeItemTypePropEnum = append(contentBaseParameterAO1P1TypeItemTypePropEnum, v)
	}
}

const (

	// ContentBaseParameterAO1P1ItemTypeSimple captures enum value "simple"
	ContentBaseParameterAO1P1ItemTypeSimple string = "simple"

	// ContentBaseParameterAO1P1ItemTypeComplex captures enum value "complex"
	ContentBaseParameterAO1P1ItemTypeComplex string = "complex"

	// ContentBaseParameterAO1P1ItemTypeCollection captures enum value "collection"
	ContentBaseParameterAO1P1ItemTypeCollection string = "collection"
)

// prop value enum
func (m *ContentBaseParameterAO1P1) validateItemTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contentBaseParameterAO1P1TypeItemTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContentBaseParameterAO1P1) validateItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemTypeEnum("ItemType", "body", *m.ItemType); err != nil {
		return err
	}

	return nil
}

var contentBaseParameterAO1P1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["simple","complex","collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentBaseParameterAO1P1TypeTypePropEnum = append(contentBaseParameterAO1P1TypeTypePropEnum, v)
	}
}

const (

	// ContentBaseParameterAO1P1TypeSimple captures enum value "simple"
	ContentBaseParameterAO1P1TypeSimple string = "simple"

	// ContentBaseParameterAO1P1TypeComplex captures enum value "complex"
	ContentBaseParameterAO1P1TypeComplex string = "complex"

	// ContentBaseParameterAO1P1TypeCollection captures enum value "collection"
	ContentBaseParameterAO1P1TypeCollection string = "collection"
)

// prop value enum
func (m *ContentBaseParameterAO1P1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contentBaseParameterAO1P1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContentBaseParameterAO1P1) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentBaseParameterAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentBaseParameterAO1P1) UnmarshalBinary(b []byte) error {
	var res ContentBaseParameterAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
