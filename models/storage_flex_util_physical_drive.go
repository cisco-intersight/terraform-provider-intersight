// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageFlexUtilPhysicalDrive Storage:Flex Util Physical Drive
//
// Storage Flex Util Physical Drive.
//
// swagger:model storageFlexUtilPhysicalDrive
type StorageFlexUtilPhysicalDrive struct {
	EquipmentBase

	// block size
	BlockSize string `json:"BlockSize,omitempty"`

	// capacity
	Capacity string `json:"Capacity,omitempty"`

	// controller
	Controller string `json:"Controller,omitempty"`

	// drives enabled
	DrivesEnabled string `json:"DrivesEnabled,omitempty"`

	// health
	Health string `json:"Health,omitempty"`

	// manufacturer date
	ManufacturerDate string `json:"ManufacturerDate,omitempty"`

	// manufacturer Id
	ManufacturerID string `json:"ManufacturerId,omitempty"`

	// oem Id
	OemID string `json:"OemId,omitempty"`

	// partition count
	PartitionCount string `json:"PartitionCount,omitempty"`

	// pd status
	PdStatus string `json:"PdStatus,omitempty"`

	// physical drive
	PhysicalDrive string `json:"PhysicalDrive,omitempty"`

	// product name
	ProductName string `json:"ProductName,omitempty"`

	// product revision
	ProductRevision string `json:"ProductRevision,omitempty"`

	// read error count
	ReadErrorCount string `json:"ReadErrorCount,omitempty"`

	// read error threshold
	ReadErrorThreshold string `json:"ReadErrorThreshold,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// A collection of references to the [storage.FlexUtilController](mo://storage.FlexUtilController) Managed Object.
	// When this managed object is deleted, the referenced [storage.FlexUtilController](mo://storage.FlexUtilController) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageFlexUtilController *StorageFlexUtilControllerRef `json:"StorageFlexUtilController,omitempty"`

	// write enabled
	WriteEnabled string `json:"WriteEnabled,omitempty"`

	// write error count
	WriteErrorCount string `json:"WriteErrorCount,omitempty"`

	// write error threshold
	WriteErrorThreshold string `json:"WriteErrorThreshold,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageFlexUtilPhysicalDrive) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		Capacity string `json:"Capacity,omitempty"`

		Controller string `json:"Controller,omitempty"`

		DrivesEnabled string `json:"DrivesEnabled,omitempty"`

		Health string `json:"Health,omitempty"`

		ManufacturerDate string `json:"ManufacturerDate,omitempty"`

		ManufacturerID string `json:"ManufacturerId,omitempty"`

		OemID string `json:"OemId,omitempty"`

		PartitionCount string `json:"PartitionCount,omitempty"`

		PdStatus string `json:"PdStatus,omitempty"`

		PhysicalDrive string `json:"PhysicalDrive,omitempty"`

		ProductName string `json:"ProductName,omitempty"`

		ProductRevision string `json:"ProductRevision,omitempty"`

		ReadErrorCount string `json:"ReadErrorCount,omitempty"`

		ReadErrorThreshold string `json:"ReadErrorThreshold,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageFlexUtilController *StorageFlexUtilControllerRef `json:"StorageFlexUtilController,omitempty"`

		WriteEnabled string `json:"WriteEnabled,omitempty"`

		WriteErrorCount string `json:"WriteErrorCount,omitempty"`

		WriteErrorThreshold string `json:"WriteErrorThreshold,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BlockSize = dataAO1.BlockSize

	m.Capacity = dataAO1.Capacity

	m.Controller = dataAO1.Controller

	m.DrivesEnabled = dataAO1.DrivesEnabled

	m.Health = dataAO1.Health

	m.ManufacturerDate = dataAO1.ManufacturerDate

	m.ManufacturerID = dataAO1.ManufacturerID

	m.OemID = dataAO1.OemID

	m.PartitionCount = dataAO1.PartitionCount

	m.PdStatus = dataAO1.PdStatus

	m.PhysicalDrive = dataAO1.PhysicalDrive

	m.ProductName = dataAO1.ProductName

	m.ProductRevision = dataAO1.ProductRevision

	m.ReadErrorCount = dataAO1.ReadErrorCount

	m.ReadErrorThreshold = dataAO1.ReadErrorThreshold

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageFlexUtilController = dataAO1.StorageFlexUtilController

	m.WriteEnabled = dataAO1.WriteEnabled

	m.WriteErrorCount = dataAO1.WriteErrorCount

	m.WriteErrorThreshold = dataAO1.WriteErrorThreshold

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageFlexUtilPhysicalDrive) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		Capacity string `json:"Capacity,omitempty"`

		Controller string `json:"Controller,omitempty"`

		DrivesEnabled string `json:"DrivesEnabled,omitempty"`

		Health string `json:"Health,omitempty"`

		ManufacturerDate string `json:"ManufacturerDate,omitempty"`

		ManufacturerID string `json:"ManufacturerId,omitempty"`

		OemID string `json:"OemId,omitempty"`

		PartitionCount string `json:"PartitionCount,omitempty"`

		PdStatus string `json:"PdStatus,omitempty"`

		PhysicalDrive string `json:"PhysicalDrive,omitempty"`

		ProductName string `json:"ProductName,omitempty"`

		ProductRevision string `json:"ProductRevision,omitempty"`

		ReadErrorCount string `json:"ReadErrorCount,omitempty"`

		ReadErrorThreshold string `json:"ReadErrorThreshold,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageFlexUtilController *StorageFlexUtilControllerRef `json:"StorageFlexUtilController,omitempty"`

		WriteEnabled string `json:"WriteEnabled,omitempty"`

		WriteErrorCount string `json:"WriteErrorCount,omitempty"`

		WriteErrorThreshold string `json:"WriteErrorThreshold,omitempty"`
	}

	dataAO1.BlockSize = m.BlockSize

	dataAO1.Capacity = m.Capacity

	dataAO1.Controller = m.Controller

	dataAO1.DrivesEnabled = m.DrivesEnabled

	dataAO1.Health = m.Health

	dataAO1.ManufacturerDate = m.ManufacturerDate

	dataAO1.ManufacturerID = m.ManufacturerID

	dataAO1.OemID = m.OemID

	dataAO1.PartitionCount = m.PartitionCount

	dataAO1.PdStatus = m.PdStatus

	dataAO1.PhysicalDrive = m.PhysicalDrive

	dataAO1.ProductName = m.ProductName

	dataAO1.ProductRevision = m.ProductRevision

	dataAO1.ReadErrorCount = m.ReadErrorCount

	dataAO1.ReadErrorThreshold = m.ReadErrorThreshold

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageFlexUtilController = m.StorageFlexUtilController

	dataAO1.WriteEnabled = m.WriteEnabled

	dataAO1.WriteErrorCount = m.WriteErrorCount

	dataAO1.WriteErrorThreshold = m.WriteErrorThreshold

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage flex util physical drive
func (m *StorageFlexUtilPhysicalDrive) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFlexUtilController(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageFlexUtilPhysicalDrive) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageFlexUtilPhysicalDrive) validateStorageFlexUtilController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageFlexUtilController) { // not required
		return nil
	}

	if m.StorageFlexUtilController != nil {
		if err := m.StorageFlexUtilController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageFlexUtilController")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageFlexUtilPhysicalDrive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageFlexUtilPhysicalDrive) UnmarshalBinary(b []byte) error {
	var res StorageFlexUtilPhysicalDrive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
