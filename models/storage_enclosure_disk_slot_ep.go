// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageEnclosureDiskSlotEp Storage:Enclosure Disk Slot Ep
//
// Physical Disk slots on the enclosure.
//
// swagger:model storageEnclosureDiskSlotEp
type StorageEnclosureDiskSlotEp struct {
	InventoryBase

	// This field identifies the zoning configuration applied to  this enclosure slot.
	DrivePath string `json:"DrivePath,omitempty"`

	// This field identifies the health of the disk inserted in the slot.
	Health string `json:"Health,omitempty"`

	// This field identifies the disk is present in the enclosure slot.
	Presence string `json:"Presence,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// This field represents the slot Id in the storage enclosure.
	Slot string `json:"Slot,omitempty"`

	// A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.
	// When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageEnclosureDiskSlotEp) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		DrivePath string `json:"DrivePath,omitempty"`

		Health string `json:"Health,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Slot string `json:"Slot,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DrivePath = dataAO1.DrivePath

	m.Health = dataAO1.Health

	m.Presence = dataAO1.Presence

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Slot = dataAO1.Slot

	m.StorageEnclosure = dataAO1.StorageEnclosure

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageEnclosureDiskSlotEp) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DrivePath string `json:"DrivePath,omitempty"`

		Health string `json:"Health,omitempty"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Slot string `json:"Slot,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
	}

	dataAO1.DrivePath = m.DrivePath

	dataAO1.Health = m.Health

	dataAO1.Presence = m.Presence

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Slot = m.Slot

	dataAO1.StorageEnclosure = m.StorageEnclosure

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage enclosure disk slot ep
func (m *StorageEnclosureDiskSlotEp) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEnclosure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageEnclosureDiskSlotEp) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageEnclosureDiskSlotEp) validateStorageEnclosure(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageEnclosure) { // not required
		return nil
	}

	if m.StorageEnclosure != nil {
		if err := m.StorageEnclosure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageEnclosure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageEnclosureDiskSlotEp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageEnclosureDiskSlotEp) UnmarshalBinary(b []byte) error {
	var res StorageEnclosureDiskSlotEp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
