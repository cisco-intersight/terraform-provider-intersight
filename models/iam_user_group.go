// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamUserGroup Iam:User Group
//
// User Group provides a way to assign permissions to a group of users based on the IdP attributes received after authentication.
//
// swagger:model iamUserGroup
type IamUserGroup struct {
	MoBaseMo

	// A collection of references to the [iam.Idp](mo://iam.Idp) Managed Object.
	// When this managed object is deleted, the referenced [iam.Idp](mo://iam.Idp) MO unsets its reference to this deleted MO.
	Idp *IamIdpRef `json:"Idp,omitempty"`

	// A collection of references to the [iam.IdpReference](mo://iam.IdpReference) Managed Object.
	// When this managed object is deleted, the referenced [iam.IdpReference](mo://iam.IdpReference) MO unsets its reference to this deleted MO.
	Idpreference *IamIdpReferenceRef `json:"Idpreference,omitempty"`

	// The name of the user group which the dynamic user belongs to.
	Name string `json:"Name,omitempty"`

	// Permissions assigned to the user group. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.
	Permissions []*IamPermissionRef `json:"Permissions"`

	// Qualifier defines which Idp attribute qualifies users to be part of a user group.
	Qualifier *IamQualifierRef `json:"Qualifier,omitempty"`

	// Users logged in using this user group.
	// Read Only: true
	Users []*IamUserRef `json:"Users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamUserGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Idp *IamIdpRef `json:"Idp,omitempty"`

		Idpreference *IamIdpReferenceRef `json:"Idpreference,omitempty"`

		Name string `json:"Name,omitempty"`

		Permissions []*IamPermissionRef `json:"Permissions"`

		Qualifier *IamQualifierRef `json:"Qualifier,omitempty"`

		Users []*IamUserRef `json:"Users"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Idp = dataAO1.Idp

	m.Idpreference = dataAO1.Idpreference

	m.Name = dataAO1.Name

	m.Permissions = dataAO1.Permissions

	m.Qualifier = dataAO1.Qualifier

	m.Users = dataAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamUserGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Idp *IamIdpRef `json:"Idp,omitempty"`

		Idpreference *IamIdpReferenceRef `json:"Idpreference,omitempty"`

		Name string `json:"Name,omitempty"`

		Permissions []*IamPermissionRef `json:"Permissions"`

		Qualifier *IamQualifierRef `json:"Qualifier,omitempty"`

		Users []*IamUserRef `json:"Users"`
	}

	dataAO1.Idp = m.Idp

	dataAO1.Idpreference = m.Idpreference

	dataAO1.Name = m.Name

	dataAO1.Permissions = m.Permissions

	dataAO1.Qualifier = m.Qualifier

	dataAO1.Users = m.Users

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam user group
func (m *IamUserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamUserGroup) validateIdp(formats strfmt.Registry) error {

	if swag.IsZero(m.Idp) { // not required
		return nil
	}

	if m.Idp != nil {
		if err := m.Idp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Idp")
			}
			return err
		}
	}

	return nil
}

func (m *IamUserGroup) validateIdpreference(formats strfmt.Registry) error {

	if swag.IsZero(m.Idpreference) { // not required
		return nil
	}

	if m.Idpreference != nil {
		if err := m.Idpreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Idpreference")
			}
			return err
		}
	}

	return nil
}

func (m *IamUserGroup) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamUserGroup) validateQualifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualifier) { // not required
		return nil
	}

	if m.Qualifier != nil {
		if err := m.Qualifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Qualifier")
			}
			return err
		}
	}

	return nil
}

func (m *IamUserGroup) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamUserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamUserGroup) UnmarshalBinary(b []byte) error {
	var res IamUserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
