// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualizationVmwareCluster Virtualization:Vmware Cluster
//
// A real cluster of resources within a data center in VMware. A cluster is a convenient grouping of resources such as Host, Datastore, etc.
//
// swagger:model virtualizationVmwareCluster
type VirtualizationVmwareCluster struct {
	VirtualizationCluster

	// Every entity is grouped under the datacenter object and managed as a group.
	// Read Only: true
	Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

	// Count of all datastores associated with this cluster.
	DatastoreCount int64 `json:"DatastoreCount,omitempty"`

	// A collection of references to the [virtualization.VmwareHost](mo://virtualization.VmwareHost) Managed Object.
	// When this managed object is deleted, the referenced [virtualization.VmwareHost](mo://virtualization.VmwareHost) MOs unset their reference to this deleted MO.
	Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationVmwareCluster) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationCluster
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationCluster = aO0

	// AO1
	var dataAO1 struct {
		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		DatastoreCount int64 `json:"DatastoreCount,omitempty"`

		Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Datacenter = dataAO1.Datacenter

	m.DatastoreCount = dataAO1.DatastoreCount

	m.Hosts = dataAO1.Hosts

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationVmwareCluster) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationCluster)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		DatastoreCount int64 `json:"DatastoreCount,omitempty"`

		Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`
	}

	dataAO1.Datacenter = m.Datacenter

	dataAO1.DatastoreCount = m.DatastoreCount

	dataAO1.Hosts = m.Hosts

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization vmware cluster
func (m *VirtualizationVmwareCluster) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationCluster
	if err := m.VirtualizationCluster.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationVmwareCluster) validateDatacenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if m.Datacenter != nil {
		if err := m.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareCluster) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationVmwareCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationVmwareCluster) UnmarshalBinary(b []byte) error {
	var res VirtualizationVmwareCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
