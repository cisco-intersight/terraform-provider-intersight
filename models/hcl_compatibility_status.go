// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclCompatibilityStatus Hcl:Compatibility Status
//
// Check the compatibility status for the given hardware and software configurations.
//
// swagger:model hclCompatibilityStatus
type HclCompatibilityStatus struct {
	MoBaseMo

	// List of HardwareCompatibilityProfiles for which the compatibility status needs to be computed.
	ProfileList []*HclHardwareCompatibilityProfile `json:"ProfileList"`

	// Type of the request to be served.
	// Enum: [FillSupportedVersions CheckCompatibility GetRecommendedDrivers]
	RequestType *string `json:"RequestType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclCompatibilityStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ProfileList []*HclHardwareCompatibilityProfile `json:"ProfileList"`

		RequestType *string `json:"RequestType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ProfileList = dataAO1.ProfileList

	m.RequestType = dataAO1.RequestType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclCompatibilityStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ProfileList []*HclHardwareCompatibilityProfile `json:"ProfileList"`

		RequestType *string `json:"RequestType,omitempty"`
	}

	dataAO1.ProfileList = m.ProfileList

	dataAO1.RequestType = m.RequestType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl compatibility status
func (m *HclCompatibilityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HclCompatibilityStatus) validateProfileList(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileList) { // not required
		return nil
	}

	for i := 0; i < len(m.ProfileList); i++ {
		if swag.IsZero(m.ProfileList[i]) { // not required
			continue
		}

		if m.ProfileList[i] != nil {
			if err := m.ProfileList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProfileList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hclCompatibilityStatusTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FillSupportedVersions","CheckCompatibility","GetRecommendedDrivers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclCompatibilityStatusTypeRequestTypePropEnum = append(hclCompatibilityStatusTypeRequestTypePropEnum, v)
	}
}

// property enum
func (m *HclCompatibilityStatus) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclCompatibilityStatusTypeRequestTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclCompatibilityStatus) validateRequestType(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestTypeEnum("RequestType", "body", *m.RequestType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclCompatibilityStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclCompatibilityStatus) UnmarshalBinary(b []byte) error {
	var res HclCompatibilityStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
