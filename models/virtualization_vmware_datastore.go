// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationVmwareDatastore Virtualization:Vmware Datastore
//
// The VMware Datastore entity with its attributes. Every Datastore belongs to a Datacenter and maybe attached to VMs.
//
// swagger:model virtualizationVmwareDatastore
type VirtualizationVmwareDatastore struct {
	VirtualizationDatastore

	// Indicates if this datastore is accessible.
	Accessible *bool `json:"Accessible,omitempty"`

	// Specifies cluster associated with the datastore entity. Not every datastore is in a cluster and therefore this relation may not exist.
	Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

	// Every entity is grouped under the datacenter object and managed as a group.
	// Read Only: true
	Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

	// The list of hosts that are attached to this host. Used for the new inventory model and will soon replace hostList above.
	// Read Only: true
	Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`

	// Is the datastore in maintenance mode. Will be set to true when in maintenance mode.
	MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

	// Is this datastore connected to multiple hosts.
	MultipleHostAccess *bool `json:"MultipleHostAccess,omitempty"`

	// Datastore health status, as reported by the hypervisor platform.
	// Enum: [Unknown Degraded Critical Ok]
	Status *string `json:"Status,omitempty"`

	// Does this datastore support thin provisioning for files.
	ThinProvisioningSupported *bool `json:"ThinProvisioningSupported,omitempty"`

	// Space uncommitted in this datastore in bytes.
	UnCommitted int64 `json:"UnCommitted,omitempty"`

	// The URL to access this datastore (example - 'ds:///vmfs/volumes/562a4e8a-0eeb5372-dd61-78baf9cb9afa/').
	URL string `json:"Url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationVmwareDatastore) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationDatastore
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationDatastore = aO0

	// AO1
	var dataAO1 struct {
		Accessible *bool `json:"Accessible,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`

		MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

		MultipleHostAccess *bool `json:"MultipleHostAccess,omitempty"`

		Status *string `json:"Status,omitempty"`

		ThinProvisioningSupported *bool `json:"ThinProvisioningSupported,omitempty"`

		UnCommitted int64 `json:"UnCommitted,omitempty"`

		URL string `json:"Url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Accessible = dataAO1.Accessible

	m.Cluster = dataAO1.Cluster

	m.Datacenter = dataAO1.Datacenter

	m.Hosts = dataAO1.Hosts

	m.MaintenanceMode = dataAO1.MaintenanceMode

	m.MultipleHostAccess = dataAO1.MultipleHostAccess

	m.Status = dataAO1.Status

	m.ThinProvisioningSupported = dataAO1.ThinProvisioningSupported

	m.UnCommitted = dataAO1.UnCommitted

	m.URL = dataAO1.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationVmwareDatastore) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationDatastore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Accessible *bool `json:"Accessible,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Hosts []*VirtualizationVmwareHostRef `json:"Hosts"`

		MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

		MultipleHostAccess *bool `json:"MultipleHostAccess,omitempty"`

		Status *string `json:"Status,omitempty"`

		ThinProvisioningSupported *bool `json:"ThinProvisioningSupported,omitempty"`

		UnCommitted int64 `json:"UnCommitted,omitempty"`

		URL string `json:"Url,omitempty"`
	}

	dataAO1.Accessible = m.Accessible

	dataAO1.Cluster = m.Cluster

	dataAO1.Datacenter = m.Datacenter

	dataAO1.Hosts = m.Hosts

	dataAO1.MaintenanceMode = m.MaintenanceMode

	dataAO1.MultipleHostAccess = m.MultipleHostAccess

	dataAO1.Status = m.Status

	dataAO1.ThinProvisioningSupported = m.ThinProvisioningSupported

	dataAO1.UnCommitted = m.UnCommitted

	dataAO1.URL = m.URL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization vmware datastore
func (m *VirtualizationVmwareDatastore) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationDatastore
	if err := m.VirtualizationDatastore.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationVmwareDatastore) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareDatastore) validateDatacenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if m.Datacenter != nil {
		if err := m.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareDatastore) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var virtualizationVmwareDatastoreTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Degraded","Critical","Ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationVmwareDatastoreTypeStatusPropEnum = append(virtualizationVmwareDatastoreTypeStatusPropEnum, v)
	}
}

// property enum
func (m *VirtualizationVmwareDatastore) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationVmwareDatastoreTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationVmwareDatastore) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationVmwareDatastore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationVmwareDatastore) UnmarshalBinary(b []byte) error {
	var res VirtualizationVmwareDatastore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
