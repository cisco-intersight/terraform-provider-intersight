// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UcsdBackupInfo Ucsd:Backup Info
//
// List of backup images available for target end device for restore operation.
//
// swagger:model ucsdBackupInfo
type UcsdBackupInfo struct {
	RecoveryAbstractBackupInfo

	// Auto generated backup File Name with combination of file prefix given an user input and the timestamp.
	// Read Only: true
	BackupFileName string `json:"BackupFileName,omitempty"`

	// Backup location that contains the backup images for end device which can be used for restore operation.
	// Read Only: true
	BackupLocation string `json:"BackupLocation,omitempty"`

	// Backup server where backup images are maintained.
	// Read Only: true
	BackupServerIP string `json:"BackupServerIp,omitempty"`

	// Size of the backup image in bytes.
	// Read Only: true
	BackupSize int64 `json:"BackupSize,omitempty"`

	// Connector pack versions that are active on the UCS Director when this backup image was taken.
	// Read Only: true
	Connectors []*UcsdConnectorPack `json:"Connectors"`

	// Time taken for the backup to be completed.
	// Read Only: true
	Duration int64 `json:"Duration,omitempty"`

	// The key used for encrypting the backup file.
	EncryptionKey string `json:"EncryptionKey,omitempty"`

	// Reason for backup failure.
	// Read Only: true
	FailureReason string `json:"FailureReason,omitempty"`

	// Backup image got purged or not. The backup images get purged based on the retention count set by the user in the backup config policy.
	// Read Only: true
	IsPurged *bool `json:"IsPurged,omitempty"`

	// Last modified time when this backup record got updated.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"LastModified,omitempty"`

	// Backup current precentage completion status information.
	// Read Only: true
	PercentageCompletion int64 `json:"PercentageCompletion,omitempty"`

	// The end device product version when the backup image was taken.
	ProductVersion string `json:"ProductVersion,omitempty"`

	// Protocol used for the remote backup. possible values are FTP, SCP and SFTP. Not applicable for the localhost (127.0.0.1).
	// Read Only: true
	Protocol string `json:"Protocol,omitempty"`

	// Backup current status stage information.
	// Read Only: true
	StageCompletion string `json:"StageCompletion,omitempty"`

	// Start time of backup when it got initiated.
	// Read Only: true
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// Current status of Backup current.
	// Read Only: true
	Status string `json:"Status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UcsdBackupInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RecoveryAbstractBackupInfo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RecoveryAbstractBackupInfo = aO0

	// AO1
	var dataAO1 struct {
		BackupFileName string `json:"BackupFileName,omitempty"`

		BackupLocation string `json:"BackupLocation,omitempty"`

		BackupServerIP string `json:"BackupServerIp,omitempty"`

		BackupSize int64 `json:"BackupSize,omitempty"`

		Connectors []*UcsdConnectorPack `json:"Connectors"`

		Duration int64 `json:"Duration,omitempty"`

		EncryptionKey string `json:"EncryptionKey,omitempty"`

		FailureReason string `json:"FailureReason,omitempty"`

		IsPurged *bool `json:"IsPurged,omitempty"`

		LastModified strfmt.DateTime `json:"LastModified,omitempty"`

		PercentageCompletion int64 `json:"PercentageCompletion,omitempty"`

		ProductVersion string `json:"ProductVersion,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		StageCompletion string `json:"StageCompletion,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		Status string `json:"Status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BackupFileName = dataAO1.BackupFileName

	m.BackupLocation = dataAO1.BackupLocation

	m.BackupServerIP = dataAO1.BackupServerIP

	m.BackupSize = dataAO1.BackupSize

	m.Connectors = dataAO1.Connectors

	m.Duration = dataAO1.Duration

	m.EncryptionKey = dataAO1.EncryptionKey

	m.FailureReason = dataAO1.FailureReason

	m.IsPurged = dataAO1.IsPurged

	m.LastModified = dataAO1.LastModified

	m.PercentageCompletion = dataAO1.PercentageCompletion

	m.ProductVersion = dataAO1.ProductVersion

	m.Protocol = dataAO1.Protocol

	m.StageCompletion = dataAO1.StageCompletion

	m.StartTime = dataAO1.StartTime

	m.Status = dataAO1.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UcsdBackupInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.RecoveryAbstractBackupInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BackupFileName string `json:"BackupFileName,omitempty"`

		BackupLocation string `json:"BackupLocation,omitempty"`

		BackupServerIP string `json:"BackupServerIp,omitempty"`

		BackupSize int64 `json:"BackupSize,omitempty"`

		Connectors []*UcsdConnectorPack `json:"Connectors"`

		Duration int64 `json:"Duration,omitempty"`

		EncryptionKey string `json:"EncryptionKey,omitempty"`

		FailureReason string `json:"FailureReason,omitempty"`

		IsPurged *bool `json:"IsPurged,omitempty"`

		LastModified strfmt.DateTime `json:"LastModified,omitempty"`

		PercentageCompletion int64 `json:"PercentageCompletion,omitempty"`

		ProductVersion string `json:"ProductVersion,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		StageCompletion string `json:"StageCompletion,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		Status string `json:"Status,omitempty"`
	}

	dataAO1.BackupFileName = m.BackupFileName

	dataAO1.BackupLocation = m.BackupLocation

	dataAO1.BackupServerIP = m.BackupServerIP

	dataAO1.BackupSize = m.BackupSize

	dataAO1.Connectors = m.Connectors

	dataAO1.Duration = m.Duration

	dataAO1.EncryptionKey = m.EncryptionKey

	dataAO1.FailureReason = m.FailureReason

	dataAO1.IsPurged = m.IsPurged

	dataAO1.LastModified = m.LastModified

	dataAO1.PercentageCompletion = m.PercentageCompletion

	dataAO1.ProductVersion = m.ProductVersion

	dataAO1.Protocol = m.Protocol

	dataAO1.StageCompletion = m.StageCompletion

	dataAO1.StartTime = m.StartTime

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ucsd backup info
func (m *UcsdBackupInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RecoveryAbstractBackupInfo
	if err := m.RecoveryAbstractBackupInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UcsdBackupInfo) validateConnectors(formats strfmt.Registry) error {

	if swag.IsZero(m.Connectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Connectors); i++ {
		if swag.IsZero(m.Connectors[i]) { // not required
			continue
		}

		if m.Connectors[i] != nil {
			if err := m.Connectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Connectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UcsdBackupInfo) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UcsdBackupInfo) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UcsdBackupInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UcsdBackupInfo) UnmarshalBinary(b []byte) error {
	var res UcsdBackupInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
