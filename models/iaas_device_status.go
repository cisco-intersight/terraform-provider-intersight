// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IaasDeviceStatus Iaas:Device Status
//
// List of infra accounts managed by UCSD.
//
// swagger:model iaasDeviceStatus
type IaasDeviceStatus struct {
	MoBaseMo

	// The UCSD infra account name. Account Name is created when UCSD admin adds any new infra account (Physical/Virtual/Compute/Network) to be managed by UCSD.
	// Read Only: true
	AccountName string `json:"AccountName,omitempty"`

	// The UCSD Infra Account type.
	// Read Only: true
	AccountType string `json:"AccountType,omitempty"`

	// Describes if the device is claimed in Intersight or not.
	// Read Only: true
	// Enum: [Unknown Yes No Not Applicable]
	ClaimStatus string `json:"ClaimStatus,omitempty"`

	// Describes about the connection status between the UCSD and the actual end device.
	// Read Only: true
	ConnectionStatus string `json:"ConnectionStatus,omitempty"`

	// Describes about the device model.
	// Read Only: true
	DeviceModel string `json:"DeviceModel,omitempty"`

	// Describes about the device vendor/manufacturer of the device.
	// Read Only: true
	DeviceVendor string `json:"DeviceVendor,omitempty"`

	// Describes about the current firmware version running on the device.
	// Read Only: true
	DeviceVersion string `json:"DeviceVersion,omitempty"`

	// A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.
	// When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO.
	// Read Only: true
	GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

	// The IPAddress of the device.
	// Read Only: true
	IPAddress string `json:"IpAddress,omitempty"`

	// Describes about the pod to which this device belongs to in UCSD.
	// Read Only: true
	Pod string `json:"Pod,omitempty"`

	// Describes about the podType of Pod to which this device belongs to in UCSD.
	// Read Only: true
	PodType string `json:"PodType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IaasDeviceStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AccountName string `json:"AccountName,omitempty"`

		AccountType string `json:"AccountType,omitempty"`

		ClaimStatus string `json:"ClaimStatus,omitempty"`

		ConnectionStatus string `json:"ConnectionStatus,omitempty"`

		DeviceModel string `json:"DeviceModel,omitempty"`

		DeviceVendor string `json:"DeviceVendor,omitempty"`

		DeviceVersion string `json:"DeviceVersion,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		Pod string `json:"Pod,omitempty"`

		PodType string `json:"PodType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountName = dataAO1.AccountName

	m.AccountType = dataAO1.AccountType

	m.ClaimStatus = dataAO1.ClaimStatus

	m.ConnectionStatus = dataAO1.ConnectionStatus

	m.DeviceModel = dataAO1.DeviceModel

	m.DeviceVendor = dataAO1.DeviceVendor

	m.DeviceVersion = dataAO1.DeviceVersion

	m.GUID = dataAO1.GUID

	m.IPAddress = dataAO1.IPAddress

	m.Pod = dataAO1.Pod

	m.PodType = dataAO1.PodType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IaasDeviceStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountName string `json:"AccountName,omitempty"`

		AccountType string `json:"AccountType,omitempty"`

		ClaimStatus string `json:"ClaimStatus,omitempty"`

		ConnectionStatus string `json:"ConnectionStatus,omitempty"`

		DeviceModel string `json:"DeviceModel,omitempty"`

		DeviceVendor string `json:"DeviceVendor,omitempty"`

		DeviceVersion string `json:"DeviceVersion,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		Pod string `json:"Pod,omitempty"`

		PodType string `json:"PodType,omitempty"`
	}

	dataAO1.AccountName = m.AccountName

	dataAO1.AccountType = m.AccountType

	dataAO1.ClaimStatus = m.ClaimStatus

	dataAO1.ConnectionStatus = m.ConnectionStatus

	dataAO1.DeviceModel = m.DeviceModel

	dataAO1.DeviceVendor = m.DeviceVendor

	dataAO1.DeviceVersion = m.DeviceVersion

	dataAO1.GUID = m.GUID

	dataAO1.IPAddress = m.IPAddress

	dataAO1.Pod = m.Pod

	dataAO1.PodType = m.PodType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iaas device status
func (m *IaasDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaimStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iaasDeviceStatusTypeClaimStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Yes","No","Not Applicable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iaasDeviceStatusTypeClaimStatusPropEnum = append(iaasDeviceStatusTypeClaimStatusPropEnum, v)
	}
}

// property enum
func (m *IaasDeviceStatus) validateClaimStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iaasDeviceStatusTypeClaimStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IaasDeviceStatus) validateClaimStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ClaimStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateClaimStatusEnum("ClaimStatus", "body", m.ClaimStatus); err != nil {
		return err
	}

	return nil
}

func (m *IaasDeviceStatus) validateGUID(formats strfmt.Registry) error {

	if swag.IsZero(m.GUID) { // not required
		return nil
	}

	if m.GUID != nil {
		if err := m.GUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Guid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IaasDeviceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IaasDeviceStatus) UnmarshalBinary(b []byte) error {
	var res IaasDeviceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
