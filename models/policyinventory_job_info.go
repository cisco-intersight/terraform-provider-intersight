// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyinventoryJobInfo Policyinventory:Job Info
//
// Complex type representing the Job Information of a device.
//
// swagger:model policyinventoryJobInfo
type PolicyinventoryJobInfo struct {
	MoBaseComplexType

	PolicyinventoryJobInfoAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyinventoryJobInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 PolicyinventoryJobInfoAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.PolicyinventoryJobInfoAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyinventoryJobInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.PolicyinventoryJobInfoAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policyinventory job info
func (m *PolicyinventoryJobInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PolicyinventoryJobInfoAO1P1
	if err := m.PolicyinventoryJobInfoAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyinventoryJobInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyinventoryJobInfo) UnmarshalBinary(b []byte) error {
	var res PolicyinventoryJobInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PolicyinventoryJobInfoAO1P1 policyinventory job info a o1 p1
//
// swagger:model PolicyinventoryJobInfoAO1P1
type PolicyinventoryJobInfoAO1P1 struct {

	// Execution status of the inventory job.
	// Read Only: true
	// Enum: [Scheduled Completed Error]
	ExecutionStatus string `json:"ExecutionStatus,omitempty"`

	// Last scheduled time of the inventory job.
	// Read Only: true
	// Format: date-time
	LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

	// Policy ID for the inventory job.
	// Read Only: true
	PolicyID string `json:"PolicyId,omitempty"`

	// Policy name for the inventory job.
	// Read Only: true
	PolicyName string `json:"PolicyName,omitempty"`

	// policyinventory job info a o1 p1
	PolicyinventoryJobInfoAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PolicyinventoryJobInfoAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Execution status of the inventory job.
		// Read Only: true
		// Enum: [Scheduled Completed Error]
		ExecutionStatus string `json:"ExecutionStatus,omitempty"`

		// Last scheduled time of the inventory job.
		// Read Only: true
		// Format: date-time
		LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

		// Policy ID for the inventory job.
		// Read Only: true
		PolicyID string `json:"PolicyId,omitempty"`

		// Policy name for the inventory job.
		// Read Only: true
		PolicyName string `json:"PolicyName,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PolicyinventoryJobInfoAO1P1

	rcv.ExecutionStatus = stage1.ExecutionStatus
	rcv.LastScheduledTime = stage1.LastScheduledTime
	rcv.PolicyID = stage1.PolicyID
	rcv.PolicyName = stage1.PolicyName
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ExecutionStatus")
	delete(stage2, "LastScheduledTime")
	delete(stage2, "PolicyId")
	delete(stage2, "PolicyName")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PolicyinventoryJobInfoAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PolicyinventoryJobInfoAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Execution status of the inventory job.
		// Read Only: true
		// Enum: [Scheduled Completed Error]
		ExecutionStatus string `json:"ExecutionStatus,omitempty"`

		// Last scheduled time of the inventory job.
		// Read Only: true
		// Format: date-time
		LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

		// Policy ID for the inventory job.
		// Read Only: true
		PolicyID string `json:"PolicyId,omitempty"`

		// Policy name for the inventory job.
		// Read Only: true
		PolicyName string `json:"PolicyName,omitempty"`
	}

	stage1.ExecutionStatus = m.ExecutionStatus
	stage1.LastScheduledTime = m.LastScheduledTime
	stage1.PolicyID = m.PolicyID
	stage1.PolicyName = m.PolicyName

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PolicyinventoryJobInfoAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PolicyinventoryJobInfoAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this policyinventory job info a o1 p1
func (m *PolicyinventoryJobInfoAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyinventoryJobInfoAO1P1TypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","Completed","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyinventoryJobInfoAO1P1TypeExecutionStatusPropEnum = append(policyinventoryJobInfoAO1P1TypeExecutionStatusPropEnum, v)
	}
}

const (

	// PolicyinventoryJobInfoAO1P1ExecutionStatusScheduled captures enum value "Scheduled"
	PolicyinventoryJobInfoAO1P1ExecutionStatusScheduled string = "Scheduled"

	// PolicyinventoryJobInfoAO1P1ExecutionStatusCompleted captures enum value "Completed"
	PolicyinventoryJobInfoAO1P1ExecutionStatusCompleted string = "Completed"

	// PolicyinventoryJobInfoAO1P1ExecutionStatusError captures enum value "Error"
	PolicyinventoryJobInfoAO1P1ExecutionStatusError string = "Error"
)

// prop value enum
func (m *PolicyinventoryJobInfoAO1P1) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyinventoryJobInfoAO1P1TypeExecutionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyinventoryJobInfoAO1P1) validateExecutionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("ExecutionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *PolicyinventoryJobInfoAO1P1) validateLastScheduledTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastScheduledTime", "body", "date-time", m.LastScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyinventoryJobInfoAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyinventoryJobInfoAO1P1) UnmarshalBinary(b []byte) error {
	var res PolicyinventoryJobInfoAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
