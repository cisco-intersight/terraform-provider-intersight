// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageArrayDisk Storage:Array Disk
//
// Common attributes of a storage array disk.
//
// swagger:model storageArrayDisk
type StorageArrayDisk struct {
	EquipmentBase

	// Disk name available in storage array.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Storage disk part number.
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// Storage protocol used in disk for communication. Possible values are SAS, SATA and NVMe.
	// Read Only: true
	// Enum: [Unknown SAS NVMe SATA]
	Protocol string `json:"Protocol,omitempty"`

	// Disk speed for read or write operation measured in rpm.
	// Read Only: true
	Speed int64 `json:"Speed,omitempty"`

	// Storage disk health status.
	// Read Only: true
	// Enum: [Unknown Ok Degraded Critical Offline Identifying NotAvailable Updating Unrecognized]
	Status string `json:"Status,omitempty"`

	// Storage array managed object.
	// Read Only: true
	StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

	// Utilization information of the storage disk.
	// Read Only: true
	StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`

	// Storage disk type - it can be SSD, HDD, NVRAM.
	// Read Only: true
	// Enum: [Unknown SSD HDD NVRAM]
	Type string `json:"Type,omitempty"`

	// Storage disk version number.
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageArrayDisk) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		Speed int64 `json:"Speed,omitempty"`

		Status string `json:"Status,omitempty"`

		StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

		StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`

		Type string `json:"Type,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.PartNumber = dataAO1.PartNumber

	m.Protocol = dataAO1.Protocol

	m.Speed = dataAO1.Speed

	m.Status = dataAO1.Status

	m.StorageArray = dataAO1.StorageArray

	m.StorageUtilization = dataAO1.StorageUtilization

	m.Type = dataAO1.Type

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageArrayDisk) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		Speed int64 `json:"Speed,omitempty"`

		Status string `json:"Status,omitempty"`

		StorageArray *StorageGenericArrayRef `json:"StorageArray,omitempty"`

		StorageUtilization *StorageCapacity `json:"StorageUtilization,omitempty"`

		Type string `json:"Type,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.Name = m.Name

	dataAO1.PartNumber = m.PartNumber

	dataAO1.Protocol = m.Protocol

	dataAO1.Speed = m.Speed

	dataAO1.Status = m.Status

	dataAO1.StorageArray = m.StorageArray

	dataAO1.StorageUtilization = m.StorageUtilization

	dataAO1.Type = m.Type

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage array disk
func (m *StorageArrayDisk) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageArrayDiskTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","SAS","NVMe","SATA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageArrayDiskTypeProtocolPropEnum = append(storageArrayDiskTypeProtocolPropEnum, v)
	}
}

// property enum
func (m *StorageArrayDisk) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageArrayDiskTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageArrayDisk) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

var storageArrayDiskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Ok","Degraded","Critical","Offline","Identifying","NotAvailable","Updating","Unrecognized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageArrayDiskTypeStatusPropEnum = append(storageArrayDiskTypeStatusPropEnum, v)
	}
}

// property enum
func (m *StorageArrayDisk) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageArrayDiskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageArrayDisk) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *StorageArrayDisk) validateStorageArray(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageArray) { // not required
		return nil
	}

	if m.StorageArray != nil {
		if err := m.StorageArray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageArray")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArrayDisk) validateStorageUtilization(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUtilization) { // not required
		return nil
	}

	if m.StorageUtilization != nil {
		if err := m.StorageUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageUtilization")
			}
			return err
		}
	}

	return nil
}

var storageArrayDiskTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","SSD","HDD","NVRAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageArrayDiskTypeTypePropEnum = append(storageArrayDiskTypeTypePropEnum, v)
	}
}

// property enum
func (m *StorageArrayDisk) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageArrayDiskTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageArrayDisk) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageArrayDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageArrayDisk) UnmarshalBinary(b []byte) error {
	var res StorageArrayDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
