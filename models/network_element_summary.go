// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkElementSummary Network:Element Summary
//
// View MO which aggregates information pertaining to a network element from mutiple MOs.
//
// swagger:model networkElementSummary
type NetworkElementSummary struct {
	ViewsView

	// The administrative state of the network Element inband management interface.
	// Read Only: true
	AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

	// device mo Id
	// Read Only: true
	DeviceMoID string `json:"DeviceMoId,omitempty"`

	// The Distinguished Name unambiguously identifies an object in the system.
	// Read Only: true
	Dn string `json:"Dn,omitempty"`

	// fault summary
	// Read Only: true
	FaultSummary int64 `json:"FaultSummary,omitempty"`

	// Running firmware information.
	// Read Only: true
	Firmware string `json:"Firmware,omitempty"`

	// The IP address of the network Element inband management interface.
	// Read Only: true
	InbandIPAddress string `json:"InbandIpAddress,omitempty"`

	// The default gateway of the network Element inband management interface.
	// Read Only: true
	InbandIPGateway string `json:"InbandIpGateway,omitempty"`

	// The network mask of the network Element inband management interface.
	// Read Only: true
	InbandIPMask string `json:"InbandIpMask,omitempty"`

	// The VLAN ID of the network Element inband management interface.
	// Read Only: true
	InbandVlan int64 `json:"InbandVlan,omitempty"`

	// IP version 4 address is saved in this property.
	// Read Only: true
	IPV4Address string `json:"Ipv4Address,omitempty"`

	// This field identifies the model of the given component.
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// Name of the ElementSummary object is saved in this property.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Total number of Ethernet ports.
	// Read Only: true
	NumEtherPorts int64 `json:"NumEtherPorts,omitempty"`

	// Total number of configured Ethernet ports.
	// Read Only: true
	NumEtherPortsConfigured int64 `json:"NumEtherPortsConfigured,omitempty"`

	// Total number of Ethernet ports which are UP.
	// Read Only: true
	NumEtherPortsLinkUp int64 `json:"NumEtherPortsLinkUp,omitempty"`

	// Total number of expansion modules.
	// Read Only: true
	NumExpansionModules int64 `json:"NumExpansionModules,omitempty"`

	// Total number of FC ports.
	// Read Only: true
	NumFcPorts int64 `json:"NumFcPorts,omitempty"`

	// Total number of configured FC ports.
	// Read Only: true
	NumFcPortsConfigured int64 `json:"NumFcPortsConfigured,omitempty"`

	// Total number of FC ports which are UP.
	// Read Only: true
	NumFcPortsLinkUp int64 `json:"NumFcPortsLinkUp,omitempty"`

	// The IP address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

	// The default gateway of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

	// The IPv4 address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

	// The default IPv4 gateway of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

	// The IPv6 address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

	// The default IPv6 gateway of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

	// The network mask of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

	// The MAC address of the network Element out-of-band management interface.
	// Read Only: true
	OutOfBandMac string `json:"OutOfBandMac,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// revision
	// Read Only: true
	Revision string `json:"Revision,omitempty"`

	// The Relative Name uniquely identifies an object within a given context.
	// Read Only: true
	Rn string `json:"Rn,omitempty"`

	// This field identifies the serial of the given component.
	// Read Only: true
	Serial string `json:"Serial,omitempty"`

	// The source object type of this view MO.
	// Read Only: true
	SourceObjectType string `json:"SourceObjectType,omitempty"`

	// The Switch Id of the network Element.
	// Read Only: true
	SwitchID string `json:"SwitchId,omitempty"`

	// This field identifies the vendor of the given component.
	// Read Only: true
	Vendor string `json:"Vendor,omitempty"`

	// Version holds the firmware version related information.
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NetworkElementSummary) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ViewsView
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ViewsView = aO0

	// AO1
	var dataAO1 struct {
		AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

		DeviceMoID string `json:"DeviceMoId,omitempty"`

		Dn string `json:"Dn,omitempty"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		Firmware string `json:"Firmware,omitempty"`

		InbandIPAddress string `json:"InbandIpAddress,omitempty"`

		InbandIPGateway string `json:"InbandIpGateway,omitempty"`

		InbandIPMask string `json:"InbandIpMask,omitempty"`

		InbandVlan int64 `json:"InbandVlan,omitempty"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		Model string `json:"Model,omitempty"`

		Name string `json:"Name,omitempty"`

		NumEtherPorts int64 `json:"NumEtherPorts,omitempty"`

		NumEtherPortsConfigured int64 `json:"NumEtherPortsConfigured,omitempty"`

		NumEtherPortsLinkUp int64 `json:"NumEtherPortsLinkUp,omitempty"`

		NumExpansionModules int64 `json:"NumExpansionModules,omitempty"`

		NumFcPorts int64 `json:"NumFcPorts,omitempty"`

		NumFcPortsConfigured int64 `json:"NumFcPortsConfigured,omitempty"`

		NumFcPortsLinkUp int64 `json:"NumFcPortsLinkUp,omitempty"`

		OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

		OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

		OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

		OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

		OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

		OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

		OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

		OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

		OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

		OutOfBandMac string `json:"OutOfBandMac,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Revision string `json:"Revision,omitempty"`

		Rn string `json:"Rn,omitempty"`

		Serial string `json:"Serial,omitempty"`

		SourceObjectType string `json:"SourceObjectType,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		Vendor string `json:"Vendor,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdminInbandInterfaceState = dataAO1.AdminInbandInterfaceState

	m.DeviceMoID = dataAO1.DeviceMoID

	m.Dn = dataAO1.Dn

	m.FaultSummary = dataAO1.FaultSummary

	m.Firmware = dataAO1.Firmware

	m.InbandIPAddress = dataAO1.InbandIPAddress

	m.InbandIPGateway = dataAO1.InbandIPGateway

	m.InbandIPMask = dataAO1.InbandIPMask

	m.InbandVlan = dataAO1.InbandVlan

	m.IPV4Address = dataAO1.IPV4Address

	m.Model = dataAO1.Model

	m.Name = dataAO1.Name

	m.NumEtherPorts = dataAO1.NumEtherPorts

	m.NumEtherPortsConfigured = dataAO1.NumEtherPortsConfigured

	m.NumEtherPortsLinkUp = dataAO1.NumEtherPortsLinkUp

	m.NumExpansionModules = dataAO1.NumExpansionModules

	m.NumFcPorts = dataAO1.NumFcPorts

	m.NumFcPortsConfigured = dataAO1.NumFcPortsConfigured

	m.NumFcPortsLinkUp = dataAO1.NumFcPortsLinkUp

	m.OutOfBandIPAddress = dataAO1.OutOfBandIPAddress

	m.OutOfBandIPGateway = dataAO1.OutOfBandIPGateway

	m.OutOfBandIPMask = dataAO1.OutOfBandIPMask

	m.OutOfBandIPV4Address = dataAO1.OutOfBandIPV4Address

	m.OutOfBandIPV4Gateway = dataAO1.OutOfBandIPV4Gateway

	m.OutOfBandIPV4Mask = dataAO1.OutOfBandIPV4Mask

	m.OutOfBandIPV6Address = dataAO1.OutOfBandIPV6Address

	m.OutOfBandIPV6Gateway = dataAO1.OutOfBandIPV6Gateway

	m.OutOfBandIPV6Prefix = dataAO1.OutOfBandIPV6Prefix

	m.OutOfBandMac = dataAO1.OutOfBandMac

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Revision = dataAO1.Revision

	m.Rn = dataAO1.Rn

	m.Serial = dataAO1.Serial

	m.SourceObjectType = dataAO1.SourceObjectType

	m.SwitchID = dataAO1.SwitchID

	m.Vendor = dataAO1.Vendor

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NetworkElementSummary) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ViewsView)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdminInbandInterfaceState string `json:"AdminInbandInterfaceState,omitempty"`

		DeviceMoID string `json:"DeviceMoId,omitempty"`

		Dn string `json:"Dn,omitempty"`

		FaultSummary int64 `json:"FaultSummary,omitempty"`

		Firmware string `json:"Firmware,omitempty"`

		InbandIPAddress string `json:"InbandIpAddress,omitempty"`

		InbandIPGateway string `json:"InbandIpGateway,omitempty"`

		InbandIPMask string `json:"InbandIpMask,omitempty"`

		InbandVlan int64 `json:"InbandVlan,omitempty"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		Model string `json:"Model,omitempty"`

		Name string `json:"Name,omitempty"`

		NumEtherPorts int64 `json:"NumEtherPorts,omitempty"`

		NumEtherPortsConfigured int64 `json:"NumEtherPortsConfigured,omitempty"`

		NumEtherPortsLinkUp int64 `json:"NumEtherPortsLinkUp,omitempty"`

		NumExpansionModules int64 `json:"NumExpansionModules,omitempty"`

		NumFcPorts int64 `json:"NumFcPorts,omitempty"`

		NumFcPortsConfigured int64 `json:"NumFcPortsConfigured,omitempty"`

		NumFcPortsLinkUp int64 `json:"NumFcPortsLinkUp,omitempty"`

		OutOfBandIPAddress string `json:"OutOfBandIpAddress,omitempty"`

		OutOfBandIPGateway string `json:"OutOfBandIpGateway,omitempty"`

		OutOfBandIPMask string `json:"OutOfBandIpMask,omitempty"`

		OutOfBandIPV4Address string `json:"OutOfBandIpv4Address,omitempty"`

		OutOfBandIPV4Gateway string `json:"OutOfBandIpv4Gateway,omitempty"`

		OutOfBandIPV4Mask string `json:"OutOfBandIpv4Mask,omitempty"`

		OutOfBandIPV6Address string `json:"OutOfBandIpv6Address,omitempty"`

		OutOfBandIPV6Gateway string `json:"OutOfBandIpv6Gateway,omitempty"`

		OutOfBandIPV6Prefix string `json:"OutOfBandIpv6Prefix,omitempty"`

		OutOfBandMac string `json:"OutOfBandMac,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Revision string `json:"Revision,omitempty"`

		Rn string `json:"Rn,omitempty"`

		Serial string `json:"Serial,omitempty"`

		SourceObjectType string `json:"SourceObjectType,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		Vendor string `json:"Vendor,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.AdminInbandInterfaceState = m.AdminInbandInterfaceState

	dataAO1.DeviceMoID = m.DeviceMoID

	dataAO1.Dn = m.Dn

	dataAO1.FaultSummary = m.FaultSummary

	dataAO1.Firmware = m.Firmware

	dataAO1.InbandIPAddress = m.InbandIPAddress

	dataAO1.InbandIPGateway = m.InbandIPGateway

	dataAO1.InbandIPMask = m.InbandIPMask

	dataAO1.InbandVlan = m.InbandVlan

	dataAO1.IPV4Address = m.IPV4Address

	dataAO1.Model = m.Model

	dataAO1.Name = m.Name

	dataAO1.NumEtherPorts = m.NumEtherPorts

	dataAO1.NumEtherPortsConfigured = m.NumEtherPortsConfigured

	dataAO1.NumEtherPortsLinkUp = m.NumEtherPortsLinkUp

	dataAO1.NumExpansionModules = m.NumExpansionModules

	dataAO1.NumFcPorts = m.NumFcPorts

	dataAO1.NumFcPortsConfigured = m.NumFcPortsConfigured

	dataAO1.NumFcPortsLinkUp = m.NumFcPortsLinkUp

	dataAO1.OutOfBandIPAddress = m.OutOfBandIPAddress

	dataAO1.OutOfBandIPGateway = m.OutOfBandIPGateway

	dataAO1.OutOfBandIPMask = m.OutOfBandIPMask

	dataAO1.OutOfBandIPV4Address = m.OutOfBandIPV4Address

	dataAO1.OutOfBandIPV4Gateway = m.OutOfBandIPV4Gateway

	dataAO1.OutOfBandIPV4Mask = m.OutOfBandIPV4Mask

	dataAO1.OutOfBandIPV6Address = m.OutOfBandIPV6Address

	dataAO1.OutOfBandIPV6Gateway = m.OutOfBandIPV6Gateway

	dataAO1.OutOfBandIPV6Prefix = m.OutOfBandIPV6Prefix

	dataAO1.OutOfBandMac = m.OutOfBandMac

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Revision = m.Revision

	dataAO1.Rn = m.Rn

	dataAO1.Serial = m.Serial

	dataAO1.SourceObjectType = m.SourceObjectType

	dataAO1.SwitchID = m.SwitchID

	dataAO1.Vendor = m.Vendor

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this network element summary
func (m *NetworkElementSummary) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ViewsView
	if err := m.ViewsView.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkElementSummary) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkElementSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkElementSummary) UnmarshalBinary(b []byte) error {
	var res NetworkElementSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
