// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate X509:Certificate
//
// The representation of an X.509 certificate.
//
// swagger:model x509Certificate
type X509Certificate struct {
	MoBaseComplexType

	X509CertificateAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *X509Certificate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 X509CertificateAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.X509CertificateAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m X509Certificate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.X509CertificateAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with X509CertificateAO1P1
	if err := m.X509CertificateAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// X509CertificateAO1P1 x509 certificate a o1 p1
//
// swagger:model X509CertificateAO1P1
type X509CertificateAO1P1 struct {

	// The X.509 distinguished name of the issuer of this certificate.
	// Read Only: true
	Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

	// The date on which the certificate's validity period ends.
	// Read Only: true
	// Format: date-time
	NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

	// The date on which the certificate's validity period begins.
	// Read Only: true
	// Format: date-time
	NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

	// The base64 encoded certificate in PEM format.
	PemCertificate string `json:"PemCertificate,omitempty"`

	// The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.
	// Read Only: true
	Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

	// Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).
	// Read Only: true
	SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

	// The X.509 distinguished name of the subject of this certificate.
	// Read Only: true
	Subject *PkixDistinguishedName `json:"Subject,omitempty"`

	// x509 certificate a o1 p1
	X509CertificateAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *X509CertificateAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The X.509 distinguished name of the issuer of this certificate.
		// Read Only: true
		Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

		// The date on which the certificate's validity period ends.
		// Read Only: true
		// Format: date-time
		NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

		// The date on which the certificate's validity period begins.
		// Read Only: true
		// Format: date-time
		NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

		// The base64 encoded certificate in PEM format.
		PemCertificate string `json:"PemCertificate,omitempty"`

		// The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.
		// Read Only: true
		Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

		// Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).
		// Read Only: true
		SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

		// The X.509 distinguished name of the subject of this certificate.
		// Read Only: true
		Subject *PkixDistinguishedName `json:"Subject,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv X509CertificateAO1P1

	rcv.Issuer = stage1.Issuer
	rcv.NotAfter = stage1.NotAfter
	rcv.NotBefore = stage1.NotBefore
	rcv.PemCertificate = stage1.PemCertificate
	rcv.Sha256Fingerprint = stage1.Sha256Fingerprint
	rcv.SignatureAlgorithm = stage1.SignatureAlgorithm
	rcv.Subject = stage1.Subject
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Issuer")
	delete(stage2, "NotAfter")
	delete(stage2, "NotBefore")
	delete(stage2, "PemCertificate")
	delete(stage2, "Sha256Fingerprint")
	delete(stage2, "SignatureAlgorithm")
	delete(stage2, "Subject")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.X509CertificateAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m X509CertificateAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The X.509 distinguished name of the issuer of this certificate.
		// Read Only: true
		Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

		// The date on which the certificate's validity period ends.
		// Read Only: true
		// Format: date-time
		NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

		// The date on which the certificate's validity period begins.
		// Read Only: true
		// Format: date-time
		NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

		// The base64 encoded certificate in PEM format.
		PemCertificate string `json:"PemCertificate,omitempty"`

		// The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.
		// Read Only: true
		Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

		// Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).
		// Read Only: true
		SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

		// The X.509 distinguished name of the subject of this certificate.
		// Read Only: true
		Subject *PkixDistinguishedName `json:"Subject,omitempty"`
	}

	stage1.Issuer = m.Issuer
	stage1.NotAfter = m.NotAfter
	stage1.NotBefore = m.NotBefore
	stage1.PemCertificate = m.PemCertificate
	stage1.Sha256Fingerprint = m.Sha256Fingerprint
	stage1.SignatureAlgorithm = m.SignatureAlgorithm
	stage1.Subject = m.Subject

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.X509CertificateAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.X509CertificateAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this x509 certificate a o1 p1
func (m *X509CertificateAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509CertificateAO1P1) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Issuer")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateAO1P1) validateNotAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("NotAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509CertificateAO1P1) validateNotBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("NotBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509CertificateAO1P1) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509CertificateAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509CertificateAO1P1) UnmarshalBinary(b []byte) error {
	var res X509CertificateAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
