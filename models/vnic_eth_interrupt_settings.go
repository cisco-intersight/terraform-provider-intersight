// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VnicEthInterruptSettings Interrupt Settings
//
// Interrupt settings for the virtual ethernet interface.
//
// swagger:model vnicEthInterruptSettings
type VnicEthInterruptSettings struct {
	MoBaseComplexType

	VnicEthInterruptSettingsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicEthInterruptSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 VnicEthInterruptSettingsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.VnicEthInterruptSettingsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicEthInterruptSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.VnicEthInterruptSettingsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic eth interrupt settings
func (m *VnicEthInterruptSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VnicEthInterruptSettingsAO1P1
	if err := m.VnicEthInterruptSettingsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicEthInterruptSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicEthInterruptSettings) UnmarshalBinary(b []byte) error {
	var res VnicEthInterruptSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VnicEthInterruptSettingsAO1P1 vnic eth interrupt settings a o1 p1
//
// swagger:model VnicEthInterruptSettingsAO1P1
type VnicEthInterruptSettingsAO1P1 struct {

	// The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.
	CoalescingTime int64 `json:"CoalescingTime,omitempty"`

	// Interrupt Coalescing Type. This can be one of the following:- MIN  - The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE - The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.
	// Enum: [MIN IDLE]
	CoalescingType *string `json:"CoalescingType,omitempty"`

	// The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.
	Count int64 `json:"Count,omitempty"`

	// Preferred driver interrupt mode. This can be one of the following:- MSIx - Message Signaled Interrupts (MSI) with the optional extension. MSI  - MSI only. INTx - PCI INTx interrupts. MSIx is the recommended option.
	// Enum: [MSIx MSI INTx]
	Mode *string `json:"Mode,omitempty"`

	// vnic eth interrupt settings a o1 p1
	VnicEthInterruptSettingsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *VnicEthInterruptSettingsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.
		CoalescingTime int64 `json:"CoalescingTime,omitempty"`

		// Interrupt Coalescing Type. This can be one of the following:- MIN  - The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE - The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.
		// Enum: [MIN IDLE]
		CoalescingType *string `json:"CoalescingType,omitempty"`

		// The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.
		Count int64 `json:"Count,omitempty"`

		// Preferred driver interrupt mode. This can be one of the following:- MSIx - Message Signaled Interrupts (MSI) with the optional extension. MSI  - MSI only. INTx - PCI INTx interrupts. MSIx is the recommended option.
		// Enum: [MSIx MSI INTx]
		Mode *string `json:"Mode,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv VnicEthInterruptSettingsAO1P1

	rcv.CoalescingTime = stage1.CoalescingTime
	rcv.CoalescingType = stage1.CoalescingType
	rcv.Count = stage1.Count
	rcv.Mode = stage1.Mode
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "CoalescingTime")
	delete(stage2, "CoalescingType")
	delete(stage2, "Count")
	delete(stage2, "Mode")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.VnicEthInterruptSettingsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m VnicEthInterruptSettingsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.
		CoalescingTime int64 `json:"CoalescingTime,omitempty"`

		// Interrupt Coalescing Type. This can be one of the following:- MIN  - The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE - The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.
		// Enum: [MIN IDLE]
		CoalescingType *string `json:"CoalescingType,omitempty"`

		// The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.
		Count int64 `json:"Count,omitempty"`

		// Preferred driver interrupt mode. This can be one of the following:- MSIx - Message Signaled Interrupts (MSI) with the optional extension. MSI  - MSI only. INTx - PCI INTx interrupts. MSIx is the recommended option.
		// Enum: [MSIx MSI INTx]
		Mode *string `json:"Mode,omitempty"`
	}

	stage1.CoalescingTime = m.CoalescingTime
	stage1.CoalescingType = m.CoalescingType
	stage1.Count = m.Count
	stage1.Mode = m.Mode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.VnicEthInterruptSettingsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.VnicEthInterruptSettingsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this vnic eth interrupt settings a o1 p1
func (m *VnicEthInterruptSettingsAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoalescingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vnicEthInterruptSettingsAO1P1TypeCoalescingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MIN","IDLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicEthInterruptSettingsAO1P1TypeCoalescingTypePropEnum = append(vnicEthInterruptSettingsAO1P1TypeCoalescingTypePropEnum, v)
	}
}

const (

	// VnicEthInterruptSettingsAO1P1CoalescingTypeMIN captures enum value "MIN"
	VnicEthInterruptSettingsAO1P1CoalescingTypeMIN string = "MIN"

	// VnicEthInterruptSettingsAO1P1CoalescingTypeIDLE captures enum value "IDLE"
	VnicEthInterruptSettingsAO1P1CoalescingTypeIDLE string = "IDLE"
)

// prop value enum
func (m *VnicEthInterruptSettingsAO1P1) validateCoalescingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicEthInterruptSettingsAO1P1TypeCoalescingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VnicEthInterruptSettingsAO1P1) validateCoalescingType(formats strfmt.Registry) error {

	if swag.IsZero(m.CoalescingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCoalescingTypeEnum("CoalescingType", "body", *m.CoalescingType); err != nil {
		return err
	}

	return nil
}

var vnicEthInterruptSettingsAO1P1TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MSIx","MSI","INTx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicEthInterruptSettingsAO1P1TypeModePropEnum = append(vnicEthInterruptSettingsAO1P1TypeModePropEnum, v)
	}
}

const (

	// VnicEthInterruptSettingsAO1P1ModeMSIx captures enum value "MSIx"
	VnicEthInterruptSettingsAO1P1ModeMSIx string = "MSIx"

	// VnicEthInterruptSettingsAO1P1ModeMSI captures enum value "MSI"
	VnicEthInterruptSettingsAO1P1ModeMSI string = "MSI"

	// VnicEthInterruptSettingsAO1P1ModeINTx captures enum value "INTx"
	VnicEthInterruptSettingsAO1P1ModeINTx string = "INTx"
)

// prop value enum
func (m *VnicEthInterruptSettingsAO1P1) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicEthInterruptSettingsAO1P1TypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VnicEthInterruptSettingsAO1P1) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("Mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VnicEthInterruptSettingsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicEthInterruptSettingsAO1P1) UnmarshalBinary(b []byte) error {
	var res VnicEthInterruptSettingsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
