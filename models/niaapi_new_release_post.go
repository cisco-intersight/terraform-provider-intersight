// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NiaapiNewReleasePost Niaapi:New Release Post
//
// This contains the new release notice.
//
// swagger:model niaapiNewReleasePost
type NiaapiNewReleasePost struct {
	MoBaseMo

	// The date when this new release notice is posted.
	// Format: date-time
	PostDate strfmt.DateTime `json:"PostDate,omitempty"`

	// Detail of this post including the content and the date it was posted.
	PostDetail *NiaapiNewReleaseDetail `json:"PostDetail,omitempty"`

	// The document type of this post.
	PostType string `json:"PostType,omitempty"`

	// Identificator of this inbox post.
	Postid string `json:"Postid,omitempty"`

	// Revision number of this notice.
	Revision string `json:"Revision,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiNewReleasePost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		PostDate strfmt.DateTime `json:"PostDate,omitempty"`

		PostDetail *NiaapiNewReleaseDetail `json:"PostDetail,omitempty"`

		PostType string `json:"PostType,omitempty"`

		Postid string `json:"Postid,omitempty"`

		Revision string `json:"Revision,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.PostDate = dataAO1.PostDate

	m.PostDetail = dataAO1.PostDetail

	m.PostType = dataAO1.PostType

	m.Postid = dataAO1.Postid

	m.Revision = dataAO1.Revision

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiNewReleasePost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		PostDate strfmt.DateTime `json:"PostDate,omitempty"`

		PostDetail *NiaapiNewReleaseDetail `json:"PostDetail,omitempty"`

		PostType string `json:"PostType,omitempty"`

		Postid string `json:"Postid,omitempty"`

		Revision string `json:"Revision,omitempty"`
	}

	dataAO1.PostDate = m.PostDate

	dataAO1.PostDetail = m.PostDetail

	dataAO1.PostType = m.PostType

	dataAO1.Postid = m.Postid

	dataAO1.Revision = m.Revision

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi new release post
func (m *NiaapiNewReleasePost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiNewReleasePost) validatePostDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PostDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PostDate", "body", "date-time", m.PostDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiaapiNewReleasePost) validatePostDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.PostDetail) { // not required
		return nil
	}

	if m.PostDetail != nil {
		if err := m.PostDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PostDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiNewReleasePost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiNewReleasePost) UnmarshalBinary(b []byte) error {
	var res NiaapiNewReleasePost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
