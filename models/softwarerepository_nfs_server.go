// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SoftwarerepositoryNfsServer NFS
//
// An external file repository accessible through the NFS protocol.
//
// swagger:model softwarerepositoryNfsServer
type SoftwarerepositoryNfsServer struct {
	SoftwarerepositoryFileServer

	// For NFS, leave the field blank or enter one or more comma seperated options from the following.For Example, " " , " ro " , " ro , rw " .
	// * ro.
	// * rw.
	// * nolock.
	// * noexec.
	// * soft.
	// * PORT=VALUE.
	// * timeo=VALUE.
	// * retry=VALUE.
	// Read Only: true
	MountOptions string `json:"MountOptions,omitempty"`

	// Filename of the image in the NFS server. For example:ucs-c220m5-huu-3.1.2c.iso.
	RemoteFile string `json:"RemoteFile,omitempty"`

	// Hostname or IP Address of the NFS server.
	RemoteIP string `json:"RemoteIp,omitempty"`

	// Remote directory where the image is present. For example:/share/subfolder.
	RemoteShare string `json:"RemoteShare,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SoftwarerepositoryNfsServer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SoftwarerepositoryFileServer
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SoftwarerepositoryFileServer = aO0

	// AO1
	var dataAO1 struct {
		MountOptions string `json:"MountOptions,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemoteIP string `json:"RemoteIp,omitempty"`

		RemoteShare string `json:"RemoteShare,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.MountOptions = dataAO1.MountOptions

	m.RemoteFile = dataAO1.RemoteFile

	m.RemoteIP = dataAO1.RemoteIP

	m.RemoteShare = dataAO1.RemoteShare

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SoftwarerepositoryNfsServer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SoftwarerepositoryFileServer)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		MountOptions string `json:"MountOptions,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemoteIP string `json:"RemoteIp,omitempty"`

		RemoteShare string `json:"RemoteShare,omitempty"`
	}

	dataAO1.MountOptions = m.MountOptions

	dataAO1.RemoteFile = m.RemoteFile

	dataAO1.RemoteIP = m.RemoteIP

	dataAO1.RemoteShare = m.RemoteShare

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this softwarerepository nfs server
func (m *SoftwarerepositoryNfsServer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SoftwarerepositoryFileServer
	if err := m.SoftwarerepositoryFileServer.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SoftwarerepositoryNfsServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwarerepositoryNfsServer) UnmarshalBinary(b []byte) error {
	var res SoftwarerepositoryNfsServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
