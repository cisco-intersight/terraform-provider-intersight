// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VnicCompletionQueueSettings Completion Queue Settings
//
// Completion Queue resource settings.
//
// swagger:model vnicCompletionQueueSettings
type VnicCompletionQueueSettings struct {
	MoBaseComplexType

	VnicCompletionQueueSettingsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicCompletionQueueSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 VnicCompletionQueueSettingsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.VnicCompletionQueueSettingsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicCompletionQueueSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.VnicCompletionQueueSettingsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic completion queue settings
func (m *VnicCompletionQueueSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VnicCompletionQueueSettingsAO1P1
	if err := m.VnicCompletionQueueSettingsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicCompletionQueueSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicCompletionQueueSettings) UnmarshalBinary(b []byte) error {
	var res VnicCompletionQueueSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VnicCompletionQueueSettingsAO1P1 vnic completion queue settings a o1 p1
//
// swagger:model VnicCompletionQueueSettingsAO1P1
type VnicCompletionQueueSettingsAO1P1 struct {

	// The number of completion queue resources to allocate. In general, the number of completion queue resources you should allocate is equal to the number of transmit queue resources plus the number of receive queue resources.
	Count int64 `json:"Count,omitempty"`

	// The number of descriptors in each completion queue.
	// Read Only: true
	RingSize int64 `json:"RingSize,omitempty"`

	// vnic completion queue settings a o1 p1
	VnicCompletionQueueSettingsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *VnicCompletionQueueSettingsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The number of completion queue resources to allocate. In general, the number of completion queue resources you should allocate is equal to the number of transmit queue resources plus the number of receive queue resources.
		Count int64 `json:"Count,omitempty"`

		// The number of descriptors in each completion queue.
		// Read Only: true
		RingSize int64 `json:"RingSize,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv VnicCompletionQueueSettingsAO1P1

	rcv.Count = stage1.Count
	rcv.RingSize = stage1.RingSize
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Count")
	delete(stage2, "RingSize")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.VnicCompletionQueueSettingsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m VnicCompletionQueueSettingsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The number of completion queue resources to allocate. In general, the number of completion queue resources you should allocate is equal to the number of transmit queue resources plus the number of receive queue resources.
		Count int64 `json:"Count,omitempty"`

		// The number of descriptors in each completion queue.
		// Read Only: true
		RingSize int64 `json:"RingSize,omitempty"`
	}

	stage1.Count = m.Count
	stage1.RingSize = m.RingSize

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.VnicCompletionQueueSettingsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.VnicCompletionQueueSettingsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this vnic completion queue settings a o1 p1
func (m *VnicCompletionQueueSettingsAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VnicCompletionQueueSettingsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicCompletionQueueSettingsAO1P1) UnmarshalBinary(b []byte) error {
	var res VnicCompletionQueueSettingsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
