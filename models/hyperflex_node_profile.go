// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HyperflexNodeProfile Hyperflex:Node Profile
//
// A configuration profile per node in the HyperFlex cluster.
// It defines node settings such as IP address configuration for hypervisor management network, storage data network, HyperFlex management network, and the assigned physical server.
//
// swagger:model hyperflexNodeProfile
type HyperflexNodeProfile struct {
	PolicyAbstractProfile

	// The physical server assigned to this node profile.
	AssignedServer *ComputeRackUnitRef `json:"AssignedServer,omitempty"`

	// A collection of references to the [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) Managed Object.
	// When this managed object is deleted, the referenced [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) MO unsets its reference to this deleted MO.
	ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

	// IP address for storage data network (Controller VM interface).
	HxdpDataIP string `json:"HxdpDataIp,omitempty"`

	// IP address for HyperFlex management network.
	HxdpMgmtIP string `json:"HxdpMgmtIp,omitempty"`

	// IP address for storage data network (Hypervisor interface).
	HypervisorDataIP string `json:"HypervisorDataIp,omitempty"`

	// IP address for Hypervisor management network.
	HypervisorMgmtIP string `json:"HypervisorMgmtIp,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexNodeProfile) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractProfile
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractProfile = aO0

	// AO1
	var dataAO1 struct {
		AssignedServer *ComputeRackUnitRef `json:"AssignedServer,omitempty"`

		ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

		HxdpDataIP string `json:"HxdpDataIp,omitempty"`

		HxdpMgmtIP string `json:"HxdpMgmtIp,omitempty"`

		HypervisorDataIP string `json:"HypervisorDataIp,omitempty"`

		HypervisorMgmtIP string `json:"HypervisorMgmtIp,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AssignedServer = dataAO1.AssignedServer

	m.ClusterProfile = dataAO1.ClusterProfile

	m.HxdpDataIP = dataAO1.HxdpDataIP

	m.HxdpMgmtIP = dataAO1.HxdpMgmtIP

	m.HypervisorDataIP = dataAO1.HypervisorDataIP

	m.HypervisorMgmtIP = dataAO1.HypervisorMgmtIP

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexNodeProfile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AssignedServer *ComputeRackUnitRef `json:"AssignedServer,omitempty"`

		ClusterProfile *HyperflexClusterProfileRef `json:"ClusterProfile,omitempty"`

		HxdpDataIP string `json:"HxdpDataIp,omitempty"`

		HxdpMgmtIP string `json:"HxdpMgmtIp,omitempty"`

		HypervisorDataIP string `json:"HypervisorDataIp,omitempty"`

		HypervisorMgmtIP string `json:"HypervisorMgmtIp,omitempty"`
	}

	dataAO1.AssignedServer = m.AssignedServer

	dataAO1.ClusterProfile = m.ClusterProfile

	dataAO1.HxdpDataIP = m.HxdpDataIP

	dataAO1.HxdpMgmtIP = m.HxdpMgmtIP

	dataAO1.HypervisorDataIP = m.HypervisorDataIP

	dataAO1.HypervisorMgmtIP = m.HypervisorMgmtIP

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex node profile
func (m *HyperflexNodeProfile) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractProfile
	if err := m.PolicyAbstractProfile.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexNodeProfile) validateAssignedServer(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedServer) { // not required
		return nil
	}

	if m.AssignedServer != nil {
		if err := m.AssignedServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssignedServer")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexNodeProfile) validateClusterProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfile) { // not required
		return nil
	}

	if m.ClusterProfile != nil {
		if err := m.ClusterProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ClusterProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexNodeProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexNodeProfile) UnmarshalBinary(b []byte) error {
	var res HyperflexNodeProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
