// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperflexClusterNetworkPolicy Network Configuration
//
// A policy specifying VLANs for management, VM migration, and VM traffic.
//
// swagger:model hyperflexClusterNetworkPolicy
type HyperflexClusterNetworkPolicy struct {
	PolicyAbstractPolicy

	// List of cluster profiles using this policy.
	ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

	// Enable or disable jumbo frames.
	JumboFrame *bool `json:"JumboFrame,omitempty"`

	// The Out-of-band KVM IP range.
	// Configures the service profiles to use IP addresses within this range for setting the KVM IP of a server.
	KvmIPRange *HyperflexIPAddrRange `json:"KvmIpRange,omitempty"`

	// The MAC address prefix range for configuring vNICs.
	// Configures the service profiles to use MAC address prefixes within this range for setting the MAC address of server vNICs.
	MacPrefixRange *HyperflexMacAddrPrefixRange `json:"MacPrefixRange,omitempty"`

	// The VLAN for the management network.
	MgmtVlan *HyperflexNamedVlan `json:"MgmtVlan,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Link speed of the server adapter port to the upstream switch. When the policy is attached to a cluster profile with EDGE management platform, the uplink speed can be '1G' or '10G+'. Use '10G+' for link speeds of 10G or above. When the policy is attached to a cluster profile with Fabric Interconnect management platform, the uplink speed can be 'default' only.
	// Enum: [default 1G 10G]
	UplinkSpeed *string `json:"UplinkSpeed,omitempty"`

	// The VM migration VLAN.
	// This VLAN is used for transfering VMs from one host to another during operations such a cluster upgrade.
	VMMigrationVlan *HyperflexNamedVlan `json:"VmMigrationVlan,omitempty"`

	// The VLANs for VM traffic.
	// Guest VMs hosted on the HyperFlex cluster use these VLANs for network communication.
	VMNetworkVlans []*HyperflexNamedVlan `json:"VmNetworkVlans"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexClusterNetworkPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

		JumboFrame *bool `json:"JumboFrame,omitempty"`

		KvmIPRange *HyperflexIPAddrRange `json:"KvmIpRange,omitempty"`

		MacPrefixRange *HyperflexMacAddrPrefixRange `json:"MacPrefixRange,omitempty"`

		MgmtVlan *HyperflexNamedVlan `json:"MgmtVlan,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		UplinkSpeed *string `json:"UplinkSpeed,omitempty"`

		VMMigrationVlan *HyperflexNamedVlan `json:"VmMigrationVlan,omitempty"`

		VMNetworkVlans []*HyperflexNamedVlan `json:"VmNetworkVlans"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ClusterProfiles = dataAO1.ClusterProfiles

	m.JumboFrame = dataAO1.JumboFrame

	m.KvmIPRange = dataAO1.KvmIPRange

	m.MacPrefixRange = dataAO1.MacPrefixRange

	m.MgmtVlan = dataAO1.MgmtVlan

	m.Organization = dataAO1.Organization

	m.UplinkSpeed = dataAO1.UplinkSpeed

	m.VMMigrationVlan = dataAO1.VMMigrationVlan

	m.VMNetworkVlans = dataAO1.VMNetworkVlans

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexClusterNetworkPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ClusterProfiles []*HyperflexClusterProfileRef `json:"ClusterProfiles"`

		JumboFrame *bool `json:"JumboFrame,omitempty"`

		KvmIPRange *HyperflexIPAddrRange `json:"KvmIpRange,omitempty"`

		MacPrefixRange *HyperflexMacAddrPrefixRange `json:"MacPrefixRange,omitempty"`

		MgmtVlan *HyperflexNamedVlan `json:"MgmtVlan,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		UplinkSpeed *string `json:"UplinkSpeed,omitempty"`

		VMMigrationVlan *HyperflexNamedVlan `json:"VmMigrationVlan,omitempty"`

		VMNetworkVlans []*HyperflexNamedVlan `json:"VmNetworkVlans"`
	}

	dataAO1.ClusterProfiles = m.ClusterProfiles

	dataAO1.JumboFrame = m.JumboFrame

	dataAO1.KvmIPRange = m.KvmIPRange

	dataAO1.MacPrefixRange = m.MacPrefixRange

	dataAO1.MgmtVlan = m.MgmtVlan

	dataAO1.Organization = m.Organization

	dataAO1.UplinkSpeed = m.UplinkSpeed

	dataAO1.VMMigrationVlan = m.VMMigrationVlan

	dataAO1.VMNetworkVlans = m.VMNetworkVlans

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex cluster network policy
func (m *HyperflexClusterNetworkPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmIPRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacPrefixRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMgmtVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMMigrationVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNetworkVlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateClusterProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProfiles); i++ {
		if swag.IsZero(m.ClusterProfiles[i]) { // not required
			continue
		}

		if m.ClusterProfiles[i] != nil {
			if err := m.ClusterProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ClusterProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateKvmIPRange(formats strfmt.Registry) error {

	if swag.IsZero(m.KvmIPRange) { // not required
		return nil
	}

	if m.KvmIPRange != nil {
		if err := m.KvmIPRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KvmIpRange")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateMacPrefixRange(formats strfmt.Registry) error {

	if swag.IsZero(m.MacPrefixRange) { // not required
		return nil
	}

	if m.MacPrefixRange != nil {
		if err := m.MacPrefixRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MacPrefixRange")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateMgmtVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.MgmtVlan) { // not required
		return nil
	}

	if m.MgmtVlan != nil {
		if err := m.MgmtVlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MgmtVlan")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var hyperflexClusterNetworkPolicyTypeUplinkSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","1G","10G"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexClusterNetworkPolicyTypeUplinkSpeedPropEnum = append(hyperflexClusterNetworkPolicyTypeUplinkSpeedPropEnum, v)
	}
}

// property enum
func (m *HyperflexClusterNetworkPolicy) validateUplinkSpeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexClusterNetworkPolicyTypeUplinkSpeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateUplinkSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.UplinkSpeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateUplinkSpeedEnum("UplinkSpeed", "body", *m.UplinkSpeed); err != nil {
		return err
	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateVMMigrationVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.VMMigrationVlan) { // not required
		return nil
	}

	if m.VMMigrationVlan != nil {
		if err := m.VMMigrationVlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VmMigrationVlan")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexClusterNetworkPolicy) validateVMNetworkVlans(formats strfmt.Registry) error {

	if swag.IsZero(m.VMNetworkVlans) { // not required
		return nil
	}

	for i := 0; i < len(m.VMNetworkVlans); i++ {
		if swag.IsZero(m.VMNetworkVlans[i]) { // not required
			continue
		}

		if m.VMNetworkVlans[i] != nil {
			if err := m.VMNetworkVlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VmNetworkVlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexClusterNetworkPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexClusterNetworkPolicy) UnmarshalBinary(b []byte) error {
	var res HyperflexClusterNetworkPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
