// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BootPxe PXE Boot
//
// Device type used when booting from a PXE boot device.
//
// swagger:model bootPxe
type BootPxe struct {
	BootDeviceBase

	// The name of the underlying virtual ethernet interface used by the PXE boot device.
	InterfaceName string `json:"InterfaceName,omitempty"`

	// Lists the supported Interface Source for PXE device. Supported values are "name" and "mac".
	// Enum: [name mac port]
	InterfaceSource *string `json:"InterfaceSource,omitempty"`

	// The IP Address family type to use during the PXE Boot process.
	// Enum: [None IPv4 IPv6]
	IPType *string `json:"IpType,omitempty"`

	// The MAC Address of the underlying virtual ethernet interface used by the PXE boot device.
	MacAddress string `json:"MacAddress,omitempty"`

	// The logical port id of the ethernet interface used by the PXE device. Port is a deprecated property. Default value is changed to '-1' as this is invalid port. New or modified pxe device has the port value always set to '-1'.
	// Read Only: true
	Port int64 `json:"Port,omitempty"`

	// The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, "MLOM", "L", "L1", "L2", "OCP").
	Slot string `json:"Slot,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BootPxe) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BootDeviceBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BootDeviceBase = aO0

	// AO1
	var dataAO1 struct {
		InterfaceName string `json:"InterfaceName,omitempty"`

		InterfaceSource *string `json:"InterfaceSource,omitempty"`

		IPType *string `json:"IpType,omitempty"`

		MacAddress string `json:"MacAddress,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Slot string `json:"Slot,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.InterfaceName = dataAO1.InterfaceName

	m.InterfaceSource = dataAO1.InterfaceSource

	m.IPType = dataAO1.IPType

	m.MacAddress = dataAO1.MacAddress

	m.Port = dataAO1.Port

	m.Slot = dataAO1.Slot

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BootPxe) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BootDeviceBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		InterfaceName string `json:"InterfaceName,omitempty"`

		InterfaceSource *string `json:"InterfaceSource,omitempty"`

		IPType *string `json:"IpType,omitempty"`

		MacAddress string `json:"MacAddress,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Slot string `json:"Slot,omitempty"`
	}

	dataAO1.InterfaceName = m.InterfaceName

	dataAO1.InterfaceSource = m.InterfaceSource

	dataAO1.IPType = m.IPType

	dataAO1.MacAddress = m.MacAddress

	dataAO1.Port = m.Port

	dataAO1.Slot = m.Slot

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this boot pxe
func (m *BootPxe) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BootDeviceBase
	if err := m.BootDeviceBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bootPxeTypeInterfaceSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["name","mac","port"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bootPxeTypeInterfaceSourcePropEnum = append(bootPxeTypeInterfaceSourcePropEnum, v)
	}
}

// property enum
func (m *BootPxe) validateInterfaceSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bootPxeTypeInterfaceSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BootPxe) validateInterfaceSource(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateInterfaceSourceEnum("InterfaceSource", "body", *m.InterfaceSource); err != nil {
		return err
	}

	return nil
}

var bootPxeTypeIPTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bootPxeTypeIPTypePropEnum = append(bootPxeTypeIPTypePropEnum, v)
	}
}

// property enum
func (m *BootPxe) validateIPTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bootPxeTypeIPTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BootPxe) validateIPType(formats strfmt.Registry) error {

	if swag.IsZero(m.IPType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPTypeEnum("IpType", "body", *m.IPType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BootPxe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootPxe) UnmarshalBinary(b []byte) error {
	var res BootPxe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
