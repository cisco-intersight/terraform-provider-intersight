// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowTargetProperty Workflow:Target Property
//
// Capture all the properties for an input target endpoint or device.
//
// swagger:model workflowTargetProperty
type WorkflowTargetProperty struct {
	MoBaseComplexType

	WorkflowTargetPropertyAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowTargetProperty) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowTargetPropertyAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowTargetPropertyAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowTargetProperty) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowTargetPropertyAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow target property
func (m *WorkflowTargetProperty) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowTargetPropertyAO1P1
	if err := m.WorkflowTargetPropertyAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTargetProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTargetProperty) UnmarshalBinary(b []byte) error {
	var res WorkflowTargetProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowTargetPropertyAO1P1 workflow target property a o1 p1
//
// swagger:model WorkflowTargetPropertyAO1P1
type WorkflowTargetPropertyAO1P1 struct {

	// A singleton value which will contain the path to connector object from the selected object.
	ConnectorAttribute string `json:"ConnectorAttribute,omitempty"`

	// A collection of properties that will be used to match a specific implemented task. Using these values, the workflow engine will try to pick an implemented task definition when multiple implementations exist.
	ConstraintAttributes []string `json:"ConstraintAttributes"`

	// List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
	DisplayAttributes []string `json:"DisplayAttributes"`

	// Field to hold an Intersight API along with an optional filter to narrow down the search options for target device.
	Selector string `json:"Selector,omitempty"`

	// An explicit set of concrete objectTypes supported as part of this property entry.
	SupportedObjects []string `json:"SupportedObjects"`

	// workflow target property a o1 p1
	WorkflowTargetPropertyAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowTargetPropertyAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// A singleton value which will contain the path to connector object from the selected object.
		ConnectorAttribute string `json:"ConnectorAttribute,omitempty"`

		// A collection of properties that will be used to match a specific implemented task. Using these values, the workflow engine will try to pick an implemented task definition when multiple implementations exist.
		ConstraintAttributes []string `json:"ConstraintAttributes"`

		// List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
		DisplayAttributes []string `json:"DisplayAttributes"`

		// Field to hold an Intersight API along with an optional filter to narrow down the search options for target device.
		Selector string `json:"Selector,omitempty"`

		// An explicit set of concrete objectTypes supported as part of this property entry.
		SupportedObjects []string `json:"SupportedObjects"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowTargetPropertyAO1P1

	rcv.ConnectorAttribute = stage1.ConnectorAttribute
	rcv.ConstraintAttributes = stage1.ConstraintAttributes
	rcv.DisplayAttributes = stage1.DisplayAttributes
	rcv.Selector = stage1.Selector
	rcv.SupportedObjects = stage1.SupportedObjects
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ConnectorAttribute")
	delete(stage2, "ConstraintAttributes")
	delete(stage2, "DisplayAttributes")
	delete(stage2, "Selector")
	delete(stage2, "SupportedObjects")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowTargetPropertyAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowTargetPropertyAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// A singleton value which will contain the path to connector object from the selected object.
		ConnectorAttribute string `json:"ConnectorAttribute,omitempty"`

		// A collection of properties that will be used to match a specific implemented task. Using these values, the workflow engine will try to pick an implemented task definition when multiple implementations exist.
		ConstraintAttributes []string `json:"ConstraintAttributes"`

		// List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
		DisplayAttributes []string `json:"DisplayAttributes"`

		// Field to hold an Intersight API along with an optional filter to narrow down the search options for target device.
		Selector string `json:"Selector,omitempty"`

		// An explicit set of concrete objectTypes supported as part of this property entry.
		SupportedObjects []string `json:"SupportedObjects"`
	}

	stage1.ConnectorAttribute = m.ConnectorAttribute
	stage1.ConstraintAttributes = m.ConstraintAttributes
	stage1.DisplayAttributes = m.DisplayAttributes
	stage1.Selector = m.Selector
	stage1.SupportedObjects = m.SupportedObjects

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowTargetPropertyAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowTargetPropertyAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow target property a o1 p1
func (m *WorkflowTargetPropertyAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTargetPropertyAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTargetPropertyAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowTargetPropertyAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
