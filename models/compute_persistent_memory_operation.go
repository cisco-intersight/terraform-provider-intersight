// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComputePersistentMemoryOperation Compute:Persistent Memory Operation
//
// The operation that can be performed on the Persistent Memory Modules on the servers.
//
// swagger:model computePersistentMemoryOperation
type ComputePersistentMemoryOperation struct {
	MoBaseComplexType

	ComputePersistentMemoryOperationAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComputePersistentMemoryOperation) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 ComputePersistentMemoryOperationAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ComputePersistentMemoryOperationAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComputePersistentMemoryOperation) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ComputePersistentMemoryOperationAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this compute persistent memory operation
func (m *ComputePersistentMemoryOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ComputePersistentMemoryOperationAO1P1
	if err := m.ComputePersistentMemoryOperationAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ComputePersistentMemoryOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputePersistentMemoryOperation) UnmarshalBinary(b []byte) error {
	var res ComputePersistentMemoryOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputePersistentMemoryOperationAO1P1 compute persistent memory operation a o1 p1
//
// swagger:model ComputePersistentMemoryOperationAO1P1
type ComputePersistentMemoryOperationAO1P1 struct {

	// Administrative actions that can be performed on the Persistent Memory Modules.
	// Enum: [None SecureErase Unlock]
	AdminAction *string `json:"AdminAction,omitempty"`

	// is secure passphrase set
	IsSecurePassphraseSet *bool `json:"IsSecurePassphraseSet,omitempty"`

	// Selected Persistent Memory Modules on the server.
	Modules []*ComputePersistentMemoryModule `json:"Modules"`

	// Secure passphrase of the Persistent Memory Modules of the server.
	SecurePassphrase string `json:"SecurePassphrase,omitempty"`

	// compute persistent memory operation a o1 p1
	ComputePersistentMemoryOperationAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ComputePersistentMemoryOperationAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Administrative actions that can be performed on the Persistent Memory Modules.
		// Enum: [None SecureErase Unlock]
		AdminAction *string `json:"AdminAction,omitempty"`

		// is secure passphrase set
		IsSecurePassphraseSet *bool `json:"IsSecurePassphraseSet,omitempty"`

		// Selected Persistent Memory Modules on the server.
		Modules []*ComputePersistentMemoryModule `json:"Modules"`

		// Secure passphrase of the Persistent Memory Modules of the server.
		SecurePassphrase string `json:"SecurePassphrase,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ComputePersistentMemoryOperationAO1P1

	rcv.AdminAction = stage1.AdminAction
	rcv.IsSecurePassphraseSet = stage1.IsSecurePassphraseSet
	rcv.Modules = stage1.Modules
	rcv.SecurePassphrase = stage1.SecurePassphrase
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AdminAction")
	delete(stage2, "IsSecurePassphraseSet")
	delete(stage2, "Modules")
	delete(stage2, "SecurePassphrase")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ComputePersistentMemoryOperationAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ComputePersistentMemoryOperationAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Administrative actions that can be performed on the Persistent Memory Modules.
		// Enum: [None SecureErase Unlock]
		AdminAction *string `json:"AdminAction,omitempty"`

		// is secure passphrase set
		IsSecurePassphraseSet *bool `json:"IsSecurePassphraseSet,omitempty"`

		// Selected Persistent Memory Modules on the server.
		Modules []*ComputePersistentMemoryModule `json:"Modules"`

		// Secure passphrase of the Persistent Memory Modules of the server.
		SecurePassphrase string `json:"SecurePassphrase,omitempty"`
	}

	stage1.AdminAction = m.AdminAction
	stage1.IsSecurePassphraseSet = m.IsSecurePassphraseSet
	stage1.Modules = m.Modules
	stage1.SecurePassphrase = m.SecurePassphrase

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ComputePersistentMemoryOperationAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ComputePersistentMemoryOperationAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this compute persistent memory operation a o1 p1
func (m *ComputePersistentMemoryOperationAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var computePersistentMemoryOperationAO1P1TypeAdminActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","SecureErase","Unlock"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computePersistentMemoryOperationAO1P1TypeAdminActionPropEnum = append(computePersistentMemoryOperationAO1P1TypeAdminActionPropEnum, v)
	}
}

const (

	// ComputePersistentMemoryOperationAO1P1AdminActionNone captures enum value "None"
	ComputePersistentMemoryOperationAO1P1AdminActionNone string = "None"

	// ComputePersistentMemoryOperationAO1P1AdminActionSecureErase captures enum value "SecureErase"
	ComputePersistentMemoryOperationAO1P1AdminActionSecureErase string = "SecureErase"

	// ComputePersistentMemoryOperationAO1P1AdminActionUnlock captures enum value "Unlock"
	ComputePersistentMemoryOperationAO1P1AdminActionUnlock string = "Unlock"
)

// prop value enum
func (m *ComputePersistentMemoryOperationAO1P1) validateAdminActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computePersistentMemoryOperationAO1P1TypeAdminActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputePersistentMemoryOperationAO1P1) validateAdminAction(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdminActionEnum("AdminAction", "body", *m.AdminAction); err != nil {
		return err
	}

	return nil
}

func (m *ComputePersistentMemoryOperationAO1P1) validateModules(formats strfmt.Registry) error {

	if swag.IsZero(m.Modules) { // not required
		return nil
	}

	for i := 0; i < len(m.Modules); i++ {
		if swag.IsZero(m.Modules[i]) { // not required
			continue
		}

		if m.Modules[i] != nil {
			if err := m.Modules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputePersistentMemoryOperationAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputePersistentMemoryOperationAO1P1) UnmarshalBinary(b []byte) error {
	var res ComputePersistentMemoryOperationAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
