// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortGroup Port:Group
//
// Holder for multiple ports. A switch card will have one or more port groups.
//
// swagger:model portGroup
type PortGroup struct {
	InventoryBase

	// A collection of references to the [equipment.SharedIoModule](mo://equipment.SharedIoModule) Managed Object.
	// When this managed object is deleted, the referenced [equipment.SharedIoModule](mo://equipment.SharedIoModule) MO unsets its reference to this deleted MO.
	// Read Only: true
	EquipmentSharedIoModule *EquipmentSharedIoModuleRef `json:"EquipmentSharedIoModule,omitempty"`

	// A collection of references to the [equipment.SwitchCard](mo://equipment.SwitchCard) Managed Object.
	// When this managed object is deleted, the referenced [equipment.SwitchCard](mo://equipment.SwitchCard) MO unsets its reference to this deleted MO.
	// Read Only: true
	EquipmentSwitchCard *EquipmentSwitchCardRef `json:"EquipmentSwitchCard,omitempty"`

	// ethernet ports
	// Read Only: true
	EthernetPorts []*EtherPhysicalPortRef `json:"EthernetPorts"`

	// fc ports
	// Read Only: true
	FcPorts []*FcPhysicalPortRef `json:"FcPorts"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// sub groups
	// Read Only: true
	SubGroups []*PortSubGroupRef `json:"SubGroups"`

	// transport
	// Read Only: true
	Transport string `json:"Transport,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PortGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		EquipmentSharedIoModule *EquipmentSharedIoModuleRef `json:"EquipmentSharedIoModule,omitempty"`

		EquipmentSwitchCard *EquipmentSwitchCardRef `json:"EquipmentSwitchCard,omitempty"`

		EthernetPorts []*EtherPhysicalPortRef `json:"EthernetPorts"`

		FcPorts []*FcPhysicalPortRef `json:"FcPorts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SubGroups []*PortSubGroupRef `json:"SubGroups"`

		Transport string `json:"Transport,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EquipmentSharedIoModule = dataAO1.EquipmentSharedIoModule

	m.EquipmentSwitchCard = dataAO1.EquipmentSwitchCard

	m.EthernetPorts = dataAO1.EthernetPorts

	m.FcPorts = dataAO1.FcPorts

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SubGroups = dataAO1.SubGroups

	m.Transport = dataAO1.Transport

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PortGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EquipmentSharedIoModule *EquipmentSharedIoModuleRef `json:"EquipmentSharedIoModule,omitempty"`

		EquipmentSwitchCard *EquipmentSwitchCardRef `json:"EquipmentSwitchCard,omitempty"`

		EthernetPorts []*EtherPhysicalPortRef `json:"EthernetPorts"`

		FcPorts []*FcPhysicalPortRef `json:"FcPorts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SubGroups []*PortSubGroupRef `json:"SubGroups"`

		Transport string `json:"Transport,omitempty"`
	}

	dataAO1.EquipmentSharedIoModule = m.EquipmentSharedIoModule

	dataAO1.EquipmentSwitchCard = m.EquipmentSwitchCard

	dataAO1.EthernetPorts = m.EthernetPorts

	dataAO1.FcPorts = m.FcPorts

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SubGroups = m.SubGroups

	dataAO1.Transport = m.Transport

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this port group
func (m *PortGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentSharedIoModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentSwitchCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthernetPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortGroup) validateEquipmentSharedIoModule(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentSharedIoModule) { // not required
		return nil
	}

	if m.EquipmentSharedIoModule != nil {
		if err := m.EquipmentSharedIoModule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentSharedIoModule")
			}
			return err
		}
	}

	return nil
}

func (m *PortGroup) validateEquipmentSwitchCard(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentSwitchCard) { // not required
		return nil
	}

	if m.EquipmentSwitchCard != nil {
		if err := m.EquipmentSwitchCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentSwitchCard")
			}
			return err
		}
	}

	return nil
}

func (m *PortGroup) validateEthernetPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.EthernetPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.EthernetPorts); i++ {
		if swag.IsZero(m.EthernetPorts[i]) { // not required
			continue
		}

		if m.EthernetPorts[i] != nil {
			if err := m.EthernetPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EthernetPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortGroup) validateFcPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.FcPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.FcPorts); i++ {
		if swag.IsZero(m.FcPorts[i]) { // not required
			continue
		}

		if m.FcPorts[i] != nil {
			if err := m.FcPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FcPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortGroup) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *PortGroup) validateSubGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SubGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SubGroups); i++ {
		if swag.IsZero(m.SubGroups[i]) { // not required
			continue
		}

		if m.SubGroups[i] != nil {
			if err := m.SubGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortGroup) UnmarshalBinary(b []byte) error {
	var res PortGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
