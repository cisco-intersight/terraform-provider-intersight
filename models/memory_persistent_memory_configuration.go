// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoryPersistentMemoryConfiguration Memory:Persistent Memory Configuration
//
// Persistent Memory configuration on all the Persistent Memory Modules on a server.
//
// swagger:model memoryPersistentMemoryConfiguration
type MemoryPersistentMemoryConfiguration struct {
	InventoryBase

	// A collection of references to the [compute.Board](mo://compute.Board) Managed Object.
	// When this managed object is deleted, the referenced [compute.Board](mo://compute.Board) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

	// Memory capacity in GB of a Persistent Memory configuration on a server.
	// Read Only: true
	MemoryCapacity string `json:"MemoryCapacity,omitempty"`

	// Number of Persistent Memory Modules on a server.
	// Read Only: true
	NumOfModules string `json:"NumOfModules,omitempty"`

	// Number of Persistent Memory Regions on a server.
	// Read Only: true
	NumOfRegions string `json:"NumOfRegions,omitempty"`

	// Persistent memory capacity in GB of a Persistent Memory configuration on a server.
	// Read Only: true
	PersistentMemoryCapacity string `json:"PersistentMemoryCapacity,omitempty"`

	// Result of a previously applied Persistent Memory configuration on a server.
	// Read Only: true
	PersistentMemoryConfigResult *MemoryPersistentMemoryConfigResultRef `json:"PersistentMemoryConfigResult,omitempty"`

	// Collection of all the Persistent Memory Regions configured on a server.
	// Read Only: true
	PersistentMemoryRegions []*MemoryPersistentMemoryRegionRef `json:"PersistentMemoryRegions"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Reserved capacity in GB of a Persistent Memory configuration on a server.
	// Read Only: true
	ReservedCapacity string `json:"ReservedCapacity,omitempty"`

	// Collective security state of all Persistent Memory modules on a server.
	// Read Only: true
	SecurityState string `json:"SecurityState,omitempty"`

	// Total capacity in GB of a Persistent Memory configuration on a server.
	// Read Only: true
	TotalCapacity string `json:"TotalCapacity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MemoryPersistentMemoryConfiguration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

		MemoryCapacity string `json:"MemoryCapacity,omitempty"`

		NumOfModules string `json:"NumOfModules,omitempty"`

		NumOfRegions string `json:"NumOfRegions,omitempty"`

		PersistentMemoryCapacity string `json:"PersistentMemoryCapacity,omitempty"`

		PersistentMemoryConfigResult *MemoryPersistentMemoryConfigResultRef `json:"PersistentMemoryConfigResult,omitempty"`

		PersistentMemoryRegions []*MemoryPersistentMemoryRegionRef `json:"PersistentMemoryRegions"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		ReservedCapacity string `json:"ReservedCapacity,omitempty"`

		SecurityState string `json:"SecurityState,omitempty"`

		TotalCapacity string `json:"TotalCapacity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ComputeBoard = dataAO1.ComputeBoard

	m.MemoryCapacity = dataAO1.MemoryCapacity

	m.NumOfModules = dataAO1.NumOfModules

	m.NumOfRegions = dataAO1.NumOfRegions

	m.PersistentMemoryCapacity = dataAO1.PersistentMemoryCapacity

	m.PersistentMemoryConfigResult = dataAO1.PersistentMemoryConfigResult

	m.PersistentMemoryRegions = dataAO1.PersistentMemoryRegions

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.ReservedCapacity = dataAO1.ReservedCapacity

	m.SecurityState = dataAO1.SecurityState

	m.TotalCapacity = dataAO1.TotalCapacity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MemoryPersistentMemoryConfiguration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

		MemoryCapacity string `json:"MemoryCapacity,omitempty"`

		NumOfModules string `json:"NumOfModules,omitempty"`

		NumOfRegions string `json:"NumOfRegions,omitempty"`

		PersistentMemoryCapacity string `json:"PersistentMemoryCapacity,omitempty"`

		PersistentMemoryConfigResult *MemoryPersistentMemoryConfigResultRef `json:"PersistentMemoryConfigResult,omitempty"`

		PersistentMemoryRegions []*MemoryPersistentMemoryRegionRef `json:"PersistentMemoryRegions"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		ReservedCapacity string `json:"ReservedCapacity,omitempty"`

		SecurityState string `json:"SecurityState,omitempty"`

		TotalCapacity string `json:"TotalCapacity,omitempty"`
	}

	dataAO1.ComputeBoard = m.ComputeBoard

	dataAO1.MemoryCapacity = m.MemoryCapacity

	dataAO1.NumOfModules = m.NumOfModules

	dataAO1.NumOfRegions = m.NumOfRegions

	dataAO1.PersistentMemoryCapacity = m.PersistentMemoryCapacity

	dataAO1.PersistentMemoryConfigResult = m.PersistentMemoryConfigResult

	dataAO1.PersistentMemoryRegions = m.PersistentMemoryRegions

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.ReservedCapacity = m.ReservedCapacity

	dataAO1.SecurityState = m.SecurityState

	dataAO1.TotalCapacity = m.TotalCapacity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this memory persistent memory configuration
func (m *MemoryPersistentMemoryConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeBoard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentMemoryConfigResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentMemoryRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemoryPersistentMemoryConfiguration) validateComputeBoard(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeBoard) { // not required
		return nil
	}

	if m.ComputeBoard != nil {
		if err := m.ComputeBoard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeBoard")
			}
			return err
		}
	}

	return nil
}

func (m *MemoryPersistentMemoryConfiguration) validatePersistentMemoryConfigResult(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentMemoryConfigResult) { // not required
		return nil
	}

	if m.PersistentMemoryConfigResult != nil {
		if err := m.PersistentMemoryConfigResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PersistentMemoryConfigResult")
			}
			return err
		}
	}

	return nil
}

func (m *MemoryPersistentMemoryConfiguration) validatePersistentMemoryRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentMemoryRegions) { // not required
		return nil
	}

	for i := 0; i < len(m.PersistentMemoryRegions); i++ {
		if swag.IsZero(m.PersistentMemoryRegions[i]) { // not required
			continue
		}

		if m.PersistentMemoryRegions[i] != nil {
			if err := m.PersistentMemoryRegions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PersistentMemoryRegions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemoryPersistentMemoryConfiguration) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemoryPersistentMemoryConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryPersistentMemoryConfiguration) UnmarshalBinary(b []byte) error {
	var res MemoryPersistentMemoryConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
