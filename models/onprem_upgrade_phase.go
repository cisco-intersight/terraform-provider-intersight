// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnpremUpgradePhase Onprem:Upgrade Phase
//
// UpgradePhase represents a phase of the Intersight Appliance software upgrade
// process. This data structure is shared by both the Intersight upgrade service
// and the Intersight Appliance's upgrade service.
//
// swagger:model onpremUpgradePhase
type OnpremUpgradePhase struct {
	MoBaseComplexType

	OnpremUpgradePhaseAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OnpremUpgradePhase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 OnpremUpgradePhaseAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.OnpremUpgradePhaseAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OnpremUpgradePhase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.OnpremUpgradePhaseAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this onprem upgrade phase
func (m *OnpremUpgradePhase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with OnpremUpgradePhaseAO1P1
	if err := m.OnpremUpgradePhaseAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OnpremUpgradePhase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnpremUpgradePhase) UnmarshalBinary(b []byte) error {
	var res OnpremUpgradePhase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OnpremUpgradePhaseAO1P1 onprem upgrade phase a o1 p1
//
// swagger:model OnpremUpgradePhaseAO1P1
type OnpremUpgradePhaseAO1P1 struct {

	// Name of the upgrade phase.
	// Read Only: true
	// Enum: [init Prepare ServiceLoad UiLoad GenerateConfig DeployService Success Fail Cancel Telemetry]
	Name string `json:"Name,omitempty"`

	// onprem upgrade phase a o1 p1
	OnpremUpgradePhaseAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *OnpremUpgradePhaseAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Name of the upgrade phase.
		// Read Only: true
		// Enum: [init Prepare ServiceLoad UiLoad GenerateConfig DeployService Success Fail Cancel Telemetry]
		Name string `json:"Name,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv OnpremUpgradePhaseAO1P1

	rcv.Name = stage1.Name
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Name")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.OnpremUpgradePhaseAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m OnpremUpgradePhaseAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Name of the upgrade phase.
		// Read Only: true
		// Enum: [init Prepare ServiceLoad UiLoad GenerateConfig DeployService Success Fail Cancel Telemetry]
		Name string `json:"Name,omitempty"`
	}

	stage1.Name = m.Name

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.OnpremUpgradePhaseAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.OnpremUpgradePhaseAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this onprem upgrade phase a o1 p1
func (m *OnpremUpgradePhaseAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var onpremUpgradePhaseAO1P1TypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["init","Prepare","ServiceLoad","UiLoad","GenerateConfig","DeployService","Success","Fail","Cancel","Telemetry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onpremUpgradePhaseAO1P1TypeNamePropEnum = append(onpremUpgradePhaseAO1P1TypeNamePropEnum, v)
	}
}

const (

	// OnpremUpgradePhaseAO1P1NameInit captures enum value "init"
	OnpremUpgradePhaseAO1P1NameInit string = "init"

	// OnpremUpgradePhaseAO1P1NamePrepare captures enum value "Prepare"
	OnpremUpgradePhaseAO1P1NamePrepare string = "Prepare"

	// OnpremUpgradePhaseAO1P1NameServiceLoad captures enum value "ServiceLoad"
	OnpremUpgradePhaseAO1P1NameServiceLoad string = "ServiceLoad"

	// OnpremUpgradePhaseAO1P1NameUILoad captures enum value "UiLoad"
	OnpremUpgradePhaseAO1P1NameUILoad string = "UiLoad"

	// OnpremUpgradePhaseAO1P1NameGenerateConfig captures enum value "GenerateConfig"
	OnpremUpgradePhaseAO1P1NameGenerateConfig string = "GenerateConfig"

	// OnpremUpgradePhaseAO1P1NameDeployService captures enum value "DeployService"
	OnpremUpgradePhaseAO1P1NameDeployService string = "DeployService"

	// OnpremUpgradePhaseAO1P1NameSuccess captures enum value "Success"
	OnpremUpgradePhaseAO1P1NameSuccess string = "Success"

	// OnpremUpgradePhaseAO1P1NameFail captures enum value "Fail"
	OnpremUpgradePhaseAO1P1NameFail string = "Fail"

	// OnpremUpgradePhaseAO1P1NameCancel captures enum value "Cancel"
	OnpremUpgradePhaseAO1P1NameCancel string = "Cancel"

	// OnpremUpgradePhaseAO1P1NameTelemetry captures enum value "Telemetry"
	OnpremUpgradePhaseAO1P1NameTelemetry string = "Telemetry"
)

// prop value enum
func (m *OnpremUpgradePhaseAO1P1) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, onpremUpgradePhaseAO1P1TypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OnpremUpgradePhaseAO1P1) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnpremUpgradePhaseAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnpremUpgradePhaseAO1P1) UnmarshalBinary(b []byte) error {
	var res OnpremUpgradePhaseAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
