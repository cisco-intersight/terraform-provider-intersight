// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamAccountPermissions Iam:Account Permissions
//
// Users can log in through the base URL (https://intersight.com) or account-specific URLs. When the Intersight user logs in through the base URL, Intersight identifies the accounts and permissions within each account which the user has access to. In case multiple permissions are identified, the user and session objects are created in the onboarding-user account, and the session object is updated with account and permission information. Intersight GUI uses this information to show available accounts and permissions for the user to select.
//
// swagger:model iamAccountPermissions
type IamAccountPermissions struct {
	MoBaseComplexType

	IamAccountPermissionsAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamAccountPermissions) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 IamAccountPermissionsAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IamAccountPermissionsAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamAccountPermissions) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.IamAccountPermissionsAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam account permissions
func (m *IamAccountPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IamAccountPermissionsAO1P1
	if err := m.IamAccountPermissionsAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IamAccountPermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamAccountPermissions) UnmarshalBinary(b []byte) error {
	var res IamAccountPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IamAccountPermissionsAO1P1 iam account permissions a o1 p1
//
// swagger:model IamAccountPermissionsAO1P1
type IamAccountPermissionsAO1P1 struct {

	// MOID of the account which a user can select after authentication.
	// Read Only: true
	AccountIdentifier string `json:"AccountIdentifier,omitempty"`

	// Name of the account which a user can select after authentication.
	// Read Only: true
	AccountName string `json:"AccountName,omitempty"`

	// Status of the account. Account remains inactive until a device is claimed to the account.
	// Read Only: true
	AccountStatus string `json:"AccountStatus,omitempty"`

	// Permissions within an account which a user can select after authentication.
	// Read Only: true
	Permissions []*IamPermissionReference `json:"Permissions"`

	// iam account permissions a o1 p1
	IamAccountPermissionsAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *IamAccountPermissionsAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// MOID of the account which a user can select after authentication.
		// Read Only: true
		AccountIdentifier string `json:"AccountIdentifier,omitempty"`

		// Name of the account which a user can select after authentication.
		// Read Only: true
		AccountName string `json:"AccountName,omitempty"`

		// Status of the account. Account remains inactive until a device is claimed to the account.
		// Read Only: true
		AccountStatus string `json:"AccountStatus,omitempty"`

		// Permissions within an account which a user can select after authentication.
		// Read Only: true
		Permissions []*IamPermissionReference `json:"Permissions"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv IamAccountPermissionsAO1P1

	rcv.AccountIdentifier = stage1.AccountIdentifier
	rcv.AccountName = stage1.AccountName
	rcv.AccountStatus = stage1.AccountStatus
	rcv.Permissions = stage1.Permissions
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AccountIdentifier")
	delete(stage2, "AccountName")
	delete(stage2, "AccountStatus")
	delete(stage2, "Permissions")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.IamAccountPermissionsAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m IamAccountPermissionsAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// MOID of the account which a user can select after authentication.
		// Read Only: true
		AccountIdentifier string `json:"AccountIdentifier,omitempty"`

		// Name of the account which a user can select after authentication.
		// Read Only: true
		AccountName string `json:"AccountName,omitempty"`

		// Status of the account. Account remains inactive until a device is claimed to the account.
		// Read Only: true
		AccountStatus string `json:"AccountStatus,omitempty"`

		// Permissions within an account which a user can select after authentication.
		// Read Only: true
		Permissions []*IamPermissionReference `json:"Permissions"`
	}

	stage1.AccountIdentifier = m.AccountIdentifier
	stage1.AccountName = m.AccountName
	stage1.AccountStatus = m.AccountStatus
	stage1.Permissions = m.Permissions

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.IamAccountPermissionsAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.IamAccountPermissionsAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this iam account permissions a o1 p1
func (m *IamAccountPermissionsAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamAccountPermissionsAO1P1) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamAccountPermissionsAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamAccountPermissionsAO1P1) UnmarshalBinary(b []byte) error {
	var res IamAccountPermissionsAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
