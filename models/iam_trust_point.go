// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamTrustPoint Iam:Trust Point
//
// To affirm the identity of trusted source.
// Allows import of third-party CA certificates in X.509 (CER) format.
// It can be a root CA or an trust chain that leads to a root CA.
//
// swagger:model iamTrustPoint
type IamTrustPoint struct {
	MoBaseMo

	// The account associated with the Trustpoint.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The collection of certificates in X509 certificate format.
	// This was obtained by parsing the chain property which holds the base 64 encoded chain of certificates.
	// Read Only: true
	Certificates []*X509Certificate `json:"Certificates"`

	// The certificate information for this trusted point. The certificate must be in Base64 encoded X.509 (CER) format.
	Chain string `json:"Chain,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamTrustPoint) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Certificates []*X509Certificate `json:"Certificates"`

		Chain string `json:"Chain,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Certificates = dataAO1.Certificates

	m.Chain = dataAO1.Chain

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamTrustPoint) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Certificates []*X509Certificate `json:"Certificates"`

		Chain string `json:"Chain,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Certificates = m.Certificates

	dataAO1.Chain = m.Chain

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam trust point
func (m *IamTrustPoint) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamTrustPoint) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *IamTrustPoint) validateCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamTrustPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamTrustPoint) UnmarshalBinary(b []byte) error {
	var res IamTrustPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
