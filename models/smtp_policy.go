// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SMTPPolicy SMTP
//
// Name that identifies the SMTP Policy.
//
// swagger:model smtpPolicy
type SMTPPolicy struct {
	PolicyAbstractPolicy

	// If enabled, controls the state of the SMTP client service on the managed device.
	Enabled *bool `json:"Enabled,omitempty"`

	// Minimum fault severity level to receive email notifications. Email notifications are sent for all faults whose severity is equal to or greater than the chosen level.
	// Enum: [critical condition warning minor major]
	MinSeverity *string `json:"MinSeverity,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Relationship to the profile object.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

	// The email address entered here will be displayed as the from address (mail received from address) of all the SMTP mail alerts that are received. If not configured, the hostname of the server is used in the from address field.
	SenderEmail string `json:"SenderEmail,omitempty"`

	// Port number used by the SMTP server for outgoing SMTP communication.
	SMTPPort int64 `json:"SmtpPort,omitempty"`

	// List of email addresses that will receive notifications for faults.
	SMTPRecipients []string `json:"SmtpRecipients"`

	// IP address or hostname of the SMTP server. The SMTP server is used by the managed device to send email notifications.
	SMTPServer string `json:"SmtpServer,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SMTPPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		Enabled *bool `json:"Enabled,omitempty"`

		MinSeverity *string `json:"MinSeverity,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		SenderEmail string `json:"SenderEmail,omitempty"`

		SMTPPort int64 `json:"SmtpPort,omitempty"`

		SMTPRecipients []string `json:"SmtpRecipients"`

		SMTPServer string `json:"SmtpServer,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Enabled = dataAO1.Enabled

	m.MinSeverity = dataAO1.MinSeverity

	m.Organization = dataAO1.Organization

	m.Profiles = dataAO1.Profiles

	m.SenderEmail = dataAO1.SenderEmail

	m.SMTPPort = dataAO1.SMTPPort

	m.SMTPRecipients = dataAO1.SMTPRecipients

	m.SMTPServer = dataAO1.SMTPServer

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SMTPPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Enabled *bool `json:"Enabled,omitempty"`

		MinSeverity *string `json:"MinSeverity,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		SenderEmail string `json:"SenderEmail,omitempty"`

		SMTPPort int64 `json:"SmtpPort,omitempty"`

		SMTPRecipients []string `json:"SmtpRecipients"`

		SMTPServer string `json:"SmtpServer,omitempty"`
	}

	dataAO1.Enabled = m.Enabled

	dataAO1.MinSeverity = m.MinSeverity

	dataAO1.Organization = m.Organization

	dataAO1.Profiles = m.Profiles

	dataAO1.SenderEmail = m.SenderEmail

	dataAO1.SMTPPort = m.SMTPPort

	dataAO1.SMTPRecipients = m.SMTPRecipients

	dataAO1.SMTPServer = m.SMTPServer

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this smtp policy
func (m *SMTPPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smtpPolicyTypeMinSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["critical","condition","warning","minor","major"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smtpPolicyTypeMinSeverityPropEnum = append(smtpPolicyTypeMinSeverityPropEnum, v)
	}
}

// property enum
func (m *SMTPPolicy) validateMinSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smtpPolicyTypeMinSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SMTPPolicy) validateMinSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.MinSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateMinSeverityEnum("MinSeverity", "body", *m.MinSeverity); err != nil {
		return err
	}

	return nil
}

func (m *SMTPPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SMTPPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SMTPPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMTPPolicy) UnmarshalBinary(b []byte) error {
	var res SMTPPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
