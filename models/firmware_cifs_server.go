// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareCifsServer Firmware:Cifs Server
//
// An external file repository accessible through the CIFS protocol.
//
// swagger:model firmwareCifsServer
type FirmwareCifsServer struct {
	MoBaseComplexType

	FirmwareCifsServerAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareCifsServer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 FirmwareCifsServerAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.FirmwareCifsServerAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareCifsServer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.FirmwareCifsServerAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware cifs server
func (m *FirmwareCifsServer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with FirmwareCifsServerAO1P1
	if err := m.FirmwareCifsServerAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareCifsServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareCifsServer) UnmarshalBinary(b []byte) error {
	var res FirmwareCifsServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareCifsServerAO1P1 firmware cifs server a o1 p1
//
// swagger:model FirmwareCifsServerAO1P1
type FirmwareCifsServerAO1P1 struct {

	// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2.
	// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
	MountOptions *string `json:"MountOptions,omitempty"`

	// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
	RemoteFile string `json:"RemoteFile,omitempty"`

	// CIFS Server Hostname or IP Address. Example:CIFS-server-hostname or 10.10.8.7.
	RemoteIP string `json:"RemoteIp,omitempty"`

	// Directory where the image is stored. Example:share/subfolder.
	RemoteShare string `json:"RemoteShare,omitempty"`

	// firmware cifs server a o1 p1
	FirmwareCifsServerAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FirmwareCifsServerAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2.
		// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
		MountOptions *string `json:"MountOptions,omitempty"`

		// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
		RemoteFile string `json:"RemoteFile,omitempty"`

		// CIFS Server Hostname or IP Address. Example:CIFS-server-hostname or 10.10.8.7.
		RemoteIP string `json:"RemoteIp,omitempty"`

		// Directory where the image is stored. Example:share/subfolder.
		RemoteShare string `json:"RemoteShare,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FirmwareCifsServerAO1P1

	rcv.MountOptions = stage1.MountOptions
	rcv.RemoteFile = stage1.RemoteFile
	rcv.RemoteIP = stage1.RemoteIP
	rcv.RemoteShare = stage1.RemoteShare
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "MountOptions")
	delete(stage2, "RemoteFile")
	delete(stage2, "RemoteIp")
	delete(stage2, "RemoteShare")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FirmwareCifsServerAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FirmwareCifsServerAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2.
		// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
		MountOptions *string `json:"MountOptions,omitempty"`

		// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
		RemoteFile string `json:"RemoteFile,omitempty"`

		// CIFS Server Hostname or IP Address. Example:CIFS-server-hostname or 10.10.8.7.
		RemoteIP string `json:"RemoteIp,omitempty"`

		// Directory where the image is stored. Example:share/subfolder.
		RemoteShare string `json:"RemoteShare,omitempty"`
	}

	stage1.MountOptions = m.MountOptions
	stage1.RemoteFile = m.RemoteFile
	stage1.RemoteIP = m.RemoteIP
	stage1.RemoteShare = m.RemoteShare

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FirmwareCifsServerAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FirmwareCifsServerAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this firmware cifs server a o1 p1
func (m *FirmwareCifsServerAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var firmwareCifsServerAO1P1TypeMountOptionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","ntlm","ntlmi","ntlmv2","ntlmv2i","ntlmssp","ntlmsspi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareCifsServerAO1P1TypeMountOptionsPropEnum = append(firmwareCifsServerAO1P1TypeMountOptionsPropEnum, v)
	}
}

const (

	// FirmwareCifsServerAO1P1MountOptionsNone captures enum value "none"
	FirmwareCifsServerAO1P1MountOptionsNone string = "none"

	// FirmwareCifsServerAO1P1MountOptionsNtlm captures enum value "ntlm"
	FirmwareCifsServerAO1P1MountOptionsNtlm string = "ntlm"

	// FirmwareCifsServerAO1P1MountOptionsNtlmi captures enum value "ntlmi"
	FirmwareCifsServerAO1P1MountOptionsNtlmi string = "ntlmi"

	// FirmwareCifsServerAO1P1MountOptionsNtlmv2 captures enum value "ntlmv2"
	FirmwareCifsServerAO1P1MountOptionsNtlmv2 string = "ntlmv2"

	// FirmwareCifsServerAO1P1MountOptionsNtlmv2i captures enum value "ntlmv2i"
	FirmwareCifsServerAO1P1MountOptionsNtlmv2i string = "ntlmv2i"

	// FirmwareCifsServerAO1P1MountOptionsNtlmssp captures enum value "ntlmssp"
	FirmwareCifsServerAO1P1MountOptionsNtlmssp string = "ntlmssp"

	// FirmwareCifsServerAO1P1MountOptionsNtlmsspi captures enum value "ntlmsspi"
	FirmwareCifsServerAO1P1MountOptionsNtlmsspi string = "ntlmsspi"
)

// prop value enum
func (m *FirmwareCifsServerAO1P1) validateMountOptionsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareCifsServerAO1P1TypeMountOptionsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareCifsServerAO1P1) validateMountOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.MountOptions) { // not required
		return nil
	}

	// value enum
	if err := m.validateMountOptionsEnum("MountOptions", "body", *m.MountOptions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareCifsServerAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareCifsServerAO1P1) UnmarshalBinary(b []byte) error {
	var res FirmwareCifsServerAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
