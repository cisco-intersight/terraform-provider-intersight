// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NiaapiFieldNotice Niaapi:Field Notice
//
// This contains the new version release notice.
//
// swagger:model niaapiFieldNotice
type NiaapiFieldNotice struct {
	MoBaseMo

	// Bug Id associated with this notice.
	Bugid string `json:"Bugid,omitempty"`

	// Field notice Description.
	FieldNoticeDesc string `json:"FieldNoticeDesc,omitempty"`

	// Fieldnotice Id of this notice.
	FieldNoticeID string `json:"FieldNoticeId,omitempty"`

	// Field notice URL link to the notice webpage.
	FieldNoticeURL string `json:"FieldNoticeUrl,omitempty"`

	// The headline of this field notice.
	Headline string `json:"Headline,omitempty"`

	// Hardware PID for affected models.
	Hwpid string `json:"Hwpid,omitempty"`

	// Revision detail infomation .
	RevisionInfo []*NiaapiRevisionInfo `json:"RevisionInfo"`

	// Software Release number for affected versions.
	SwRelease string `json:"SwRelease,omitempty"`

	// URL of workaround of this notice.
	WorkaroundURL string `json:"WorkaroundUrl,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiFieldNotice) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Bugid string `json:"Bugid,omitempty"`

		FieldNoticeDesc string `json:"FieldNoticeDesc,omitempty"`

		FieldNoticeID string `json:"FieldNoticeId,omitempty"`

		FieldNoticeURL string `json:"FieldNoticeUrl,omitempty"`

		Headline string `json:"Headline,omitempty"`

		Hwpid string `json:"Hwpid,omitempty"`

		RevisionInfo []*NiaapiRevisionInfo `json:"RevisionInfo"`

		SwRelease string `json:"SwRelease,omitempty"`

		WorkaroundURL string `json:"WorkaroundUrl,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bugid = dataAO1.Bugid

	m.FieldNoticeDesc = dataAO1.FieldNoticeDesc

	m.FieldNoticeID = dataAO1.FieldNoticeID

	m.FieldNoticeURL = dataAO1.FieldNoticeURL

	m.Headline = dataAO1.Headline

	m.Hwpid = dataAO1.Hwpid

	m.RevisionInfo = dataAO1.RevisionInfo

	m.SwRelease = dataAO1.SwRelease

	m.WorkaroundURL = dataAO1.WorkaroundURL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiFieldNotice) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bugid string `json:"Bugid,omitempty"`

		FieldNoticeDesc string `json:"FieldNoticeDesc,omitempty"`

		FieldNoticeID string `json:"FieldNoticeId,omitempty"`

		FieldNoticeURL string `json:"FieldNoticeUrl,omitempty"`

		Headline string `json:"Headline,omitempty"`

		Hwpid string `json:"Hwpid,omitempty"`

		RevisionInfo []*NiaapiRevisionInfo `json:"RevisionInfo"`

		SwRelease string `json:"SwRelease,omitempty"`

		WorkaroundURL string `json:"WorkaroundUrl,omitempty"`
	}

	dataAO1.Bugid = m.Bugid

	dataAO1.FieldNoticeDesc = m.FieldNoticeDesc

	dataAO1.FieldNoticeID = m.FieldNoticeID

	dataAO1.FieldNoticeURL = m.FieldNoticeURL

	dataAO1.Headline = m.Headline

	dataAO1.Hwpid = m.Hwpid

	dataAO1.RevisionInfo = m.RevisionInfo

	dataAO1.SwRelease = m.SwRelease

	dataAO1.WorkaroundURL = m.WorkaroundURL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi field notice
func (m *NiaapiFieldNotice) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiFieldNotice) validateRevisionInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.RevisionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.RevisionInfo); i++ {
		if swag.IsZero(m.RevisionInfo[i]) { // not required
			continue
		}

		if m.RevisionInfo[i] != nil {
			if err := m.RevisionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RevisionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiFieldNotice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiFieldNotice) UnmarshalBinary(b []byte) error {
	var res NiaapiFieldNotice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
