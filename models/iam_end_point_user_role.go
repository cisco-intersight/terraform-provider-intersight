// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamEndPointUserRole Iam:End Point User Role
//
// Mapping of endpoint user to endpoint roles.
//
// swagger:model iamEndPointUserRole
type IamEndPointUserRole struct {
	MoBaseMo

	// Denotes whether password has changed.
	// Read Only: true
	ChangePassword *bool `json:"ChangePassword,omitempty"`

	// Enables the user account on the endpoint.
	Enabled *bool `json:"Enabled,omitempty"`

	// Roles associated with the user on the endpoint.
	EndPointRole []*IamEndPointRoleRef `json:"EndPointRole"`

	// The of set End Point Users which are mapped to this role.
	EndPointUser *IamEndPointUserRef `json:"EndPointUser,omitempty"`

	// A collection of references to the [iam.EndPointUserPolicy](mo://iam.EndPointUserPolicy) Managed Object.
	// When this managed object is deleted, the referenced [iam.EndPointUserPolicy](mo://iam.EndPointUserPolicy) MO unsets its reference to this deleted MO.
	EndPointUserPolicy *IamEndPointUserPolicyRef `json:"EndPointUserPolicy,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Valid login password of the user.
	Password string `json:"Password,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamEndPointUserRole) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ChangePassword *bool `json:"ChangePassword,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		EndPointRole []*IamEndPointRoleRef `json:"EndPointRole"`

		EndPointUser *IamEndPointUserRef `json:"EndPointUser,omitempty"`

		EndPointUserPolicy *IamEndPointUserPolicyRef `json:"EndPointUserPolicy,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ChangePassword = dataAO1.ChangePassword

	m.Enabled = dataAO1.Enabled

	m.EndPointRole = dataAO1.EndPointRole

	m.EndPointUser = dataAO1.EndPointUser

	m.EndPointUserPolicy = dataAO1.EndPointUserPolicy

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.Password = dataAO1.Password

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamEndPointUserRole) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ChangePassword *bool `json:"ChangePassword,omitempty"`

		Enabled *bool `json:"Enabled,omitempty"`

		EndPointRole []*IamEndPointRoleRef `json:"EndPointRole"`

		EndPointUser *IamEndPointUserRef `json:"EndPointUser,omitempty"`

		EndPointUserPolicy *IamEndPointUserPolicyRef `json:"EndPointUserPolicy,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`
	}

	dataAO1.ChangePassword = m.ChangePassword

	dataAO1.Enabled = m.Enabled

	dataAO1.EndPointRole = m.EndPointRole

	dataAO1.EndPointUser = m.EndPointUser

	dataAO1.EndPointUserPolicy = m.EndPointUserPolicy

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.Password = m.Password

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam end point user role
func (m *IamEndPointUserRole) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointUserPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamEndPointUserRole) validateEndPointRole(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointRole) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPointRole); i++ {
		if swag.IsZero(m.EndPointRole[i]) { // not required
			continue
		}

		if m.EndPointRole[i] != nil {
			if err := m.EndPointRole[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EndPointRole" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamEndPointUserRole) validateEndPointUser(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointUser) { // not required
		return nil
	}

	if m.EndPointUser != nil {
		if err := m.EndPointUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndPointUser")
			}
			return err
		}
	}

	return nil
}

func (m *IamEndPointUserRole) validateEndPointUserPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointUserPolicy) { // not required
		return nil
	}

	if m.EndPointUserPolicy != nil {
		if err := m.EndPointUserPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndPointUserPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamEndPointUserRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamEndPointUserRole) UnmarshalBinary(b []byte) error {
	var res IamEndPointUserRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
