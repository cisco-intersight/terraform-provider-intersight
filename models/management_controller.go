// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ManagementController Management:Controller
//
// A specialized service processor that monitors the physical state of a server, using sensors and communicating with the system administrator through an independent connection.
//
// swagger:model managementController
type ManagementController struct {
	InventoryBase

	// A collection of references to the [adapter.Unit](mo://adapter.Unit) Managed Object.
	// When this managed object is deleted, the referenced [adapter.Unit](mo://adapter.Unit) MO unsets its reference to this deleted MO.
	// Read Only: true
	AdapterUnit *AdapterUnitRef `json:"AdapterUnit,omitempty"`

	// A collection of references to the [compute.Blade](mo://compute.Blade) Managed Object.
	// When this managed object is deleted, the referenced [compute.Blade](mo://compute.Blade) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

	// A collection of references to the [compute.RackUnit](mo://compute.RackUnit) Managed Object.
	// When this managed object is deleted, the referenced [compute.RackUnit](mo://compute.RackUnit) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

	// management interfaces
	// Read Only: true
	ManagementInterfaces []*ManagementInterfaceRef `json:"ManagementInterfaces"`

	// Model of the endpoint that houses the management controller.
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// A collection of references to the [network.Element](mo://network.Element) Managed Object.
	// When this managed object is deleted, the referenced [network.Element](mo://network.Element) MO unsets its reference to this deleted MO.
	// Read Only: true
	NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// running firmware
	// Read Only: true
	RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

	// A collection of references to the [storage.SasExpander](mo://storage.SasExpander) Managed Object.
	// When this managed object is deleted, the referenced [storage.SasExpander](mo://storage.SasExpander) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageSasExpander *StorageSasExpanderRef `json:"StorageSasExpander,omitempty"`

	// A collection of references to the [top.System](mo://top.System) Managed Object.
	// When this managed object is deleted, the referenced [top.System](mo://top.System) MO unsets its reference to this deleted MO.
	// Read Only: true
	TopSystem *TopSystemRef `json:"TopSystem,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ManagementController) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		AdapterUnit *AdapterUnitRef `json:"AdapterUnit,omitempty"`

		ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		ManagementInterfaces []*ManagementInterfaceRef `json:"ManagementInterfaces"`

		Model string `json:"Model,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		StorageSasExpander *StorageSasExpanderRef `json:"StorageSasExpander,omitempty"`

		TopSystem *TopSystemRef `json:"TopSystem,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdapterUnit = dataAO1.AdapterUnit

	m.ComputeBlade = dataAO1.ComputeBlade

	m.ComputeRackUnit = dataAO1.ComputeRackUnit

	m.ManagementInterfaces = dataAO1.ManagementInterfaces

	m.Model = dataAO1.Model

	m.NetworkElement = dataAO1.NetworkElement

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.RunningFirmware = dataAO1.RunningFirmware

	m.StorageSasExpander = dataAO1.StorageSasExpander

	m.TopSystem = dataAO1.TopSystem

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ManagementController) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdapterUnit *AdapterUnitRef `json:"AdapterUnit,omitempty"`

		ComputeBlade *ComputeBladeRef `json:"ComputeBlade,omitempty"`

		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		ManagementInterfaces []*ManagementInterfaceRef `json:"ManagementInterfaces"`

		Model string `json:"Model,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		StorageSasExpander *StorageSasExpanderRef `json:"StorageSasExpander,omitempty"`

		TopSystem *TopSystemRef `json:"TopSystem,omitempty"`
	}

	dataAO1.AdapterUnit = m.AdapterUnit

	dataAO1.ComputeBlade = m.ComputeBlade

	dataAO1.ComputeRackUnit = m.ComputeRackUnit

	dataAO1.ManagementInterfaces = m.ManagementInterfaces

	dataAO1.Model = m.Model

	dataAO1.NetworkElement = m.NetworkElement

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.RunningFirmware = m.RunningFirmware

	dataAO1.StorageSasExpander = m.StorageSasExpander

	dataAO1.TopSystem = m.TopSystem

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this management controller
func (m *ManagementController) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdapterUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeBlade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeRackUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageSasExpander(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementController) validateAdapterUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AdapterUnit) { // not required
		return nil
	}

	if m.AdapterUnit != nil {
		if err := m.AdapterUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdapterUnit")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateComputeBlade(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeBlade) { // not required
		return nil
	}

	if m.ComputeBlade != nil {
		if err := m.ComputeBlade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeBlade")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateComputeRackUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeRackUnit) { // not required
		return nil
	}

	if m.ComputeRackUnit != nil {
		if err := m.ComputeRackUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeRackUnit")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateManagementInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagementInterfaces); i++ {
		if swag.IsZero(m.ManagementInterfaces[i]) { // not required
			continue
		}

		if m.ManagementInterfaces[i] != nil {
			if err := m.ManagementInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ManagementInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManagementController) validateNetworkElement(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElement) { // not required
		return nil
	}

	if m.NetworkElement != nil {
		if err := m.NetworkElement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkElement")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateRunningFirmware(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningFirmware) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningFirmware); i++ {
		if swag.IsZero(m.RunningFirmware[i]) { // not required
			continue
		}

		if m.RunningFirmware[i] != nil {
			if err := m.RunningFirmware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RunningFirmware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManagementController) validateStorageSasExpander(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageSasExpander) { // not required
		return nil
	}

	if m.StorageSasExpander != nil {
		if err := m.StorageSasExpander.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageSasExpander")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementController) validateTopSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.TopSystem) { // not required
		return nil
	}

	if m.TopSystem != nil {
		if err := m.TopSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TopSystem")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagementController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementController) UnmarshalBinary(b []byte) error {
	var res ManagementController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
