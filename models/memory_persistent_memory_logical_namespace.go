// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MemoryPersistentMemoryLogicalNamespace Persistent Memory Logical Namespace
//
// Persistent Memory Namespace specification that needs to be applied to the associated servers through this policy. This would result in the creation, modification, or deletion of a Namespace on the servers.
//
// swagger:model memoryPersistentMemoryLogicalNamespace
type MemoryPersistentMemoryLogicalNamespace struct {
	MoBaseComplexType

	MemoryPersistentMemoryLogicalNamespaceAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MemoryPersistentMemoryLogicalNamespace) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 MemoryPersistentMemoryLogicalNamespaceAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.MemoryPersistentMemoryLogicalNamespaceAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MemoryPersistentMemoryLogicalNamespace) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.MemoryPersistentMemoryLogicalNamespaceAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this memory persistent memory logical namespace
func (m *MemoryPersistentMemoryLogicalNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MemoryPersistentMemoryLogicalNamespaceAO1P1
	if err := m.MemoryPersistentMemoryLogicalNamespaceAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MemoryPersistentMemoryLogicalNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryPersistentMemoryLogicalNamespace) UnmarshalBinary(b []byte) error {
	var res MemoryPersistentMemoryLogicalNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MemoryPersistentMemoryLogicalNamespaceAO1P1 memory persistent memory logical namespace a o1 p1
//
// swagger:model MemoryPersistentMemoryLogicalNamespaceAO1P1
type MemoryPersistentMemoryLogicalNamespaceAO1P1 struct {

	// Capacity of this Namespace that is created or modified.
	Capacity int64 `json:"Capacity,omitempty"`

	// Mode of this Namespace that is created or modified.
	// Enum: [raw block]
	Mode *string `json:"Mode,omitempty"`

	// Name of this Namespace to be created on the server.
	Name string `json:"Name,omitempty"`

	// Socket ID of the region on which this Namespace has to be created or modified.
	// Enum: [1 2 3 4]
	SocketID *int64 `json:"SocketId,omitempty"`

	// Socket Memory ID of the region on which this Namespace has to be created or modified.
	// Enum: [Not Applicable 2 4 6 8 10 12]
	SocketMemoryID *string `json:"SocketMemoryId,omitempty"`

	// memory persistent memory logical namespace a o1 p1
	MemoryPersistentMemoryLogicalNamespaceAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Capacity of this Namespace that is created or modified.
		Capacity int64 `json:"Capacity,omitempty"`

		// Mode of this Namespace that is created or modified.
		// Enum: [raw block]
		Mode *string `json:"Mode,omitempty"`

		// Name of this Namespace to be created on the server.
		Name string `json:"Name,omitempty"`

		// Socket ID of the region on which this Namespace has to be created or modified.
		// Enum: [1 2 3 4]
		SocketID *int64 `json:"SocketId,omitempty"`

		// Socket Memory ID of the region on which this Namespace has to be created or modified.
		// Enum: [Not Applicable 2 4 6 8 10 12]
		SocketMemoryID *string `json:"SocketMemoryId,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv MemoryPersistentMemoryLogicalNamespaceAO1P1

	rcv.Capacity = stage1.Capacity
	rcv.Mode = stage1.Mode
	rcv.Name = stage1.Name
	rcv.SocketID = stage1.SocketID
	rcv.SocketMemoryID = stage1.SocketMemoryID
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Capacity")
	delete(stage2, "Mode")
	delete(stage2, "Name")
	delete(stage2, "SocketId")
	delete(stage2, "SocketMemoryId")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.MemoryPersistentMemoryLogicalNamespaceAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m MemoryPersistentMemoryLogicalNamespaceAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Capacity of this Namespace that is created or modified.
		Capacity int64 `json:"Capacity,omitempty"`

		// Mode of this Namespace that is created or modified.
		// Enum: [raw block]
		Mode *string `json:"Mode,omitempty"`

		// Name of this Namespace to be created on the server.
		Name string `json:"Name,omitempty"`

		// Socket ID of the region on which this Namespace has to be created or modified.
		// Enum: [1 2 3 4]
		SocketID *int64 `json:"SocketId,omitempty"`

		// Socket Memory ID of the region on which this Namespace has to be created or modified.
		// Enum: [Not Applicable 2 4 6 8 10 12]
		SocketMemoryID *string `json:"SocketMemoryId,omitempty"`
	}

	stage1.Capacity = m.Capacity
	stage1.Mode = m.Mode
	stage1.Name = m.Name
	stage1.SocketID = m.SocketID
	stage1.SocketMemoryID = m.SocketMemoryID

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.MemoryPersistentMemoryLogicalNamespaceAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.MemoryPersistentMemoryLogicalNamespaceAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this memory persistent memory logical namespace a o1 p1
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocketID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocketMemoryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var memoryPersistentMemoryLogicalNamespaceAO1P1TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raw","block"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memoryPersistentMemoryLogicalNamespaceAO1P1TypeModePropEnum = append(memoryPersistentMemoryLogicalNamespaceAO1P1TypeModePropEnum, v)
	}
}

const (

	// MemoryPersistentMemoryLogicalNamespaceAO1P1ModeRaw captures enum value "raw"
	MemoryPersistentMemoryLogicalNamespaceAO1P1ModeRaw string = "raw"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1ModeBlock captures enum value "block"
	MemoryPersistentMemoryLogicalNamespaceAO1P1ModeBlock string = "block"
)

// prop value enum
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, memoryPersistentMemoryLogicalNamespaceAO1P1TypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("Mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

var memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketIDPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketIDPropEnum = append(memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketIDPropEnum, v)
	}
}

// prop value enum
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateSocketIDEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateSocketID(formats strfmt.Registry) error {

	if swag.IsZero(m.SocketID) { // not required
		return nil
	}

	// value enum
	if err := m.validateSocketIDEnum("SocketId", "body", *m.SocketID); err != nil {
		return err
	}

	return nil
}

var memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketMemoryIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Not Applicable","2","4","6","8","10","12"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketMemoryIDPropEnum = append(memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketMemoryIDPropEnum, v)
	}
}

const (

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNotApplicable captures enum value "Not Applicable"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNotApplicable string = "Not Applicable"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr2 captures enum value "2"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr2 string = "2"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr4 captures enum value "4"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr4 string = "4"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr6 captures enum value "6"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr6 string = "6"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr8 captures enum value "8"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr8 string = "8"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr10 captures enum value "10"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr10 string = "10"

	// MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr12 captures enum value "12"
	MemoryPersistentMemoryLogicalNamespaceAO1P1SocketMemoryIDNr12 string = "12"
)

// prop value enum
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateSocketMemoryIDEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, memoryPersistentMemoryLogicalNamespaceAO1P1TypeSocketMemoryIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) validateSocketMemoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.SocketMemoryID) { // not required
		return nil
	}

	// value enum
	if err := m.validateSocketMemoryIDEnum("SocketMemoryId", "body", *m.SocketMemoryID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryPersistentMemoryLogicalNamespaceAO1P1) UnmarshalBinary(b []byte) error {
	var res MemoryPersistentMemoryLogicalNamespaceAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
