// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplianceSetupInfo Appliance:Setup Info
//
// SetupInfo will have only one managed object. SetupInfo managed object is to keep
// track of the Intersight Appliance's setup information and guide the UI through
// the initial configuration of the Intersight Appliance.
// The SetupInfo managed object is created during the Intersight Appliance setup.
// The Intersight UI uses this object to store the initial configuration states
// that the user has completed. If the user closes the Intersight UI without
// finishing all the initial configuration, then the Intersight UI will use this
// managed object to display the next configuration that the user needs to complete
// when the user uses the Intersight Appliance next time.
//
// swagger:model applianceSetupInfo
type ApplianceSetupInfo struct {
	MoBaseMo

	// SetupInfo managed object to Account relationship.
	Account *IamAccountRef `json:"Account,omitempty"`

	// Build type of the Intersight Appliance setup (e.g. release or debug).
	// Read Only: true
	BuildType string `json:"BuildType,omitempty"`

	// The array of capabilities, that enable key-value metadata for Intersight Appliance. For example, Intersight Assist is one of the capabilities.
	// Read Only: true
	Capabilities []*ApplianceKeyValuePair `json:"Capabilities"`

	// URL of the Intersight to which this Intersight Appliance is connected to.
	// Read Only: true
	CloudURL string `json:"CloudUrl,omitempty"`

	// End date of the Intersight Appliance's initial setup.
	// Read Only: true
	// Format: date-time
	EndTime strfmt.DateTime `json:"EndTime,omitempty"`

	// Collection of completed initial wizard setup states. Some examples of the wizard states are 'user account creation', 'licence registration' etc.
	SetupStates []string `json:"SetupStates"`

	// Start date of the Intersight Appliance's initial setup.
	// Read Only: true
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceSetupInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		BuildType string `json:"BuildType,omitempty"`

		Capabilities []*ApplianceKeyValuePair `json:"Capabilities"`

		CloudURL string `json:"CloudUrl,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		SetupStates []string `json:"SetupStates"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.BuildType = dataAO1.BuildType

	m.Capabilities = dataAO1.Capabilities

	m.CloudURL = dataAO1.CloudURL

	m.EndTime = dataAO1.EndTime

	m.SetupStates = dataAO1.SetupStates

	m.StartTime = dataAO1.StartTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceSetupInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		BuildType string `json:"BuildType,omitempty"`

		Capabilities []*ApplianceKeyValuePair `json:"Capabilities"`

		CloudURL string `json:"CloudUrl,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		SetupStates []string `json:"SetupStates"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.BuildType = m.BuildType

	dataAO1.Capabilities = m.Capabilities

	dataAO1.CloudURL = m.CloudURL

	dataAO1.EndTime = m.EndTime

	dataAO1.SetupStates = m.SetupStates

	dataAO1.StartTime = m.StartTime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance setup info
func (m *ApplianceSetupInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplianceSetupInfo) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *ApplianceSetupInfo) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capabilities); i++ {
		if swag.IsZero(m.Capabilities[i]) { // not required
			continue
		}

		if m.Capabilities[i] != nil {
			if err := m.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplianceSetupInfo) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplianceSetupInfo) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceSetupInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceSetupInfo) UnmarshalBinary(b []byte) error {
	var res ApplianceSetupInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
