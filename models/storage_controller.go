// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageController Storage:Controller
//
// Storage Controller present in a server.
//
// swagger:model storageController
type StorageController struct {
	EquipmentBase

	// A collection of references to the [compute.Board](mo://compute.Board) Managed Object.
	// When this managed object is deleted, the referenced [compute.Board](mo://compute.Board) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

	// controller flags
	// Read Only: true
	ControllerFlags string `json:"ControllerFlags,omitempty"`

	// It shows the Id of controller.
	// Read Only: true
	ControllerID string `json:"ControllerId,omitempty"`

	// It shows the current status of controller.
	// Read Only: true
	ControllerStatus string `json:"ControllerStatus,omitempty"`

	// It shows the hardware revision of controller.
	// Read Only: true
	HwRevision string `json:"HwRevision,omitempty"`

	// It shows CIMC support for out-of-band configuration of controller.
	// Read Only: true
	OobInterfaceSupported string `json:"OobInterfaceSupported,omitempty"`

	// It shows the current operational state of controller.
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// operability
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// It shows the current pci address of controller.
	// Read Only: true
	PciAddr string `json:"PciAddr,omitempty"`

	// It shows the pci slot name for the controller.
	// Read Only: true
	PciSlot string `json:"PciSlot,omitempty"`

	// Indicates a SCSI controller has physical connectivity to specified physical disk.
	// Read Only: true
	PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

	// Physical Disk on a server.
	// Read Only: true
	PhysicalDisks []*StoragePhysicalDiskRef `json:"PhysicalDisks"`

	// It shows physical presence or absence of the controller on server.
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// It shows the RAID levels supported by controller.
	// Read Only: true
	RaidSupport string `json:"RaidSupport,omitempty"`

	// rebuild rate
	// Read Only: true
	RebuildRate string `json:"RebuildRate,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// It shows the currently running firmware version.
	// Read Only: true
	RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

	// self encrypt enabled
	SelfEncryptEnabled string `json:"SelfEncryptEnabled,omitempty"`

	// Controller types are SAS, SATA, PCH, NVME.
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// virtual drive extensions
	// Read Only: true
	VirtualDriveExtensions []*StorageVirtualDriveExtensionRef `json:"VirtualDriveExtensions"`

	// Storage physical drives are grouped as Drive Group, a drive group then can be partitioned into virtual drives.
	// Read Only: true
	VirtualDrives []*StorageVirtualDriveRef `json:"VirtualDrives"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageController) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

		ControllerFlags string `json:"ControllerFlags,omitempty"`

		ControllerID string `json:"ControllerId,omitempty"`

		ControllerStatus string `json:"ControllerStatus,omitempty"`

		HwRevision string `json:"HwRevision,omitempty"`

		OobInterfaceSupported string `json:"OobInterfaceSupported,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PciAddr string `json:"PciAddr,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

		PhysicalDisks []*StoragePhysicalDiskRef `json:"PhysicalDisks"`

		Presence string `json:"Presence,omitempty"`

		RaidSupport string `json:"RaidSupport,omitempty"`

		RebuildRate string `json:"RebuildRate,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		SelfEncryptEnabled string `json:"SelfEncryptEnabled,omitempty"`

		Type string `json:"Type,omitempty"`

		VirtualDriveExtensions []*StorageVirtualDriveExtensionRef `json:"VirtualDriveExtensions"`

		VirtualDrives []*StorageVirtualDriveRef `json:"VirtualDrives"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ComputeBoard = dataAO1.ComputeBoard

	m.ControllerFlags = dataAO1.ControllerFlags

	m.ControllerID = dataAO1.ControllerID

	m.ControllerStatus = dataAO1.ControllerStatus

	m.HwRevision = dataAO1.HwRevision

	m.OobInterfaceSupported = dataAO1.OobInterfaceSupported

	m.OperState = dataAO1.OperState

	m.Operability = dataAO1.Operability

	m.PciAddr = dataAO1.PciAddr

	m.PciSlot = dataAO1.PciSlot

	m.PhysicalDiskExtensions = dataAO1.PhysicalDiskExtensions

	m.PhysicalDisks = dataAO1.PhysicalDisks

	m.Presence = dataAO1.Presence

	m.RaidSupport = dataAO1.RaidSupport

	m.RebuildRate = dataAO1.RebuildRate

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.RunningFirmware = dataAO1.RunningFirmware

	m.SelfEncryptEnabled = dataAO1.SelfEncryptEnabled

	m.Type = dataAO1.Type

	m.VirtualDriveExtensions = dataAO1.VirtualDriveExtensions

	m.VirtualDrives = dataAO1.VirtualDrives

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageController) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ComputeBoard *ComputeBoardRef `json:"ComputeBoard,omitempty"`

		ControllerFlags string `json:"ControllerFlags,omitempty"`

		ControllerID string `json:"ControllerId,omitempty"`

		ControllerStatus string `json:"ControllerStatus,omitempty"`

		HwRevision string `json:"HwRevision,omitempty"`

		OobInterfaceSupported string `json:"OobInterfaceSupported,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PciAddr string `json:"PciAddr,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

		PhysicalDisks []*StoragePhysicalDiskRef `json:"PhysicalDisks"`

		Presence string `json:"Presence,omitempty"`

		RaidSupport string `json:"RaidSupport,omitempty"`

		RebuildRate string `json:"RebuildRate,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		SelfEncryptEnabled string `json:"SelfEncryptEnabled,omitempty"`

		Type string `json:"Type,omitempty"`

		VirtualDriveExtensions []*StorageVirtualDriveExtensionRef `json:"VirtualDriveExtensions"`

		VirtualDrives []*StorageVirtualDriveRef `json:"VirtualDrives"`
	}

	dataAO1.ComputeBoard = m.ComputeBoard

	dataAO1.ControllerFlags = m.ControllerFlags

	dataAO1.ControllerID = m.ControllerID

	dataAO1.ControllerStatus = m.ControllerStatus

	dataAO1.HwRevision = m.HwRevision

	dataAO1.OobInterfaceSupported = m.OobInterfaceSupported

	dataAO1.OperState = m.OperState

	dataAO1.Operability = m.Operability

	dataAO1.PciAddr = m.PciAddr

	dataAO1.PciSlot = m.PciSlot

	dataAO1.PhysicalDiskExtensions = m.PhysicalDiskExtensions

	dataAO1.PhysicalDisks = m.PhysicalDisks

	dataAO1.Presence = m.Presence

	dataAO1.RaidSupport = m.RaidSupport

	dataAO1.RebuildRate = m.RebuildRate

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.RunningFirmware = m.RunningFirmware

	dataAO1.SelfEncryptEnabled = m.SelfEncryptEnabled

	dataAO1.Type = m.Type

	dataAO1.VirtualDriveExtensions = m.VirtualDriveExtensions

	dataAO1.VirtualDrives = m.VirtualDrives

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage controller
func (m *StorageController) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeBoard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDiskExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDriveExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDrives(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageController) validateComputeBoard(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeBoard) { // not required
		return nil
	}

	if m.ComputeBoard != nil {
		if err := m.ComputeBoard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeBoard")
			}
			return err
		}
	}

	return nil
}

func (m *StorageController) validatePhysicalDiskExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDiskExtensions) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalDiskExtensions); i++ {
		if swag.IsZero(m.PhysicalDiskExtensions[i]) { // not required
			continue
		}

		if m.PhysicalDiskExtensions[i] != nil {
			if err := m.PhysicalDiskExtensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PhysicalDiskExtensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageController) validatePhysicalDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalDisks); i++ {
		if swag.IsZero(m.PhysicalDisks[i]) { // not required
			continue
		}

		if m.PhysicalDisks[i] != nil {
			if err := m.PhysicalDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PhysicalDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageController) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageController) validateRunningFirmware(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningFirmware) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningFirmware); i++ {
		if swag.IsZero(m.RunningFirmware[i]) { // not required
			continue
		}

		if m.RunningFirmware[i] != nil {
			if err := m.RunningFirmware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RunningFirmware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageController) validateVirtualDriveExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDriveExtensions) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDriveExtensions); i++ {
		if swag.IsZero(m.VirtualDriveExtensions[i]) { // not required
			continue
		}

		if m.VirtualDriveExtensions[i] != nil {
			if err := m.VirtualDriveExtensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VirtualDriveExtensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageController) validateVirtualDrives(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDrives) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDrives); i++ {
		if swag.IsZero(m.VirtualDrives[i]) { // not required
			continue
		}

		if m.VirtualDrives[i] != nil {
			if err := m.VirtualDrives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VirtualDrives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageController) UnmarshalBinary(b []byte) error {
	var res StorageController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
