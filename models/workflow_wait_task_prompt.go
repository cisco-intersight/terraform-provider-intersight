// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowWaitTaskPrompt Workflow:Wait Task Prompt
//
// WaitTaskPrompt is used to create a customized prompts for wait control task. Wait task can be used in workflow for variety of reason, the prompts will help workflow designer to provide a customized set of prompts.
//
// swagger:model workflowWaitTaskPrompt
type WorkflowWaitTaskPrompt struct {
	MoBaseComplexType

	WorkflowWaitTaskPromptAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowWaitTaskPrompt) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowWaitTaskPromptAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowWaitTaskPromptAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowWaitTaskPrompt) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowWaitTaskPromptAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow wait task prompt
func (m *WorkflowWaitTaskPrompt) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowWaitTaskPromptAO1P1
	if err := m.WorkflowWaitTaskPromptAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowWaitTaskPrompt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowWaitTaskPrompt) UnmarshalBinary(b []byte) error {
	var res WorkflowWaitTaskPrompt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowWaitTaskPromptAO1P1 workflow wait task prompt a o1 p1
//
// swagger:model WorkflowWaitTaskPromptAO1P1
type WorkflowWaitTaskPromptAO1P1 struct {

	// Description that give more details about what it means to pick this prompt option for the wait task.
	Description string `json:"Description,omitempty"`

	// User friendly label for the prompt. This label will be shown to the user as one of available options for the wait task.
	Label string `json:"Label,omitempty"`

	// Name for the wait prompt.
	Name string `json:"Name,omitempty"`

	// Task status for the wait task when this prompt option is selected.
	// Enum: [Scheduled InProgress NoOp Timeout Completed Failed]
	TaskStatus *string `json:"TaskStatus,omitempty"`

	// workflow wait task prompt a o1 p1
	WorkflowWaitTaskPromptAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowWaitTaskPromptAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Description that give more details about what it means to pick this prompt option for the wait task.
		Description string `json:"Description,omitempty"`

		// User friendly label for the prompt. This label will be shown to the user as one of available options for the wait task.
		Label string `json:"Label,omitempty"`

		// Name for the wait prompt.
		Name string `json:"Name,omitempty"`

		// Task status for the wait task when this prompt option is selected.
		// Enum: [Scheduled InProgress NoOp Timeout Completed Failed]
		TaskStatus *string `json:"TaskStatus,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowWaitTaskPromptAO1P1

	rcv.Description = stage1.Description
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.TaskStatus = stage1.TaskStatus
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Description")
	delete(stage2, "Label")
	delete(stage2, "Name")
	delete(stage2, "TaskStatus")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowWaitTaskPromptAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowWaitTaskPromptAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Description that give more details about what it means to pick this prompt option for the wait task.
		Description string `json:"Description,omitempty"`

		// User friendly label for the prompt. This label will be shown to the user as one of available options for the wait task.
		Label string `json:"Label,omitempty"`

		// Name for the wait prompt.
		Name string `json:"Name,omitempty"`

		// Task status for the wait task when this prompt option is selected.
		// Enum: [Scheduled InProgress NoOp Timeout Completed Failed]
		TaskStatus *string `json:"TaskStatus,omitempty"`
	}

	stage1.Description = m.Description
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.TaskStatus = m.TaskStatus

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowWaitTaskPromptAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowWaitTaskPromptAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow wait task prompt a o1 p1
func (m *WorkflowWaitTaskPromptAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowWaitTaskPromptAO1P1TypeTaskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","InProgress","NoOp","Timeout","Completed","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowWaitTaskPromptAO1P1TypeTaskStatusPropEnum = append(workflowWaitTaskPromptAO1P1TypeTaskStatusPropEnum, v)
	}
}

const (

	// WorkflowWaitTaskPromptAO1P1TaskStatusScheduled captures enum value "Scheduled"
	WorkflowWaitTaskPromptAO1P1TaskStatusScheduled string = "Scheduled"

	// WorkflowWaitTaskPromptAO1P1TaskStatusInProgress captures enum value "InProgress"
	WorkflowWaitTaskPromptAO1P1TaskStatusInProgress string = "InProgress"

	// WorkflowWaitTaskPromptAO1P1TaskStatusNoOp captures enum value "NoOp"
	WorkflowWaitTaskPromptAO1P1TaskStatusNoOp string = "NoOp"

	// WorkflowWaitTaskPromptAO1P1TaskStatusTimeout captures enum value "Timeout"
	WorkflowWaitTaskPromptAO1P1TaskStatusTimeout string = "Timeout"

	// WorkflowWaitTaskPromptAO1P1TaskStatusCompleted captures enum value "Completed"
	WorkflowWaitTaskPromptAO1P1TaskStatusCompleted string = "Completed"

	// WorkflowWaitTaskPromptAO1P1TaskStatusFailed captures enum value "Failed"
	WorkflowWaitTaskPromptAO1P1TaskStatusFailed string = "Failed"
)

// prop value enum
func (m *WorkflowWaitTaskPromptAO1P1) validateTaskStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowWaitTaskPromptAO1P1TypeTaskStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowWaitTaskPromptAO1P1) validateTaskStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskStatusEnum("TaskStatus", "body", *m.TaskStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowWaitTaskPromptAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowWaitTaskPromptAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowWaitTaskPromptAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
