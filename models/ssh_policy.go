// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SSHPolicy SSH
//
// Secure shell policy on the endpoint.
//
// swagger:model sshPolicy
type SSHPolicy struct {
	PolicyAbstractPolicy

	// State of SSH service on the endpoint.
	Enabled *bool `json:"Enabled,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Port used for secure shell access.
	Port int64 `json:"Port,omitempty"`

	// Relationship to the server profile.
	Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

	// Number of seconds to wait before the system considers a SSH request to have timed out.
	Timeout int64 `json:"Timeout,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SSHPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractPolicy = aO0

	// AO1
	var dataAO1 struct {
		Enabled *bool `json:"Enabled,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		Timeout int64 `json:"Timeout,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Enabled = dataAO1.Enabled

	m.Organization = dataAO1.Organization

	m.Port = dataAO1.Port

	m.Profiles = dataAO1.Profiles

	m.Timeout = dataAO1.Timeout

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SSHPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Enabled *bool `json:"Enabled,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Profiles []*PolicyAbstractConfigProfileRef `json:"Profiles"`

		Timeout int64 `json:"Timeout,omitempty"`
	}

	dataAO1.Enabled = m.Enabled

	dataAO1.Organization = m.Organization

	dataAO1.Port = m.Port

	dataAO1.Profiles = m.Profiles

	dataAO1.Timeout = m.Timeout

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ssh policy
func (m *SSHPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractPolicy
	if err := m.PolicyAbstractPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHPolicy) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SSHPolicy) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SSHPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHPolicy) UnmarshalBinary(b []byte) error {
	var res SSHPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
