// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IaasConnectorPack Iaas:Connector Pack
//
// Describes about all the connector pack versions running currently in UCSD.
//
// swagger:model iaasConnectorPack
type IaasConnectorPack struct {
	MoBaseMo

	// Complete version of the connector pack including build number.
	// Read Only: true
	CompleteVersion string `json:"CompleteVersion,omitempty"`

	// List of dependent connectors on the UCSD for this connector. For example BigData depends on UCS Connector.
	// Read Only: true
	DependencyNames []string `json:"DependencyNames"`

	// Version of the connector pack that is last downloaded successfully to UCSD.
	// Read Only: true
	DownloadedVersion string `json:"DownloadedVersion,omitempty"`

	// A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.
	// When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO.
	// Read Only: true
	GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

	// Name of the connector pack running on the UCSD.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// State of the connector pack whether it is enabled or disabled.
	// Read Only: true
	State string `json:"State,omitempty"`

	// Version of the connector pack.
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IaasConnectorPack) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		CompleteVersion string `json:"CompleteVersion,omitempty"`

		DependencyNames []string `json:"DependencyNames"`

		DownloadedVersion string `json:"DownloadedVersion,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		Name string `json:"Name,omitempty"`

		State string `json:"State,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CompleteVersion = dataAO1.CompleteVersion

	m.DependencyNames = dataAO1.DependencyNames

	m.DownloadedVersion = dataAO1.DownloadedVersion

	m.GUID = dataAO1.GUID

	m.Name = dataAO1.Name

	m.State = dataAO1.State

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IaasConnectorPack) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CompleteVersion string `json:"CompleteVersion,omitempty"`

		DependencyNames []string `json:"DependencyNames"`

		DownloadedVersion string `json:"DownloadedVersion,omitempty"`

		GUID *IaasUcsdInfoRef `json:"Guid,omitempty"`

		Name string `json:"Name,omitempty"`

		State string `json:"State,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.CompleteVersion = m.CompleteVersion

	dataAO1.DependencyNames = m.DependencyNames

	dataAO1.DownloadedVersion = m.DownloadedVersion

	dataAO1.GUID = m.GUID

	dataAO1.Name = m.Name

	dataAO1.State = m.State

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iaas connector pack
func (m *IaasConnectorPack) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IaasConnectorPack) validateGUID(formats strfmt.Registry) error {

	if swag.IsZero(m.GUID) { // not required
		return nil
	}

	if m.GUID != nil {
		if err := m.GUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Guid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IaasConnectorPack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IaasConnectorPack) UnmarshalBinary(b []byte) error {
	var res IaasConnectorPack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
