// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EtherPhysicalPort Ether:Physical Port
//
// Physical ethernet port present on a FI.
//
// swagger:model etherPhysicalPort
type EtherPhysicalPort struct {
	PortPhysical

	// mac address
	// Read Only: true
	MacAddress string `json:"MacAddress,omitempty"`

	// A collection of references to the [port.Group](mo://port.Group) Managed Object.
	// When this managed object is deleted, the referenced [port.Group](mo://port.Group) MO unsets its reference to this deleted MO.
	// Read Only: true
	PortGroup *PortGroupRef `json:"PortGroup,omitempty"`

	// A collection of references to the [port.SubGroup](mo://port.SubGroup) Managed Object.
	// When this managed object is deleted, the referenced [port.SubGroup](mo://port.SubGroup) MO unsets its reference to this deleted MO.
	// Read Only: true
	PortSubGroup *PortSubGroupRef `json:"PortSubGroup,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// transceiver type
	// Read Only: true
	TransceiverType string `json:"TransceiverType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EtherPhysicalPort) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PortPhysical
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PortPhysical = aO0

	// AO1
	var dataAO1 struct {
		MacAddress string `json:"MacAddress,omitempty"`

		PortGroup *PortGroupRef `json:"PortGroup,omitempty"`

		PortSubGroup *PortSubGroupRef `json:"PortSubGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TransceiverType string `json:"TransceiverType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.MacAddress = dataAO1.MacAddress

	m.PortGroup = dataAO1.PortGroup

	m.PortSubGroup = dataAO1.PortSubGroup

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.TransceiverType = dataAO1.TransceiverType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EtherPhysicalPort) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PortPhysical)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		MacAddress string `json:"MacAddress,omitempty"`

		PortGroup *PortGroupRef `json:"PortGroup,omitempty"`

		PortSubGroup *PortSubGroupRef `json:"PortSubGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TransceiverType string `json:"TransceiverType,omitempty"`
	}

	dataAO1.MacAddress = m.MacAddress

	dataAO1.PortGroup = m.PortGroup

	dataAO1.PortSubGroup = m.PortSubGroup

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.TransceiverType = m.TransceiverType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ether physical port
func (m *EtherPhysicalPort) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PortPhysical
	if err := m.PortPhysical.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortSubGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EtherPhysicalPort) validatePortGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PortGroup) { // not required
		return nil
	}

	if m.PortGroup != nil {
		if err := m.PortGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PortGroup")
			}
			return err
		}
	}

	return nil
}

func (m *EtherPhysicalPort) validatePortSubGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PortSubGroup) { // not required
		return nil
	}

	if m.PortSubGroup != nil {
		if err := m.PortSubGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PortSubGroup")
			}
			return err
		}
	}

	return nil
}

func (m *EtherPhysicalPort) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EtherPhysicalPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EtherPhysicalPort) UnmarshalBinary(b []byte) error {
	var res EtherPhysicalPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
