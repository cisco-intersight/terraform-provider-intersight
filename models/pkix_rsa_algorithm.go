// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PkixRsaAlgorithm Pkix:Rsa Algorithm
//
// The key pair is generated using the RSA algorithm and specified parameters.
//
// swagger:model pkixRsaAlgorithm
type PkixRsaAlgorithm struct {
	PkixKeyGenerationSpec

	// The length of the RSA key, expressed in bits, for both public and private keys.
	// Enum: [2048 2560 3072 3584 4096]
	Modulus *int64 `json:"Modulus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PkixRsaAlgorithm) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PkixKeyGenerationSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PkixKeyGenerationSpec = aO0

	// AO1
	var dataAO1 struct {
		Modulus *int64 `json:"Modulus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Modulus = dataAO1.Modulus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PkixRsaAlgorithm) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PkixKeyGenerationSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Modulus *int64 `json:"Modulus,omitempty"`
	}

	dataAO1.Modulus = m.Modulus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pkix rsa algorithm
func (m *PkixRsaAlgorithm) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PkixKeyGenerationSpec
	if err := m.PkixKeyGenerationSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModulus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pkixRsaAlgorithmTypeModulusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[2048,2560,3072,3584,4096]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pkixRsaAlgorithmTypeModulusPropEnum = append(pkixRsaAlgorithmTypeModulusPropEnum, v)
	}
}

// property enum
func (m *PkixRsaAlgorithm) validateModulusEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, pkixRsaAlgorithmTypeModulusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PkixRsaAlgorithm) validateModulus(formats strfmt.Registry) error {

	if swag.IsZero(m.Modulus) { // not required
		return nil
	}

	// value enum
	if err := m.validateModulusEnum("Modulus", "body", *m.Modulus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkixRsaAlgorithm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkixRsaAlgorithm) UnmarshalBinary(b []byte) error {
	var res PkixRsaAlgorithm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
