// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalsiteAuthorization Externalsite:Authorization
//
// An authentication request that will be used to get authorized from external repository like cisco.com in order to download the image. This MO creation is a one time configuration before calling firmware.Upgrade API. This MO has to be modified with updated details whenever the user has updated the credentials in external repository.
//
// swagger:model externalsiteAuthorization
type ExternalsiteAuthorization struct {
	MoBaseMo

	// Reference of the account to which this authorization configuration is owned.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// is user Id set
	IsUserIDSet *bool `json:"IsUserIdSet,omitempty"`

	// The password of the given username to download the image from external repository like cisco.com.
	Password string `json:"Password,omitempty"`

	// The repository type to which this authorization will be requested. Cisco is the only available repository today.
	// Enum: [cisco]
	RepositoryType *string `json:"RepositoryType,omitempty"`

	// The username that has permission to download the image from external repository like cisco.com.
	UserID string `json:"UserId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExternalsiteAuthorization) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		IsUserIDSet *bool `json:"IsUserIdSet,omitempty"`

		Password string `json:"Password,omitempty"`

		RepositoryType *string `json:"RepositoryType,omitempty"`

		UserID string `json:"UserId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.IsUserIDSet = dataAO1.IsUserIDSet

	m.Password = dataAO1.Password

	m.RepositoryType = dataAO1.RepositoryType

	m.UserID = dataAO1.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExternalsiteAuthorization) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		IsUserIDSet *bool `json:"IsUserIdSet,omitempty"`

		Password string `json:"Password,omitempty"`

		RepositoryType *string `json:"RepositoryType,omitempty"`

		UserID string `json:"UserId,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.IsUserIDSet = m.IsUserIDSet

	dataAO1.Password = m.Password

	dataAO1.RepositoryType = m.RepositoryType

	dataAO1.UserID = m.UserID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this externalsite authorization
func (m *ExternalsiteAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalsiteAuthorization) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

var externalsiteAuthorizationTypeRepositoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cisco"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalsiteAuthorizationTypeRepositoryTypePropEnum = append(externalsiteAuthorizationTypeRepositoryTypePropEnum, v)
	}
}

// property enum
func (m *ExternalsiteAuthorization) validateRepositoryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, externalsiteAuthorizationTypeRepositoryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExternalsiteAuthorization) validateRepositoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.RepositoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRepositoryTypeEnum("RepositoryType", "body", *m.RepositoryType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalsiteAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalsiteAuthorization) UnmarshalBinary(b []byte) error {
	var res ExternalsiteAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
