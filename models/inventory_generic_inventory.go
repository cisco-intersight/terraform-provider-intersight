// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryGenericInventory Inventory:Generic Inventory
//
// Any inventory which is represented as a key / value pair. Example - moInvKv in UCSM representing OS tools running on ESX.
//
// swagger:model inventoryGenericInventory
type InventoryGenericInventory struct {
	InventoryBase

	// A collection of references to the [inventory.GenericInventoryHolder](mo://inventory.GenericInventoryHolder) Managed Object.
	// When this managed object is deleted, the referenced [inventory.GenericInventoryHolder](mo://inventory.GenericInventoryHolder) MO unsets its reference to this deleted MO.
	// Read Only: true
	InventoryGenericInventoryHolder *InventoryGenericInventoryHolderRef `json:"InventoryGenericInventoryHolder,omitempty"`

	// key
	// Read Only: true
	Key string `json:"Key,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// type
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// value
	// Read Only: true
	Value string `json:"Value,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InventoryGenericInventory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		InventoryGenericInventoryHolder *InventoryGenericInventoryHolderRef `json:"InventoryGenericInventoryHolder,omitempty"`

		Key string `json:"Key,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Type string `json:"Type,omitempty"`

		Value string `json:"Value,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.InventoryGenericInventoryHolder = dataAO1.InventoryGenericInventoryHolder

	m.Key = dataAO1.Key

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Type = dataAO1.Type

	m.Value = dataAO1.Value

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InventoryGenericInventory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		InventoryGenericInventoryHolder *InventoryGenericInventoryHolderRef `json:"InventoryGenericInventoryHolder,omitempty"`

		Key string `json:"Key,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Type string `json:"Type,omitempty"`

		Value string `json:"Value,omitempty"`
	}

	dataAO1.InventoryGenericInventoryHolder = m.InventoryGenericInventoryHolder

	dataAO1.Key = m.Key

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Type = m.Type

	dataAO1.Value = m.Value

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this inventory generic inventory
func (m *InventoryGenericInventory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryGenericInventoryHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryGenericInventory) validateInventoryGenericInventoryHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryGenericInventoryHolder) { // not required
		return nil
	}

	if m.InventoryGenericInventoryHolder != nil {
		if err := m.InventoryGenericInventoryHolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InventoryGenericInventoryHolder")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryGenericInventory) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryGenericInventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryGenericInventory) UnmarshalBinary(b []byte) error {
	var res InventoryGenericInventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
