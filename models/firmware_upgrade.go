// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareUpgrade Firmware:Upgrade
//
// Firmware upgrade operation that downloads the image from Cisco/appliance/user provided HTTP repository or use the image from a network share and upgrade. The direct download is used for upgrade to use the image from Cisco repository or appliance repository. The network share is used for upgrade to use the image from a network share in user data center.
//
// swagger:model firmwareUpgrade
type FirmwareUpgrade struct {
	MoBaseMo

	// The device onto which the upgrade is peformed.
	// Read Only: true
	Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

	// Direct download options in case the upgradeType is direct download based upgrade.
	DirectDownload *FirmwareDirectDownload `json:"DirectDownload,omitempty"`

	// The image that is used to upgrade the server for direct download upgrade type operation.
	Distributable *FirmwareDistributableRef `json:"Distributable,omitempty"`

	// Network share options in case of the upgradeType is network share based upgrade.
	NetworkShare *FirmwareNetworkShare `json:"NetworkShare,omitempty"`

	// The server on which this upgrade operation is performed.
	Server *ComputeRackUnitRef `json:"Server,omitempty"`

	// Captures status of this upgrade information.
	// Read Only: true
	UpgradeStatus *FirmwareUpgradeStatusRef `json:"UpgradeStatus,omitempty"`

	// Desired upgrade mode to choose either direct download based upgrade or network share upgrade.
	// Enum: [direct_upgrade network_upgrade]
	UpgradeType *string `json:"UpgradeType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareUpgrade) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		DirectDownload *FirmwareDirectDownload `json:"DirectDownload,omitempty"`

		Distributable *FirmwareDistributableRef `json:"Distributable,omitempty"`

		NetworkShare *FirmwareNetworkShare `json:"NetworkShare,omitempty"`

		Server *ComputeRackUnitRef `json:"Server,omitempty"`

		UpgradeStatus *FirmwareUpgradeStatusRef `json:"UpgradeStatus,omitempty"`

		UpgradeType *string `json:"UpgradeType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Device = dataAO1.Device

	m.DirectDownload = dataAO1.DirectDownload

	m.Distributable = dataAO1.Distributable

	m.NetworkShare = dataAO1.NetworkShare

	m.Server = dataAO1.Server

	m.UpgradeStatus = dataAO1.UpgradeStatus

	m.UpgradeType = dataAO1.UpgradeType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareUpgrade) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		DirectDownload *FirmwareDirectDownload `json:"DirectDownload,omitempty"`

		Distributable *FirmwareDistributableRef `json:"Distributable,omitempty"`

		NetworkShare *FirmwareNetworkShare `json:"NetworkShare,omitempty"`

		Server *ComputeRackUnitRef `json:"Server,omitempty"`

		UpgradeStatus *FirmwareUpgradeStatusRef `json:"UpgradeStatus,omitempty"`

		UpgradeType *string `json:"UpgradeType,omitempty"`
	}

	dataAO1.Device = m.Device

	dataAO1.DirectDownload = m.DirectDownload

	dataAO1.Distributable = m.Distributable

	dataAO1.NetworkShare = m.NetworkShare

	dataAO1.Server = m.Server

	dataAO1.UpgradeStatus = m.UpgradeStatus

	dataAO1.UpgradeType = m.UpgradeType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware upgrade
func (m *FirmwareUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkShare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareUpgrade) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Device")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareUpgrade) validateDirectDownload(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDownload) { // not required
		return nil
	}

	if m.DirectDownload != nil {
		if err := m.DirectDownload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DirectDownload")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareUpgrade) validateDistributable(formats strfmt.Registry) error {

	if swag.IsZero(m.Distributable) { // not required
		return nil
	}

	if m.Distributable != nil {
		if err := m.Distributable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Distributable")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareUpgrade) validateNetworkShare(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkShare) { // not required
		return nil
	}

	if m.NetworkShare != nil {
		if err := m.NetworkShare.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkShare")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareUpgrade) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Server")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareUpgrade) validateUpgradeStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeStatus) { // not required
		return nil
	}

	if m.UpgradeStatus != nil {
		if err := m.UpgradeStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpgradeStatus")
			}
			return err
		}
	}

	return nil
}

var firmwareUpgradeTypeUpgradeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["direct_upgrade","network_upgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareUpgradeTypeUpgradeTypePropEnum = append(firmwareUpgradeTypeUpgradeTypePropEnum, v)
	}
}

// property enum
func (m *FirmwareUpgrade) validateUpgradeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareUpgradeTypeUpgradeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareUpgrade) validateUpgradeType(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeTypeEnum("UpgradeType", "body", *m.UpgradeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareUpgrade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareUpgrade) UnmarshalBinary(b []byte) error {
	var res FirmwareUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
