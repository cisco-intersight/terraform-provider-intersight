// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageEnclosureDisk Storage:Enclosure Disk
//
// Physical Disk on the enclosure.
//
// swagger:model storageEnclosureDisk
type StorageEnclosureDisk struct {
	EquipmentBase

	// The block size of the physical disk in bytes.
	BlockSize string `json:"BlockSize,omitempty"`

	// This field represents the disk Id in the storage enclosure.
	DiskID string `json:"DiskId,omitempty"`

	// This field identifies the current disk configuration applied in the physical disk.
	DiskState string `json:"DiskState,omitempty"`

	// health
	Health string `json:"Health,omitempty"`

	// The number of blocks present on the physical disk.
	NumBlocks string `json:"NumBlocks,omitempty"`

	// Physical Disk on a server.
	PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

	// This field identifies the Product ID for physicalDisk.
	// Read Only: true
	Pid string `json:"Pid,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// This field identifies the SAS address assigned to the disk SAS port-1.
	SasAddress1 string `json:"SasAddress1,omitempty"`

	// This field identifies the SAS address assigned to the disk SAS port-2.
	SasAddress2 string `json:"SasAddress2,omitempty"`

	// The size of the physical disk in MB.
	Size string `json:"Size,omitempty"`

	// A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.
	// When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageEnclosureDisk) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		DiskID string `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		Health string `json:"Health,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

		Pid string `json:"Pid,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SasAddress1 string `json:"SasAddress1,omitempty"`

		SasAddress2 string `json:"SasAddress2,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BlockSize = dataAO1.BlockSize

	m.DiskID = dataAO1.DiskID

	m.DiskState = dataAO1.DiskState

	m.Health = dataAO1.Health

	m.NumBlocks = dataAO1.NumBlocks

	m.PhysicalDisk = dataAO1.PhysicalDisk

	m.Pid = dataAO1.Pid

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SasAddress1 = dataAO1.SasAddress1

	m.SasAddress2 = dataAO1.SasAddress2

	m.Size = dataAO1.Size

	m.StorageEnclosure = dataAO1.StorageEnclosure

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageEnclosureDisk) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		DiskID string `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		Health string `json:"Health,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

		Pid string `json:"Pid,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SasAddress1 string `json:"SasAddress1,omitempty"`

		SasAddress2 string `json:"SasAddress2,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`
	}

	dataAO1.BlockSize = m.BlockSize

	dataAO1.DiskID = m.DiskID

	dataAO1.DiskState = m.DiskState

	dataAO1.Health = m.Health

	dataAO1.NumBlocks = m.NumBlocks

	dataAO1.PhysicalDisk = m.PhysicalDisk

	dataAO1.Pid = m.Pid

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SasAddress1 = m.SasAddress1

	dataAO1.SasAddress2 = m.SasAddress2

	dataAO1.Size = m.Size

	dataAO1.StorageEnclosure = m.StorageEnclosure

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage enclosure disk
func (m *StorageEnclosureDisk) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEnclosure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageEnclosureDisk) validatePhysicalDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDisk) { // not required
		return nil
	}

	if m.PhysicalDisk != nil {
		if err := m.PhysicalDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PhysicalDisk")
			}
			return err
		}
	}

	return nil
}

func (m *StorageEnclosureDisk) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageEnclosureDisk) validateStorageEnclosure(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageEnclosure) { // not required
		return nil
	}

	if m.StorageEnclosure != nil {
		if err := m.StorageEnclosure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageEnclosure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageEnclosureDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageEnclosureDisk) UnmarshalBinary(b []byte) error {
	var res StorageEnclosureDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
