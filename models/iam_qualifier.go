// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamQualifier Iam:Qualifier
//
// The qualifier defines how a user qualifies to be part of a user group.
//
// swagger:model iamQualifier
type IamQualifier struct {
	MoBaseMo

	// The name of the SAML attribute used to qualify a user to user group. By default this is memberOf attribute in SAML assertion.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// A collection of references to the [iam.UserGroup](mo://iam.UserGroup) Managed Object.
	// When this managed object is deleted, the referenced [iam.UserGroup](mo://iam.UserGroup) MO unsets its reference to this deleted MO.
	Usergroup *IamUserGroupRef `json:"Usergroup,omitempty"`

	// The value of the SAML attribute.
	Value []string `json:"Value"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamQualifier) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Usergroup *IamUserGroupRef `json:"Usergroup,omitempty"`

		Value []string `json:"Value"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.Usergroup = dataAO1.Usergroup

	m.Value = dataAO1.Value

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamQualifier) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Usergroup *IamUserGroupRef `json:"Usergroup,omitempty"`

		Value []string `json:"Value"`
	}

	dataAO1.Name = m.Name

	dataAO1.Usergroup = m.Usergroup

	dataAO1.Value = m.Value

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam qualifier
func (m *IamQualifier) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsergroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamQualifier) validateUsergroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Usergroup) { // not required
		return nil
	}

	if m.Usergroup != nil {
		if err := m.Usergroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Usergroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamQualifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamQualifier) UnmarshalBinary(b []byte) error {
	var res IamQualifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
