// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HyperflexSummary Hyperflex:Summary
//
// swagger:model hyperflexSummary
type HyperflexSummary struct {
	MoBaseComplexType

	HyperflexSummaryAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexSummary) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 HyperflexSummaryAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HyperflexSummaryAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexSummary) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HyperflexSummaryAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex summary
func (m *HyperflexSummary) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HyperflexSummaryAO1P1
	if err := m.HyperflexSummaryAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexSummary) UnmarshalBinary(b []byte) error {
	var res HyperflexSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HyperflexSummaryAO1P1 hyperflex summary a o1 p1
//
// swagger:model HyperflexSummaryAO1P1
type HyperflexSummaryAO1P1 struct {

	// active nodes
	// Read Only: true
	ActiveNodes string `json:"ActiveNodes,omitempty"`

	// address
	// Read Only: true
	Address string `json:"Address,omitempty"`

	// boottime
	// Read Only: true
	Boottime int64 `json:"Boottime,omitempty"`

	// cluster access policy
	// Read Only: true
	ClusterAccessPolicy string `json:"ClusterAccessPolicy,omitempty"`

	// compression savings
	// Read Only: true
	CompressionSavings float64 `json:"CompressionSavings,omitempty"`

	// data replication compliance
	// Read Only: true
	DataReplicationCompliance string `json:"DataReplicationCompliance,omitempty"`

	// data replication factor
	// Read Only: true
	DataReplicationFactor string `json:"DataReplicationFactor,omitempty"`

	// deduplication savings
	// Read Only: true
	DeduplicationSavings float64 `json:"DeduplicationSavings,omitempty"`

	// downtime
	// Read Only: true
	Downtime string `json:"Downtime,omitempty"`

	// free capacity
	// Read Only: true
	FreeCapacity int64 `json:"FreeCapacity,omitempty"`

	// healing info
	// Read Only: true
	HealingInfo *HyperflexStPlatformClusterHealingInfo `json:"HealingInfo,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// resiliency details
	// Read Only: true
	ResiliencyDetails interface{} `json:"ResiliencyDetails,omitempty"`

	// resiliency details size
	// Read Only: true
	ResiliencyDetailsSize int64 `json:"ResiliencyDetailsSize,omitempty"`

	// resiliency info
	// Read Only: true
	ResiliencyInfo *HyperflexStPlatformClusterResiliencyInfo `json:"ResiliencyInfo,omitempty"`

	// space status
	// Read Only: true
	SpaceStatus string `json:"SpaceStatus,omitempty"`

	// state
	// Read Only: true
	State string `json:"State,omitempty"`

	// total capacity
	// Read Only: true
	TotalCapacity int64 `json:"TotalCapacity,omitempty"`

	// total savings
	// Read Only: true
	TotalSavings float64 `json:"TotalSavings,omitempty"`

	// uptime
	// Read Only: true
	Uptime string `json:"Uptime,omitempty"`

	// used capacity
	// Read Only: true
	UsedCapacity int64 `json:"UsedCapacity,omitempty"`

	// hyperflex summary a o1 p1
	HyperflexSummaryAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HyperflexSummaryAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// active nodes
		// Read Only: true
		ActiveNodes string `json:"ActiveNodes,omitempty"`

		// address
		// Read Only: true
		Address string `json:"Address,omitempty"`

		// boottime
		// Read Only: true
		Boottime int64 `json:"Boottime,omitempty"`

		// cluster access policy
		// Read Only: true
		ClusterAccessPolicy string `json:"ClusterAccessPolicy,omitempty"`

		// compression savings
		// Read Only: true
		CompressionSavings float64 `json:"CompressionSavings,omitempty"`

		// data replication compliance
		// Read Only: true
		DataReplicationCompliance string `json:"DataReplicationCompliance,omitempty"`

		// data replication factor
		// Read Only: true
		DataReplicationFactor string `json:"DataReplicationFactor,omitempty"`

		// deduplication savings
		// Read Only: true
		DeduplicationSavings float64 `json:"DeduplicationSavings,omitempty"`

		// downtime
		// Read Only: true
		Downtime string `json:"Downtime,omitempty"`

		// free capacity
		// Read Only: true
		FreeCapacity int64 `json:"FreeCapacity,omitempty"`

		// healing info
		// Read Only: true
		HealingInfo *HyperflexStPlatformClusterHealingInfo `json:"HealingInfo,omitempty"`

		// name
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// resiliency details
		// Read Only: true
		ResiliencyDetails interface{} `json:"ResiliencyDetails,omitempty"`

		// resiliency details size
		// Read Only: true
		ResiliencyDetailsSize int64 `json:"ResiliencyDetailsSize,omitempty"`

		// resiliency info
		// Read Only: true
		ResiliencyInfo *HyperflexStPlatformClusterResiliencyInfo `json:"ResiliencyInfo,omitempty"`

		// space status
		// Read Only: true
		SpaceStatus string `json:"SpaceStatus,omitempty"`

		// state
		// Read Only: true
		State string `json:"State,omitempty"`

		// total capacity
		// Read Only: true
		TotalCapacity int64 `json:"TotalCapacity,omitempty"`

		// total savings
		// Read Only: true
		TotalSavings float64 `json:"TotalSavings,omitempty"`

		// uptime
		// Read Only: true
		Uptime string `json:"Uptime,omitempty"`

		// used capacity
		// Read Only: true
		UsedCapacity int64 `json:"UsedCapacity,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HyperflexSummaryAO1P1

	rcv.ActiveNodes = stage1.ActiveNodes
	rcv.Address = stage1.Address
	rcv.Boottime = stage1.Boottime
	rcv.ClusterAccessPolicy = stage1.ClusterAccessPolicy
	rcv.CompressionSavings = stage1.CompressionSavings
	rcv.DataReplicationCompliance = stage1.DataReplicationCompliance
	rcv.DataReplicationFactor = stage1.DataReplicationFactor
	rcv.DeduplicationSavings = stage1.DeduplicationSavings
	rcv.Downtime = stage1.Downtime
	rcv.FreeCapacity = stage1.FreeCapacity
	rcv.HealingInfo = stage1.HealingInfo
	rcv.Name = stage1.Name
	rcv.ResiliencyDetails = stage1.ResiliencyDetails
	rcv.ResiliencyDetailsSize = stage1.ResiliencyDetailsSize
	rcv.ResiliencyInfo = stage1.ResiliencyInfo
	rcv.SpaceStatus = stage1.SpaceStatus
	rcv.State = stage1.State
	rcv.TotalCapacity = stage1.TotalCapacity
	rcv.TotalSavings = stage1.TotalSavings
	rcv.Uptime = stage1.Uptime
	rcv.UsedCapacity = stage1.UsedCapacity
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ActiveNodes")
	delete(stage2, "Address")
	delete(stage2, "Boottime")
	delete(stage2, "ClusterAccessPolicy")
	delete(stage2, "CompressionSavings")
	delete(stage2, "DataReplicationCompliance")
	delete(stage2, "DataReplicationFactor")
	delete(stage2, "DeduplicationSavings")
	delete(stage2, "Downtime")
	delete(stage2, "FreeCapacity")
	delete(stage2, "HealingInfo")
	delete(stage2, "Name")
	delete(stage2, "ResiliencyDetails")
	delete(stage2, "ResiliencyDetailsSize")
	delete(stage2, "ResiliencyInfo")
	delete(stage2, "SpaceStatus")
	delete(stage2, "State")
	delete(stage2, "TotalCapacity")
	delete(stage2, "TotalSavings")
	delete(stage2, "Uptime")
	delete(stage2, "UsedCapacity")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HyperflexSummaryAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HyperflexSummaryAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// active nodes
		// Read Only: true
		ActiveNodes string `json:"ActiveNodes,omitempty"`

		// address
		// Read Only: true
		Address string `json:"Address,omitempty"`

		// boottime
		// Read Only: true
		Boottime int64 `json:"Boottime,omitempty"`

		// cluster access policy
		// Read Only: true
		ClusterAccessPolicy string `json:"ClusterAccessPolicy,omitempty"`

		// compression savings
		// Read Only: true
		CompressionSavings float64 `json:"CompressionSavings,omitempty"`

		// data replication compliance
		// Read Only: true
		DataReplicationCompliance string `json:"DataReplicationCompliance,omitempty"`

		// data replication factor
		// Read Only: true
		DataReplicationFactor string `json:"DataReplicationFactor,omitempty"`

		// deduplication savings
		// Read Only: true
		DeduplicationSavings float64 `json:"DeduplicationSavings,omitempty"`

		// downtime
		// Read Only: true
		Downtime string `json:"Downtime,omitempty"`

		// free capacity
		// Read Only: true
		FreeCapacity int64 `json:"FreeCapacity,omitempty"`

		// healing info
		// Read Only: true
		HealingInfo *HyperflexStPlatformClusterHealingInfo `json:"HealingInfo,omitempty"`

		// name
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// resiliency details
		// Read Only: true
		ResiliencyDetails interface{} `json:"ResiliencyDetails,omitempty"`

		// resiliency details size
		// Read Only: true
		ResiliencyDetailsSize int64 `json:"ResiliencyDetailsSize,omitempty"`

		// resiliency info
		// Read Only: true
		ResiliencyInfo *HyperflexStPlatformClusterResiliencyInfo `json:"ResiliencyInfo,omitempty"`

		// space status
		// Read Only: true
		SpaceStatus string `json:"SpaceStatus,omitempty"`

		// state
		// Read Only: true
		State string `json:"State,omitempty"`

		// total capacity
		// Read Only: true
		TotalCapacity int64 `json:"TotalCapacity,omitempty"`

		// total savings
		// Read Only: true
		TotalSavings float64 `json:"TotalSavings,omitempty"`

		// uptime
		// Read Only: true
		Uptime string `json:"Uptime,omitempty"`

		// used capacity
		// Read Only: true
		UsedCapacity int64 `json:"UsedCapacity,omitempty"`
	}

	stage1.ActiveNodes = m.ActiveNodes
	stage1.Address = m.Address
	stage1.Boottime = m.Boottime
	stage1.ClusterAccessPolicy = m.ClusterAccessPolicy
	stage1.CompressionSavings = m.CompressionSavings
	stage1.DataReplicationCompliance = m.DataReplicationCompliance
	stage1.DataReplicationFactor = m.DataReplicationFactor
	stage1.DeduplicationSavings = m.DeduplicationSavings
	stage1.Downtime = m.Downtime
	stage1.FreeCapacity = m.FreeCapacity
	stage1.HealingInfo = m.HealingInfo
	stage1.Name = m.Name
	stage1.ResiliencyDetails = m.ResiliencyDetails
	stage1.ResiliencyDetailsSize = m.ResiliencyDetailsSize
	stage1.ResiliencyInfo = m.ResiliencyInfo
	stage1.SpaceStatus = m.SpaceStatus
	stage1.State = m.State
	stage1.TotalCapacity = m.TotalCapacity
	stage1.TotalSavings = m.TotalSavings
	stage1.Uptime = m.Uptime
	stage1.UsedCapacity = m.UsedCapacity

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HyperflexSummaryAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HyperflexSummaryAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hyperflex summary a o1 p1
func (m *HyperflexSummaryAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexSummaryAO1P1) validateHealingInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.HealingInfo) { // not required
		return nil
	}

	if m.HealingInfo != nil {
		if err := m.HealingInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HealingInfo")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexSummaryAO1P1) validateResiliencyInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ResiliencyInfo) { // not required
		return nil
	}

	if m.ResiliencyInfo != nil {
		if err := m.ResiliencyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResiliencyInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexSummaryAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexSummaryAO1P1) UnmarshalBinary(b []byte) error {
	var res HyperflexSummaryAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
