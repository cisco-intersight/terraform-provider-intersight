// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamIdpReference Iam:Idp Reference
//
// Default Cisco IdP for authentication.
//
// swagger:model iamIdpReference
type IamIdpReference struct {
	MoBaseMo

	// A collection of references to the [iam.Account](mo://iam.Account) Managed Object.
	// When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The email domain name for this IdP of the user. When a user enters an email during login in the Intersight home page, the IdP is picked by matching this domain name with the email domain name for authentication.
	// Read Only: true
	DomainName string `json:"DomainName,omitempty"`

	// Reference to System default Cisco IdP.
	// Read Only: true
	Idp *IamIdpRef `json:"Idp,omitempty"`

	// Entity ID of the IdP. In SAML, the entity ID uniquely identifies the IdP/Service Provider.
	// Read Only: true
	IdpEntityID string `json:"IdpEntityId,omitempty"`

	// The flag represents if the second factor of authentication is required for Cisco IdP users.
	MultiFactorAuthentication *bool `json:"MultiFactorAuthentication,omitempty"`

	// Cisco IdP reference in an account.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// The last login session details for each logged in user of this IdP.
	// Read Only: true
	UserLoginTime []*IamUserLoginTimeRef `json:"UserLoginTime"`

	// The UI preference object for each user logged in through this IdP.
	// Read Only: true
	UserPreferences []*IamUserPreferenceRef `json:"UserPreferences"`

	// User groups added in an IdP. User group provides a way to configure permission assignment for a group of users based on IdP attributes received after authentication.
	Usergroups []*IamUserGroupRef `json:"Usergroups"`

	// Added or logged in users of an IdP who can access an Intersight account.
	Users []*IamUserRef `json:"Users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamIdpReference) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		DomainName string `json:"DomainName,omitempty"`

		Idp *IamIdpRef `json:"Idp,omitempty"`

		IdpEntityID string `json:"IdpEntityId,omitempty"`

		MultiFactorAuthentication *bool `json:"MultiFactorAuthentication,omitempty"`

		Name string `json:"Name,omitempty"`

		UserLoginTime []*IamUserLoginTimeRef `json:"UserLoginTime"`

		UserPreferences []*IamUserPreferenceRef `json:"UserPreferences"`

		Usergroups []*IamUserGroupRef `json:"Usergroups"`

		Users []*IamUserRef `json:"Users"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.DomainName = dataAO1.DomainName

	m.Idp = dataAO1.Idp

	m.IdpEntityID = dataAO1.IdpEntityID

	m.MultiFactorAuthentication = dataAO1.MultiFactorAuthentication

	m.Name = dataAO1.Name

	m.UserLoginTime = dataAO1.UserLoginTime

	m.UserPreferences = dataAO1.UserPreferences

	m.Usergroups = dataAO1.Usergroups

	m.Users = dataAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamIdpReference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		DomainName string `json:"DomainName,omitempty"`

		Idp *IamIdpRef `json:"Idp,omitempty"`

		IdpEntityID string `json:"IdpEntityId,omitempty"`

		MultiFactorAuthentication *bool `json:"MultiFactorAuthentication,omitempty"`

		Name string `json:"Name,omitempty"`

		UserLoginTime []*IamUserLoginTimeRef `json:"UserLoginTime"`

		UserPreferences []*IamUserPreferenceRef `json:"UserPreferences"`

		Usergroups []*IamUserGroupRef `json:"Usergroups"`

		Users []*IamUserRef `json:"Users"`
	}

	dataAO1.Account = m.Account

	dataAO1.DomainName = m.DomainName

	dataAO1.Idp = m.Idp

	dataAO1.IdpEntityID = m.IdpEntityID

	dataAO1.MultiFactorAuthentication = m.MultiFactorAuthentication

	dataAO1.Name = m.Name

	dataAO1.UserLoginTime = m.UserLoginTime

	dataAO1.UserPreferences = m.UserPreferences

	dataAO1.Usergroups = m.Usergroups

	dataAO1.Users = m.Users

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam idp reference
func (m *IamIdpReference) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLoginTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsergroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamIdpReference) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *IamIdpReference) validateIdp(formats strfmt.Registry) error {

	if swag.IsZero(m.Idp) { // not required
		return nil
	}

	if m.Idp != nil {
		if err := m.Idp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Idp")
			}
			return err
		}
	}

	return nil
}

func (m *IamIdpReference) validateUserLoginTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UserLoginTime) { // not required
		return nil
	}

	for i := 0; i < len(m.UserLoginTime); i++ {
		if swag.IsZero(m.UserLoginTime[i]) { // not required
			continue
		}

		if m.UserLoginTime[i] != nil {
			if err := m.UserLoginTime[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserLoginTime" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamIdpReference) validateUserPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.UserPreferences) { // not required
		return nil
	}

	for i := 0; i < len(m.UserPreferences); i++ {
		if swag.IsZero(m.UserPreferences[i]) { // not required
			continue
		}

		if m.UserPreferences[i] != nil {
			if err := m.UserPreferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserPreferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamIdpReference) validateUsergroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Usergroups) { // not required
		return nil
	}

	for i := 0; i < len(m.Usergroups); i++ {
		if swag.IsZero(m.Usergroups[i]) { // not required
			continue
		}

		if m.Usergroups[i] != nil {
			if err := m.Usergroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Usergroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamIdpReference) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamIdpReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamIdpReference) UnmarshalBinary(b []byte) error {
	var res IamIdpReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
