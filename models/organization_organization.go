// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrganizationOrganization Organization
//
// Organization provides multi-tenancy within an account. Multiple organizations can be present under an account. Resources are associated to organization using resource groups. Organization can have heterogeneous resources. Resources can be shared among multiple organizations. Organizations are associated to user permissions and privileges can be specified to provide access control. User can have access to multiple organizations in same permission and with different privileges on each organization.
//
// swagger:model organizationOrganization
type OrganizationOrganization struct {
	MoBaseMo

	// The account under which the organization is present.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The informative description about the usage of this organization.
	Description string `json:"Description,omitempty"`

	// The name of the organization. There can be multiple organizations under an account.
	Name string `json:"Name,omitempty"`

	// The resource groups associated with these organization.
	ResourceGroups []*ResourceGroupRef `json:"ResourceGroups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OrganizationOrganization) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		ResourceGroups []*ResourceGroupRef `json:"ResourceGroups"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.ResourceGroups = dataAO1.ResourceGroups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OrganizationOrganization) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		ResourceGroups []*ResourceGroupRef `json:"ResourceGroups"`
	}

	dataAO1.Account = m.Account

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.ResourceGroups = m.ResourceGroups

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this organization organization
func (m *OrganizationOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationOrganization) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationOrganization) validateResourceGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceGroups); i++ {
		if swag.IsZero(m.ResourceGroups[i]) { // not required
			continue
		}

		if m.ResourceGroups[i] != nil {
			if err := m.ResourceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ResourceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationOrganization) UnmarshalBinary(b []byte) error {
	var res OrganizationOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
