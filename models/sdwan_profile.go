// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SdwanProfile Server Profile
//
// A profile that specifies configuration settings for a SDWAN router.
//
// swagger:model sdwanProfile
type SdwanProfile struct {
	PolicyAbstractConfigProfile

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// A collection of references to the [sdwan.RouterNode](mo://sdwan.RouterNode) Managed Object.
	// When this managed object is deleted, the referenced [sdwan.RouterNode](mo://sdwan.RouterNode) MOs unset their reference to this deleted MO.
	RouterNodes []*SdwanRouterNodeRef `json:"RouterNodes"`

	// A collection of references to the [sdwan.RouterPolicy](mo://sdwan.RouterPolicy) Managed Object.
	// When this managed object is deleted, the referenced [sdwan.RouterPolicy](mo://sdwan.RouterPolicy) MO unsets its reference to this deleted MO.
	RouterPolicy *SdwanRouterPolicyRef `json:"RouterPolicy,omitempty"`

	// A collection of references to the [sdwan.VmanageAccountPolicy](mo://sdwan.VmanageAccountPolicy) Managed Object.
	// When this managed object is deleted, the referenced [sdwan.VmanageAccountPolicy](mo://sdwan.VmanageAccountPolicy) MO unsets its reference to this deleted MO.
	VmanageAccount *SdwanVmanageAccountPolicyRef `json:"VmanageAccount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SdwanProfile) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyAbstractConfigProfile
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyAbstractConfigProfile = aO0

	// AO1
	var dataAO1 struct {
		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		RouterNodes []*SdwanRouterNodeRef `json:"RouterNodes"`

		RouterPolicy *SdwanRouterPolicyRef `json:"RouterPolicy,omitempty"`

		VmanageAccount *SdwanVmanageAccountPolicyRef `json:"VmanageAccount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Organization = dataAO1.Organization

	m.RouterNodes = dataAO1.RouterNodes

	m.RouterPolicy = dataAO1.RouterPolicy

	m.VmanageAccount = dataAO1.VmanageAccount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SdwanProfile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PolicyAbstractConfigProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		RouterNodes []*SdwanRouterNodeRef `json:"RouterNodes"`

		RouterPolicy *SdwanRouterPolicyRef `json:"RouterPolicy,omitempty"`

		VmanageAccount *SdwanVmanageAccountPolicyRef `json:"VmanageAccount,omitempty"`
	}

	dataAO1.Organization = m.Organization

	dataAO1.RouterNodes = m.RouterNodes

	dataAO1.RouterPolicy = m.RouterPolicy

	dataAO1.VmanageAccount = m.VmanageAccount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sdwan profile
func (m *SdwanProfile) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyAbstractConfigProfile
	if err := m.PolicyAbstractConfigProfile.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmanageAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdwanProfile) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanProfile) validateRouterNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.RouterNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.RouterNodes); i++ {
		if swag.IsZero(m.RouterNodes[i]) { // not required
			continue
		}

		if m.RouterNodes[i] != nil {
			if err := m.RouterNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RouterNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SdwanProfile) validateRouterPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RouterPolicy) { // not required
		return nil
	}

	if m.RouterPolicy != nil {
		if err := m.RouterPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouterPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanProfile) validateVmanageAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.VmanageAccount) { // not required
		return nil
	}

	if m.VmanageAccount != nil {
		if err := m.VmanageAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VmanageAccount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdwanProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdwanProfile) UnmarshalBinary(b []byte) error {
	var res SdwanProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
