// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForecastDefinition Forecast:Definition
//
// Definition for forecast metric settings.
//
// swagger:model forecastDefinition
type ForecastDefinition struct {
	MoBaseMo

	// Threshold above which user needs to be indicated through alarm/alert.
	// Read Only: true
	AlertThresholdInPercentage int64 `json:"AlertThresholdInPercentage,omitempty"`

	// A collection of references to the [forecast.Catalog](mo://forecast.Catalog) Managed Object.
	// When this managed object is deleted, the referenced [forecast.Catalog](mo://forecast.Catalog) MO unsets its reference to this deleted MO.
	// Read Only: true
	Catalog *ForecastCatalogRef `json:"Catalog,omitempty"`

	// Data source from where we get the data for the metrics to compute regression model. For example Druid.
	// Read Only: true
	DataSource string `json:"DataSource,omitempty"`

	// Metric for which forecast prediction is done. Metrics are defined in the catalog file. Currently its only HyperFlex cluster storage capacity usage.
	// Read Only: true
	MetricName string `json:"MetricName,omitempty"`

	// Minimum number of days of data required for computing forecast model.
	// Read Only: true
	MinNumOfDaysOfData int64 `json:"MinNumOfDaysOfData,omitempty"`

	// Number of days of data queried from the data source (example Druid ) which is used as input data for computing forecast model.
	// Read Only: true
	NumOfDaysOfHistoricalData int64 `json:"NumOfDaysOfHistoricalData,omitempty"`

	// The platform type for which we want to compute forecast. For example HyperFlex, NetworkElement.
	// Read Only: true
	PlatformType string `json:"PlatformType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ForecastDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AlertThresholdInPercentage int64 `json:"AlertThresholdInPercentage,omitempty"`

		Catalog *ForecastCatalogRef `json:"Catalog,omitempty"`

		DataSource string `json:"DataSource,omitempty"`

		MetricName string `json:"MetricName,omitempty"`

		MinNumOfDaysOfData int64 `json:"MinNumOfDaysOfData,omitempty"`

		NumOfDaysOfHistoricalData int64 `json:"NumOfDaysOfHistoricalData,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AlertThresholdInPercentage = dataAO1.AlertThresholdInPercentage

	m.Catalog = dataAO1.Catalog

	m.DataSource = dataAO1.DataSource

	m.MetricName = dataAO1.MetricName

	m.MinNumOfDaysOfData = dataAO1.MinNumOfDaysOfData

	m.NumOfDaysOfHistoricalData = dataAO1.NumOfDaysOfHistoricalData

	m.PlatformType = dataAO1.PlatformType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ForecastDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AlertThresholdInPercentage int64 `json:"AlertThresholdInPercentage,omitempty"`

		Catalog *ForecastCatalogRef `json:"Catalog,omitempty"`

		DataSource string `json:"DataSource,omitempty"`

		MetricName string `json:"MetricName,omitempty"`

		MinNumOfDaysOfData int64 `json:"MinNumOfDaysOfData,omitempty"`

		NumOfDaysOfHistoricalData int64 `json:"NumOfDaysOfHistoricalData,omitempty"`

		PlatformType string `json:"PlatformType,omitempty"`
	}

	dataAO1.AlertThresholdInPercentage = m.AlertThresholdInPercentage

	dataAO1.Catalog = m.Catalog

	dataAO1.DataSource = m.DataSource

	dataAO1.MetricName = m.MetricName

	dataAO1.MinNumOfDaysOfData = m.MinNumOfDaysOfData

	dataAO1.NumOfDaysOfHistoricalData = m.NumOfDaysOfHistoricalData

	dataAO1.PlatformType = m.PlatformType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this forecast definition
func (m *ForecastDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastDefinition) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Catalog")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastDefinition) UnmarshalBinary(b []byte) error {
	var res ForecastDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
