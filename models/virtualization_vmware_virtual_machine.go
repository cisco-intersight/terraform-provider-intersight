// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationVmwareVirtualMachine Virtualization:Vmware Virtual Machine
//
// The VMware Virtual machine. It has details such as power state, IP address, resource consumption, etc. Basic elements come from the base class and VMware specific details are provided here.
//
// swagger:model virtualizationVmwareVirtualMachine
type VirtualizationVmwareVirtualMachine struct {
	VirtualizationAbstractVirtualMachine

	// List of annotations provided to this VM by user; Can be long.
	Annotation string `json:"Annotation,omitempty"`

	// Time when this vm booted up.
	// Format: date-time
	BootTime strfmt.DateTime `json:"BootTime,omitempty"`

	// If the virtual machine is running on a cluster, it provides associated cluster information.
	// Read Only: true
	Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

	// The named config for this vm, might be the same as guestHostname.
	ConfigName string `json:"ConfigName,omitempty"`

	// Is virtual machine connected to vCenter. Values are connected, disconnected, orphaned, inaccessible, invalid.
	ConnectionState string `json:"ConnectionState,omitempty"`

	// Is the capability to add CPUs to a running VM enabled.
	CPUHotAddEnabled *bool `json:"CpuHotAddEnabled,omitempty"`

	// Basically, indicates the relative importance of a vm and its CPU limits.
	CPUShares *VirtualizationVMCPUShareInfo `json:"CpuShares,omitempty"`

	// Details of CPUs/sockets of this vm.
	CPUSocketInfo *VirtualizationVMCPUSocketInfo `json:"CpuSocketInfo,omitempty"`

	// User provided meta information associated with VMs. Can be long.
	CustomAttributes []string `json:"CustomAttributes"`

	// Every entity is grouped under the datacenter object and managed as a group.
	// Read Only: true
	Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

	// The list of datastores that are attached to this VM. Used for the new inventory model and will soon replace dataStoreList above.
	// Read Only: true
	Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

	// Indication of how the VM will be powered off (soft, hard, etc).
	DefaultPowerOffType string `json:"DefaultPowerOffType,omitempty"`

	// Is Dhcp used for IP/DNS on this vm.
	DhcpEnabled *bool `json:"DhcpEnabled,omitempty"`

	// Information about the virtual machine's disk commits, sharing and limits.
	DiskCommitInfo *VirtualizationVMDiskCommitInfo `json:"DiskCommitInfo,omitempty"`

	// List of DNS server IPs assigned to this VM.
	DNSServerList []string `json:"DnsServerList"`

	// List of dnssuffixes given to this VM.
	DNSSuffixList []string `json:"DnsSuffixList"`

	// The folder name associated with this VM.
	Folder string `json:"Folder,omitempty"`

	// State of the guest OS on this VM. Is it running, notRunning, etc.
	// Enum: [Unknown NotRunning Resetting Running ShuttingDown Standby]
	GuestState *string `json:"GuestState,omitempty"`

	// Host on which the Virtual Machine resides.
	// Read Only: true
	Host *VirtualizationVmwareHostRef `json:"Host,omitempty"`

	// UUID assigned by vCenter to every VM.
	InstanceUUID string `json:"InstanceUuid,omitempty"`

	// If true, indicates that the entity refers to a template of a virtual machine and not a real virtual machine.
	IsTemplate *bool `json:"IsTemplate,omitempty"`

	// Standard MAC address assigned to this VM.
	MacAddress []string `json:"MacAddress"`

	// Similar to cpuShares but applicable to memory.
	MemShares *VirtualizationVMMemoryShareInfo `json:"MemShares,omitempty"`

	// Adding memory to a running VM.
	MemoryHotAddEnabled *bool `json:"MemoryHotAddEnabled,omitempty"`

	// How many networks are used by this VM.
	NetworkCount int64 `json:"NetworkCount,omitempty"`

	// List of portgroup names allocated to this vm.
	PortGroups []string `json:"PortGroups"`

	// Is this a protected VM. VMs can be in protection groups.
	ProtectedVM *bool `json:"ProtectedVm,omitempty"`

	// Applies only when remoteDisplayvnc is enabled.
	RemoteDisplayInfo *VirtualizationRemoteDisplayInfo `json:"RemoteDisplayInfo,omitempty"`

	// Is support for a remote VNC access enabled.
	RemoteDisplayVncEnabled *bool `json:"RemoteDisplayVncEnabled,omitempty"`

	// Name of the resource pool to which this vm belongs (optional).
	ResourcePool string `json:"ResourcePool,omitempty"`

	// Who owns the resource pool.
	ResourcePoolOwner string `json:"ResourcePoolOwner,omitempty"`

	// The parent of the current resource pool to which this VM belongs.
	ResourcePoolParent string `json:"ResourcePoolParent,omitempty"`

	// Are guest tools running on this vm. Set to (guestToolNotRunning,  guestToolsRunning).
	ToolRunningStatus string `json:"ToolRunningStatus,omitempty"`

	// The version of the guest tools, usually not specified.
	ToolsVersion string `json:"ToolsVersion,omitempty"`

	// How many disks are assigned to this VM.
	VMDiskCount int64 `json:"VmDiskCount,omitempty"`

	// The operational state (there are many possible states, Available, Provisioned, Maintenance mode, Deleting, etc.) of this vm.
	VMOverallStatus string `json:"VmOverallStatus,omitempty"`

	// Example - [datastore3] VCSA-134/VCSA-134.vmx.
	VMPath string `json:"VmPath,omitempty"`

	// Information about the version of this VM (vmx-09, vmx-11 etc.).
	VMVersion string `json:"VmVersion,omitempty"`

	// How many vnics are present.
	VMVnicCount int64 `json:"VmVnicCount,omitempty"`

	// Information related to the guest info's vnic virtual device (this is a comma separated list).
	VnicDeviceConfigID string `json:"VnicDeviceConfigId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationVmwareVirtualMachine) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationAbstractVirtualMachine
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationAbstractVirtualMachine = aO0

	// AO1
	var dataAO1 struct {
		Annotation string `json:"Annotation,omitempty"`

		BootTime strfmt.DateTime `json:"BootTime,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		ConfigName string `json:"ConfigName,omitempty"`

		ConnectionState string `json:"ConnectionState,omitempty"`

		CPUHotAddEnabled *bool `json:"CpuHotAddEnabled,omitempty"`

		CPUShares *VirtualizationVMCPUShareInfo `json:"CpuShares,omitempty"`

		CPUSocketInfo *VirtualizationVMCPUSocketInfo `json:"CpuSocketInfo,omitempty"`

		CustomAttributes []string `json:"CustomAttributes"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

		DefaultPowerOffType string `json:"DefaultPowerOffType,omitempty"`

		DhcpEnabled *bool `json:"DhcpEnabled,omitempty"`

		DiskCommitInfo *VirtualizationVMDiskCommitInfo `json:"DiskCommitInfo,omitempty"`

		DNSServerList []string `json:"DnsServerList"`

		DNSSuffixList []string `json:"DnsSuffixList"`

		Folder string `json:"Folder,omitempty"`

		GuestState *string `json:"GuestState,omitempty"`

		Host *VirtualizationVmwareHostRef `json:"Host,omitempty"`

		InstanceUUID string `json:"InstanceUuid,omitempty"`

		IsTemplate *bool `json:"IsTemplate,omitempty"`

		MacAddress []string `json:"MacAddress"`

		MemShares *VirtualizationVMMemoryShareInfo `json:"MemShares,omitempty"`

		MemoryHotAddEnabled *bool `json:"MemoryHotAddEnabled,omitempty"`

		NetworkCount int64 `json:"NetworkCount,omitempty"`

		PortGroups []string `json:"PortGroups"`

		ProtectedVM *bool `json:"ProtectedVm,omitempty"`

		RemoteDisplayInfo *VirtualizationRemoteDisplayInfo `json:"RemoteDisplayInfo,omitempty"`

		RemoteDisplayVncEnabled *bool `json:"RemoteDisplayVncEnabled,omitempty"`

		ResourcePool string `json:"ResourcePool,omitempty"`

		ResourcePoolOwner string `json:"ResourcePoolOwner,omitempty"`

		ResourcePoolParent string `json:"ResourcePoolParent,omitempty"`

		ToolRunningStatus string `json:"ToolRunningStatus,omitempty"`

		ToolsVersion string `json:"ToolsVersion,omitempty"`

		VMDiskCount int64 `json:"VmDiskCount,omitempty"`

		VMOverallStatus string `json:"VmOverallStatus,omitempty"`

		VMPath string `json:"VmPath,omitempty"`

		VMVersion string `json:"VmVersion,omitempty"`

		VMVnicCount int64 `json:"VmVnicCount,omitempty"`

		VnicDeviceConfigID string `json:"VnicDeviceConfigId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Annotation = dataAO1.Annotation

	m.BootTime = dataAO1.BootTime

	m.Cluster = dataAO1.Cluster

	m.ConfigName = dataAO1.ConfigName

	m.ConnectionState = dataAO1.ConnectionState

	m.CPUHotAddEnabled = dataAO1.CPUHotAddEnabled

	m.CPUShares = dataAO1.CPUShares

	m.CPUSocketInfo = dataAO1.CPUSocketInfo

	m.CustomAttributes = dataAO1.CustomAttributes

	m.Datacenter = dataAO1.Datacenter

	m.Datastores = dataAO1.Datastores

	m.DefaultPowerOffType = dataAO1.DefaultPowerOffType

	m.DhcpEnabled = dataAO1.DhcpEnabled

	m.DiskCommitInfo = dataAO1.DiskCommitInfo

	m.DNSServerList = dataAO1.DNSServerList

	m.DNSSuffixList = dataAO1.DNSSuffixList

	m.Folder = dataAO1.Folder

	m.GuestState = dataAO1.GuestState

	m.Host = dataAO1.Host

	m.InstanceUUID = dataAO1.InstanceUUID

	m.IsTemplate = dataAO1.IsTemplate

	m.MacAddress = dataAO1.MacAddress

	m.MemShares = dataAO1.MemShares

	m.MemoryHotAddEnabled = dataAO1.MemoryHotAddEnabled

	m.NetworkCount = dataAO1.NetworkCount

	m.PortGroups = dataAO1.PortGroups

	m.ProtectedVM = dataAO1.ProtectedVM

	m.RemoteDisplayInfo = dataAO1.RemoteDisplayInfo

	m.RemoteDisplayVncEnabled = dataAO1.RemoteDisplayVncEnabled

	m.ResourcePool = dataAO1.ResourcePool

	m.ResourcePoolOwner = dataAO1.ResourcePoolOwner

	m.ResourcePoolParent = dataAO1.ResourcePoolParent

	m.ToolRunningStatus = dataAO1.ToolRunningStatus

	m.ToolsVersion = dataAO1.ToolsVersion

	m.VMDiskCount = dataAO1.VMDiskCount

	m.VMOverallStatus = dataAO1.VMOverallStatus

	m.VMPath = dataAO1.VMPath

	m.VMVersion = dataAO1.VMVersion

	m.VMVnicCount = dataAO1.VMVnicCount

	m.VnicDeviceConfigID = dataAO1.VnicDeviceConfigID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationVmwareVirtualMachine) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationAbstractVirtualMachine)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Annotation string `json:"Annotation,omitempty"`

		BootTime strfmt.DateTime `json:"BootTime,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		ConfigName string `json:"ConfigName,omitempty"`

		ConnectionState string `json:"ConnectionState,omitempty"`

		CPUHotAddEnabled *bool `json:"CpuHotAddEnabled,omitempty"`

		CPUShares *VirtualizationVMCPUShareInfo `json:"CpuShares,omitempty"`

		CPUSocketInfo *VirtualizationVMCPUSocketInfo `json:"CpuSocketInfo,omitempty"`

		CustomAttributes []string `json:"CustomAttributes"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

		DefaultPowerOffType string `json:"DefaultPowerOffType,omitempty"`

		DhcpEnabled *bool `json:"DhcpEnabled,omitempty"`

		DiskCommitInfo *VirtualizationVMDiskCommitInfo `json:"DiskCommitInfo,omitempty"`

		DNSServerList []string `json:"DnsServerList"`

		DNSSuffixList []string `json:"DnsSuffixList"`

		Folder string `json:"Folder,omitempty"`

		GuestState *string `json:"GuestState,omitempty"`

		Host *VirtualizationVmwareHostRef `json:"Host,omitempty"`

		InstanceUUID string `json:"InstanceUuid,omitempty"`

		IsTemplate *bool `json:"IsTemplate,omitempty"`

		MacAddress []string `json:"MacAddress"`

		MemShares *VirtualizationVMMemoryShareInfo `json:"MemShares,omitempty"`

		MemoryHotAddEnabled *bool `json:"MemoryHotAddEnabled,omitempty"`

		NetworkCount int64 `json:"NetworkCount,omitempty"`

		PortGroups []string `json:"PortGroups"`

		ProtectedVM *bool `json:"ProtectedVm,omitempty"`

		RemoteDisplayInfo *VirtualizationRemoteDisplayInfo `json:"RemoteDisplayInfo,omitempty"`

		RemoteDisplayVncEnabled *bool `json:"RemoteDisplayVncEnabled,omitempty"`

		ResourcePool string `json:"ResourcePool,omitempty"`

		ResourcePoolOwner string `json:"ResourcePoolOwner,omitempty"`

		ResourcePoolParent string `json:"ResourcePoolParent,omitempty"`

		ToolRunningStatus string `json:"ToolRunningStatus,omitempty"`

		ToolsVersion string `json:"ToolsVersion,omitempty"`

		VMDiskCount int64 `json:"VmDiskCount,omitempty"`

		VMOverallStatus string `json:"VmOverallStatus,omitempty"`

		VMPath string `json:"VmPath,omitempty"`

		VMVersion string `json:"VmVersion,omitempty"`

		VMVnicCount int64 `json:"VmVnicCount,omitempty"`

		VnicDeviceConfigID string `json:"VnicDeviceConfigId,omitempty"`
	}

	dataAO1.Annotation = m.Annotation

	dataAO1.BootTime = m.BootTime

	dataAO1.Cluster = m.Cluster

	dataAO1.ConfigName = m.ConfigName

	dataAO1.ConnectionState = m.ConnectionState

	dataAO1.CPUHotAddEnabled = m.CPUHotAddEnabled

	dataAO1.CPUShares = m.CPUShares

	dataAO1.CPUSocketInfo = m.CPUSocketInfo

	dataAO1.CustomAttributes = m.CustomAttributes

	dataAO1.Datacenter = m.Datacenter

	dataAO1.Datastores = m.Datastores

	dataAO1.DefaultPowerOffType = m.DefaultPowerOffType

	dataAO1.DhcpEnabled = m.DhcpEnabled

	dataAO1.DiskCommitInfo = m.DiskCommitInfo

	dataAO1.DNSServerList = m.DNSServerList

	dataAO1.DNSSuffixList = m.DNSSuffixList

	dataAO1.Folder = m.Folder

	dataAO1.GuestState = m.GuestState

	dataAO1.Host = m.Host

	dataAO1.InstanceUUID = m.InstanceUUID

	dataAO1.IsTemplate = m.IsTemplate

	dataAO1.MacAddress = m.MacAddress

	dataAO1.MemShares = m.MemShares

	dataAO1.MemoryHotAddEnabled = m.MemoryHotAddEnabled

	dataAO1.NetworkCount = m.NetworkCount

	dataAO1.PortGroups = m.PortGroups

	dataAO1.ProtectedVM = m.ProtectedVM

	dataAO1.RemoteDisplayInfo = m.RemoteDisplayInfo

	dataAO1.RemoteDisplayVncEnabled = m.RemoteDisplayVncEnabled

	dataAO1.ResourcePool = m.ResourcePool

	dataAO1.ResourcePoolOwner = m.ResourcePoolOwner

	dataAO1.ResourcePoolParent = m.ResourcePoolParent

	dataAO1.ToolRunningStatus = m.ToolRunningStatus

	dataAO1.ToolsVersion = m.ToolsVersion

	dataAO1.VMDiskCount = m.VMDiskCount

	dataAO1.VMOverallStatus = m.VMOverallStatus

	dataAO1.VMPath = m.VMPath

	dataAO1.VMVersion = m.VMVersion

	dataAO1.VMVnicCount = m.VMVnicCount

	dataAO1.VnicDeviceConfigID = m.VnicDeviceConfigID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization vmware virtual machine
func (m *VirtualizationVmwareVirtualMachine) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationAbstractVirtualMachine
	if err := m.VirtualizationAbstractVirtualMachine.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUSocketInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskCommitInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteDisplayInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateBootTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BootTime) { // not required
		return nil
	}

	if err := validate.FormatOf("BootTime", "body", "date-time", m.BootTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateCPUShares(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUShares) { // not required
		return nil
	}

	if m.CPUShares != nil {
		if err := m.CPUShares.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CpuShares")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateCPUSocketInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUSocketInfo) { // not required
		return nil
	}

	if m.CPUSocketInfo != nil {
		if err := m.CPUSocketInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CpuSocketInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateDatacenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if m.Datacenter != nil {
		if err := m.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateDatastores(formats strfmt.Registry) error {

	if swag.IsZero(m.Datastores) { // not required
		return nil
	}

	for i := 0; i < len(m.Datastores); i++ {
		if swag.IsZero(m.Datastores[i]) { // not required
			continue
		}

		if m.Datastores[i] != nil {
			if err := m.Datastores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Datastores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateDiskCommitInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskCommitInfo) { // not required
		return nil
	}

	if m.DiskCommitInfo != nil {
		if err := m.DiskCommitInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DiskCommitInfo")
			}
			return err
		}
	}

	return nil
}

var virtualizationVmwareVirtualMachineTypeGuestStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","NotRunning","Resetting","Running","ShuttingDown","Standby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationVmwareVirtualMachineTypeGuestStatePropEnum = append(virtualizationVmwareVirtualMachineTypeGuestStatePropEnum, v)
	}
}

// property enum
func (m *VirtualizationVmwareVirtualMachine) validateGuestStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationVmwareVirtualMachineTypeGuestStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateGuestState(formats strfmt.Registry) error {

	if swag.IsZero(m.GuestState) { // not required
		return nil
	}

	// value enum
	if err := m.validateGuestStateEnum("GuestState", "body", *m.GuestState); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Host")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateMemShares(formats strfmt.Registry) error {

	if swag.IsZero(m.MemShares) { // not required
		return nil
	}

	if m.MemShares != nil {
		if err := m.MemShares.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MemShares")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareVirtualMachine) validateRemoteDisplayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteDisplayInfo) { // not required
		return nil
	}

	if m.RemoteDisplayInfo != nil {
		if err := m.RemoteDisplayInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RemoteDisplayInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationVmwareVirtualMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationVmwareVirtualMachine) UnmarshalBinary(b []byte) error {
	var res VirtualizationVmwareVirtualMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
