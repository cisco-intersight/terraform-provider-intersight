// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SdwanRouterNode Router Node
//
// Configuration settings for a SDWAN vEdge router.
//
// swagger:model sdwanRouterNode
type SdwanRouterNode struct {
	MoBaseMo

	// Name of the Cisco vManage device template that the current device should be attached to. A device template consists of many feature templates that contain SD-WAN vEdge router configuration.
	DeviceTemplate string `json:"DeviceTemplate,omitempty"`

	// Name of the router node object.
	Name string `json:"Name,omitempty"`

	// The configuration required on the hypervisor for setting up SD-WAN networking.
	NetworkConfiguration []*SdwanNetworkConfigurationType `json:"NetworkConfiguration"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Relationship to the SD-WAN profile object.
	Profile *SdwanProfileRef `json:"Profile,omitempty"`

	// Relationship to the server node on which vEdge router is to be provisioned.
	ServerNode *AssetDeviceRegistrationRef `json:"ServerNode,omitempty"`

	// Dynamic inputs that are expected based on the template inputs specified in the feature templates attached to the device template.
	TemplateInputs []*SdwanTemplateInputsType `json:"TemplateInputs"`

	// Uniquely identifies the router by its chassis number.
	UUID string `json:"Uuid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SdwanRouterNode) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DeviceTemplate string `json:"DeviceTemplate,omitempty"`

		Name string `json:"Name,omitempty"`

		NetworkConfiguration []*SdwanNetworkConfigurationType `json:"NetworkConfiguration"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profile *SdwanProfileRef `json:"Profile,omitempty"`

		ServerNode *AssetDeviceRegistrationRef `json:"ServerNode,omitempty"`

		TemplateInputs []*SdwanTemplateInputsType `json:"TemplateInputs"`

		UUID string `json:"Uuid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DeviceTemplate = dataAO1.DeviceTemplate

	m.Name = dataAO1.Name

	m.NetworkConfiguration = dataAO1.NetworkConfiguration

	m.Organization = dataAO1.Organization

	m.Profile = dataAO1.Profile

	m.ServerNode = dataAO1.ServerNode

	m.TemplateInputs = dataAO1.TemplateInputs

	m.UUID = dataAO1.UUID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SdwanRouterNode) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DeviceTemplate string `json:"DeviceTemplate,omitempty"`

		Name string `json:"Name,omitempty"`

		NetworkConfiguration []*SdwanNetworkConfigurationType `json:"NetworkConfiguration"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Profile *SdwanProfileRef `json:"Profile,omitempty"`

		ServerNode *AssetDeviceRegistrationRef `json:"ServerNode,omitempty"`

		TemplateInputs []*SdwanTemplateInputsType `json:"TemplateInputs"`

		UUID string `json:"Uuid,omitempty"`
	}

	dataAO1.DeviceTemplate = m.DeviceTemplate

	dataAO1.Name = m.Name

	dataAO1.NetworkConfiguration = m.NetworkConfiguration

	dataAO1.Organization = m.Organization

	dataAO1.Profile = m.Profile

	dataAO1.ServerNode = m.ServerNode

	dataAO1.TemplateInputs = m.TemplateInputs

	dataAO1.UUID = m.UUID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sdwan router node
func (m *SdwanRouterNode) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateInputs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdwanRouterNode) validateNetworkConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkConfiguration) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkConfiguration); i++ {
		if swag.IsZero(m.NetworkConfiguration[i]) { // not required
			continue
		}

		if m.NetworkConfiguration[i] != nil {
			if err := m.NetworkConfiguration[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NetworkConfiguration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SdwanRouterNode) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanRouterNode) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Profile")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanRouterNode) validateServerNode(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerNode) { // not required
		return nil
	}

	if m.ServerNode != nil {
		if err := m.ServerNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServerNode")
			}
			return err
		}
	}

	return nil
}

func (m *SdwanRouterNode) validateTemplateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.TemplateInputs) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplateInputs); i++ {
		if swag.IsZero(m.TemplateInputs[i]) { // not required
			continue
		}

		if m.TemplateInputs[i] != nil {
			if err := m.TemplateInputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TemplateInputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdwanRouterNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdwanRouterNode) UnmarshalBinary(b []byte) error {
	var res SdwanRouterNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
