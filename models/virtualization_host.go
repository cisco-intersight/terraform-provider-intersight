// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationHost Virtualization:Host
//
// Common attributes of any host associated to a hypervisor manager. Serves as a base class for all concrete host types A Host belongs to a datacenter and optionally to a cluster, and runs virtual machines on it. A host is basically a hardware platform that runs the VMs. Depending on the capacity of the host, it can support 100s of virtual machines.
//
// swagger:model virtualizationHost
type VirtualizationHost struct {
	VirtualizationSourceDevice

	// Details about the CPUs installed on this host are represented here.
	CPUInfo *VirtualizationCPUInfo `json:"CpuInfo,omitempty"`

	// The hardware details of this host. It includes capacity, manufacturer, and model information.
	HardwareInfo *InfraHardwareInfo `json:"HardwareInfo,omitempty"`

	// Identifies the broad type of the underlying hypervisor.
	// Enum: [Unknown ESXi]
	HypervisorType *string `json:"HypervisorType,omitempty"`

	// The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).
	Identity string `json:"Identity,omitempty"`

	// Is this host in maintenance mode. Set to true or false.
	MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

	// The memory capacity and usage information on this host.
	MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

	// Commercial model information about this hardware.
	Model string `json:"Model,omitempty"`

	// Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.
	Name string `json:"Name,omitempty"`

	// The capacity and usage information for CPU power on this host.
	ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

	// Details of this product, such as vendor, model, etc. are represented here.
	ProductInfo *VirtualizationProductInfo `json:"ProductInfo,omitempty"`

	// Serial number of this host (internally generated).
	Serial string `json:"Serial,omitempty"`

	// Host health status, as reported by the hypervisor platform.
	// Enum: [Unknown Degraded Critical Ok]
	Status *string `json:"Status,omitempty"`

	// The uptime of the host, stored as Duration (from w3c).
	UpTime string `json:"UpTime,omitempty"`

	// Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.
	UUID string `json:"Uuid,omitempty"`

	// Commercial vendor details of this hardware.
	Vendor string `json:"Vendor,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationSourceDevice
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationSourceDevice = aO0

	// AO1
	var dataAO1 struct {
		CPUInfo *VirtualizationCPUInfo `json:"CpuInfo,omitempty"`

		HardwareInfo *InfraHardwareInfo `json:"HardwareInfo,omitempty"`

		HypervisorType *string `json:"HypervisorType,omitempty"`

		Identity string `json:"Identity,omitempty"`

		MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

		MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

		Model string `json:"Model,omitempty"`

		Name string `json:"Name,omitempty"`

		ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

		ProductInfo *VirtualizationProductInfo `json:"ProductInfo,omitempty"`

		Serial string `json:"Serial,omitempty"`

		Status *string `json:"Status,omitempty"`

		UpTime string `json:"UpTime,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		Vendor string `json:"Vendor,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CPUInfo = dataAO1.CPUInfo

	m.HardwareInfo = dataAO1.HardwareInfo

	m.HypervisorType = dataAO1.HypervisorType

	m.Identity = dataAO1.Identity

	m.MaintenanceMode = dataAO1.MaintenanceMode

	m.MemoryCapacity = dataAO1.MemoryCapacity

	m.Model = dataAO1.Model

	m.Name = dataAO1.Name

	m.ProcessorCapacity = dataAO1.ProcessorCapacity

	m.ProductInfo = dataAO1.ProductInfo

	m.Serial = dataAO1.Serial

	m.Status = dataAO1.Status

	m.UpTime = dataAO1.UpTime

	m.UUID = dataAO1.UUID

	m.Vendor = dataAO1.Vendor

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationSourceDevice)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CPUInfo *VirtualizationCPUInfo `json:"CpuInfo,omitempty"`

		HardwareInfo *InfraHardwareInfo `json:"HardwareInfo,omitempty"`

		HypervisorType *string `json:"HypervisorType,omitempty"`

		Identity string `json:"Identity,omitempty"`

		MaintenanceMode *bool `json:"MaintenanceMode,omitempty"`

		MemoryCapacity *VirtualizationMemoryCapacity `json:"MemoryCapacity,omitempty"`

		Model string `json:"Model,omitempty"`

		Name string `json:"Name,omitempty"`

		ProcessorCapacity *VirtualizationComputeCapacity `json:"ProcessorCapacity,omitempty"`

		ProductInfo *VirtualizationProductInfo `json:"ProductInfo,omitempty"`

		Serial string `json:"Serial,omitempty"`

		Status *string `json:"Status,omitempty"`

		UpTime string `json:"UpTime,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		Vendor string `json:"Vendor,omitempty"`
	}

	dataAO1.CPUInfo = m.CPUInfo

	dataAO1.HardwareInfo = m.HardwareInfo

	dataAO1.HypervisorType = m.HypervisorType

	dataAO1.Identity = m.Identity

	dataAO1.MaintenanceMode = m.MaintenanceMode

	dataAO1.MemoryCapacity = m.MemoryCapacity

	dataAO1.Model = m.Model

	dataAO1.Name = m.Name

	dataAO1.ProcessorCapacity = m.ProcessorCapacity

	dataAO1.ProductInfo = m.ProductInfo

	dataAO1.Serial = m.Serial

	dataAO1.Status = m.Status

	dataAO1.UpTime = m.UpTime

	dataAO1.UUID = m.UUID

	dataAO1.Vendor = m.Vendor

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization host
func (m *VirtualizationHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationSourceDevice
	if err := m.VirtualizationSourceDevice.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationHost) validateCPUInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUInfo) { // not required
		return nil
	}

	if m.CPUInfo != nil {
		if err := m.CPUInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CpuInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationHost) validateHardwareInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwareInfo) { // not required
		return nil
	}

	if m.HardwareInfo != nil {
		if err := m.HardwareInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HardwareInfo")
			}
			return err
		}
	}

	return nil
}

var virtualizationHostTypeHypervisorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","ESXi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationHostTypeHypervisorTypePropEnum = append(virtualizationHostTypeHypervisorTypePropEnum, v)
	}
}

// property enum
func (m *VirtualizationHost) validateHypervisorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationHostTypeHypervisorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationHost) validateHypervisorType(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervisorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHypervisorTypeEnum("HypervisorType", "body", *m.HypervisorType); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationHost) validateMemoryCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryCapacity) { // not required
		return nil
	}

	if m.MemoryCapacity != nil {
		if err := m.MemoryCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MemoryCapacity")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationHost) validateProcessorCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorCapacity) { // not required
		return nil
	}

	if m.ProcessorCapacity != nil {
		if err := m.ProcessorCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessorCapacity")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationHost) validateProductInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductInfo) { // not required
		return nil
	}

	if m.ProductInfo != nil {
		if err := m.ProductInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductInfo")
			}
			return err
		}
	}

	return nil
}

var virtualizationHostTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Degraded","Critical","Ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationHostTypeStatusPropEnum = append(virtualizationHostTypeStatusPropEnum, v)
	}
}

// property enum
func (m *VirtualizationHost) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationHostTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationHost) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationHost) UnmarshalBinary(b []byte) error {
	var res VirtualizationHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
