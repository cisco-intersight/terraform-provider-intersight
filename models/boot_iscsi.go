// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BootIscsi iSCSI Boot
//
// Device type used when booting from iSCSI boot device.
//
// swagger:model bootIscsi
type BootIscsi struct {
	BootDeviceBase

	// Port ID of the ISCSI boot device.
	Port int64 `json:"Port,omitempty"`

	// The slot id of the device. Supported values are (1 - 255, "MLOM", "L", "L1", "L2", "OCP").
	Slot string `json:"Slot,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BootIscsi) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BootDeviceBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BootDeviceBase = aO0

	// AO1
	var dataAO1 struct {
		Port int64 `json:"Port,omitempty"`

		Slot string `json:"Slot,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Port = dataAO1.Port

	m.Slot = dataAO1.Slot

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BootIscsi) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BootDeviceBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Port int64 `json:"Port,omitempty"`

		Slot string `json:"Slot,omitempty"`
	}

	dataAO1.Port = m.Port

	dataAO1.Slot = m.Slot

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this boot iscsi
func (m *BootIscsi) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BootDeviceBase
	if err := m.BootDeviceBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *BootIscsi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootIscsi) UnmarshalBinary(b []byte) error {
	var res BootIscsi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
