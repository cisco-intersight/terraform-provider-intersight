// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageFlexFlashControllerProps Storage:Flex Flash Controller Props
//
// Flex flash controller properties.
//
// swagger:model storageFlexFlashControllerProps
type StorageFlexFlashControllerProps struct {
	EquipmentBase

	// cards manageable
	CardsManageable string `json:"CardsManageable,omitempty"`

	// configured mode
	ConfiguredMode string `json:"ConfiguredMode,omitempty"`

	// controller name
	ControllerName string `json:"ControllerName,omitempty"`

	// controller status
	ControllerStatus string `json:"ControllerStatus,omitempty"`

	// fw version
	FwVersion string `json:"FwVersion,omitempty"`

	// internal state
	InternalState string `json:"InternalState,omitempty"`

	// operating mode
	OperatingMode string `json:"OperatingMode,omitempty"`

	// physical drive count
	PhysicalDriveCount string `json:"PhysicalDriveCount,omitempty"`

	// product name
	ProductName string `json:"ProductName,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// startup fw version
	StartupFwVersion string `json:"StartupFwVersion,omitempty"`

	// A collection of references to the [storage.FlexFlashController](mo://storage.FlexFlashController) Managed Object.
	// When this managed object is deleted, the referenced [storage.FlexFlashController](mo://storage.FlexFlashController) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageFlexFlashController *StorageFlexFlashControllerRef `json:"StorageFlexFlashController,omitempty"`

	// virtual drive count
	VirtualDriveCount string `json:"VirtualDriveCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageFlexFlashControllerProps) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		CardsManageable string `json:"CardsManageable,omitempty"`

		ConfiguredMode string `json:"ConfiguredMode,omitempty"`

		ControllerName string `json:"ControllerName,omitempty"`

		ControllerStatus string `json:"ControllerStatus,omitempty"`

		FwVersion string `json:"FwVersion,omitempty"`

		InternalState string `json:"InternalState,omitempty"`

		OperatingMode string `json:"OperatingMode,omitempty"`

		PhysicalDriveCount string `json:"PhysicalDriveCount,omitempty"`

		ProductName string `json:"ProductName,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StartupFwVersion string `json:"StartupFwVersion,omitempty"`

		StorageFlexFlashController *StorageFlexFlashControllerRef `json:"StorageFlexFlashController,omitempty"`

		VirtualDriveCount string `json:"VirtualDriveCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CardsManageable = dataAO1.CardsManageable

	m.ConfiguredMode = dataAO1.ConfiguredMode

	m.ControllerName = dataAO1.ControllerName

	m.ControllerStatus = dataAO1.ControllerStatus

	m.FwVersion = dataAO1.FwVersion

	m.InternalState = dataAO1.InternalState

	m.OperatingMode = dataAO1.OperatingMode

	m.PhysicalDriveCount = dataAO1.PhysicalDriveCount

	m.ProductName = dataAO1.ProductName

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StartupFwVersion = dataAO1.StartupFwVersion

	m.StorageFlexFlashController = dataAO1.StorageFlexFlashController

	m.VirtualDriveCount = dataAO1.VirtualDriveCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageFlexFlashControllerProps) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CardsManageable string `json:"CardsManageable,omitempty"`

		ConfiguredMode string `json:"ConfiguredMode,omitempty"`

		ControllerName string `json:"ControllerName,omitempty"`

		ControllerStatus string `json:"ControllerStatus,omitempty"`

		FwVersion string `json:"FwVersion,omitempty"`

		InternalState string `json:"InternalState,omitempty"`

		OperatingMode string `json:"OperatingMode,omitempty"`

		PhysicalDriveCount string `json:"PhysicalDriveCount,omitempty"`

		ProductName string `json:"ProductName,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StartupFwVersion string `json:"StartupFwVersion,omitempty"`

		StorageFlexFlashController *StorageFlexFlashControllerRef `json:"StorageFlexFlashController,omitempty"`

		VirtualDriveCount string `json:"VirtualDriveCount,omitempty"`
	}

	dataAO1.CardsManageable = m.CardsManageable

	dataAO1.ConfiguredMode = m.ConfiguredMode

	dataAO1.ControllerName = m.ControllerName

	dataAO1.ControllerStatus = m.ControllerStatus

	dataAO1.FwVersion = m.FwVersion

	dataAO1.InternalState = m.InternalState

	dataAO1.OperatingMode = m.OperatingMode

	dataAO1.PhysicalDriveCount = m.PhysicalDriveCount

	dataAO1.ProductName = m.ProductName

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StartupFwVersion = m.StartupFwVersion

	dataAO1.StorageFlexFlashController = m.StorageFlexFlashController

	dataAO1.VirtualDriveCount = m.VirtualDriveCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage flex flash controller props
func (m *StorageFlexFlashControllerProps) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFlexFlashController(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageFlexFlashControllerProps) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageFlexFlashControllerProps) validateStorageFlexFlashController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageFlexFlashController) { // not required
		return nil
	}

	if m.StorageFlexFlashController != nil {
		if err := m.StorageFlexFlashController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageFlexFlashController")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageFlexFlashControllerProps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageFlexFlashControllerProps) UnmarshalBinary(b []byte) error {
	var res StorageFlexFlashControllerProps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
