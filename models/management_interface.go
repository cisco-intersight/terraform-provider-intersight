// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ManagementInterface Management:Interface
//
// Interface that provides access to the management controller.
//
// swagger:model managementInterface
type ManagementInterface struct {
	InventoryBase

	// Default gateway for the interface.
	// Read Only: true
	Gateway string `json:"Gateway,omitempty"`

	// Hostname configured for the interface.
	HostName string `json:"HostName,omitempty"`

	// IP address of the interface.
	// Read Only: true
	IPAddress string `json:"IpAddress,omitempty"`

	// IPv4 address of the interface.
	// Read Only: true
	IPV4Address string `json:"Ipv4Address,omitempty"`

	// IPv4 default gateway for the interface.
	// Read Only: true
	IPV4Gateway string `json:"Ipv4Gateway,omitempty"`

	// IPv4 Netmask for the interface.
	// Read Only: true
	IPV4Mask string `json:"Ipv4Mask,omitempty"`

	// IPv6 address of the interface.
	IPV6Address string `json:"Ipv6Address,omitempty"`

	// IPv6 default gateway for the interface.
	IPV6Gateway string `json:"Ipv6Gateway,omitempty"`

	// IPv6 prefix for the interface.
	IPV6Prefix int64 `json:"Ipv6Prefix,omitempty"`

	// MAC address configured for the interface.
	// Read Only: true
	MacAddress string `json:"MacAddress,omitempty"`

	// A collection of references to the [management.Controller](mo://management.Controller) Managed Object.
	// When this managed object is deleted, the referenced [management.Controller](mo://management.Controller) MO unsets its reference to this deleted MO.
	// Read Only: true
	ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

	// Netmask for the interface.
	// Read Only: true
	Mask string `json:"Mask,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Switch Id of the interface.
	SwitchID string `json:"SwitchId,omitempty"`

	// Status of UEM connection.
	UemConnStatus string `json:"UemConnStatus,omitempty"`

	// Virtual hostname configured for the interface in case of clustered environment.
	VirtualHostName string `json:"VirtualHostName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ManagementInterface) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		Gateway string `json:"Gateway,omitempty"`

		HostName string `json:"HostName,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		IPV4Gateway string `json:"Ipv4Gateway,omitempty"`

		IPV4Mask string `json:"Ipv4Mask,omitempty"`

		IPV6Address string `json:"Ipv6Address,omitempty"`

		IPV6Gateway string `json:"Ipv6Gateway,omitempty"`

		IPV6Prefix int64 `json:"Ipv6Prefix,omitempty"`

		MacAddress string `json:"MacAddress,omitempty"`

		ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

		Mask string `json:"Mask,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		UemConnStatus string `json:"UemConnStatus,omitempty"`

		VirtualHostName string `json:"VirtualHostName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Gateway = dataAO1.Gateway

	m.HostName = dataAO1.HostName

	m.IPAddress = dataAO1.IPAddress

	m.IPV4Address = dataAO1.IPV4Address

	m.IPV4Gateway = dataAO1.IPV4Gateway

	m.IPV4Mask = dataAO1.IPV4Mask

	m.IPV6Address = dataAO1.IPV6Address

	m.IPV6Gateway = dataAO1.IPV6Gateway

	m.IPV6Prefix = dataAO1.IPV6Prefix

	m.MacAddress = dataAO1.MacAddress

	m.ManagementController = dataAO1.ManagementController

	m.Mask = dataAO1.Mask

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SwitchID = dataAO1.SwitchID

	m.UemConnStatus = dataAO1.UemConnStatus

	m.VirtualHostName = dataAO1.VirtualHostName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ManagementInterface) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Gateway string `json:"Gateway,omitempty"`

		HostName string `json:"HostName,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		IPV4Address string `json:"Ipv4Address,omitempty"`

		IPV4Gateway string `json:"Ipv4Gateway,omitempty"`

		IPV4Mask string `json:"Ipv4Mask,omitempty"`

		IPV6Address string `json:"Ipv6Address,omitempty"`

		IPV6Gateway string `json:"Ipv6Gateway,omitempty"`

		IPV6Prefix int64 `json:"Ipv6Prefix,omitempty"`

		MacAddress string `json:"MacAddress,omitempty"`

		ManagementController *ManagementControllerRef `json:"ManagementController,omitempty"`

		Mask string `json:"Mask,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SwitchID string `json:"SwitchId,omitempty"`

		UemConnStatus string `json:"UemConnStatus,omitempty"`

		VirtualHostName string `json:"VirtualHostName,omitempty"`
	}

	dataAO1.Gateway = m.Gateway

	dataAO1.HostName = m.HostName

	dataAO1.IPAddress = m.IPAddress

	dataAO1.IPV4Address = m.IPV4Address

	dataAO1.IPV4Gateway = m.IPV4Gateway

	dataAO1.IPV4Mask = m.IPV4Mask

	dataAO1.IPV6Address = m.IPV6Address

	dataAO1.IPV6Gateway = m.IPV6Gateway

	dataAO1.IPV6Prefix = m.IPV6Prefix

	dataAO1.MacAddress = m.MacAddress

	dataAO1.ManagementController = m.ManagementController

	dataAO1.Mask = m.Mask

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SwitchID = m.SwitchID

	dataAO1.UemConnStatus = m.UemConnStatus

	dataAO1.VirtualHostName = m.VirtualHostName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this management interface
func (m *ManagementInterface) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementInterface) validateManagementController(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementController) { // not required
		return nil
	}

	if m.ManagementController != nil {
		if err := m.ManagementController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementController")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementInterface) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagementInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementInterface) UnmarshalBinary(b []byte) error {
	var res ManagementInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
