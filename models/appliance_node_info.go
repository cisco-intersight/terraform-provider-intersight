// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplianceNodeInfo Appliance:Node Info
//
// NodeInfo managed object stores the Intersight Appliance's cluster node information.
// NodeInfo managed objects are created during the Intersight Appliance setup. The
// Intersight Appliance updates the NodeInfo managed objects with status information
// periodically.
//
// swagger:model applianceNodeInfo
type ApplianceNodeInfo struct {
	MoBaseMo

	// Cluster node's FQDN or IP address.
	// Read Only: true
	Hostname string `json:"Hostname,omitempty"`

	// System assigned unique ID of the Intersight Appliance node. The system incrementally assigns identifiers to each node in the Intersight Appliance cluster starting with a value of 1.
	// Read Only: true
	NodeID int64 `json:"NodeId,omitempty"`

	// IPv4 subnet and gateway configuration of the Intersight Appliance node.
	// Read Only: true
	NodeIPV4Config *CommIPV4Interface `json:"NodeIpV4Config,omitempty"`

	// Operational status of the Intersight Appliance node.
	// Read Only: true
	// Enum: [Unknown Operational Impaired AttentionNeeded]
	OperationalStatus string `json:"OperationalStatus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplianceNodeInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Hostname string `json:"Hostname,omitempty"`

		NodeID int64 `json:"NodeId,omitempty"`

		NodeIPV4Config *CommIPV4Interface `json:"NodeIpV4Config,omitempty"`

		OperationalStatus string `json:"OperationalStatus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Hostname = dataAO1.Hostname

	m.NodeID = dataAO1.NodeID

	m.NodeIPV4Config = dataAO1.NodeIPV4Config

	m.OperationalStatus = dataAO1.OperationalStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplianceNodeInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Hostname string `json:"Hostname,omitempty"`

		NodeID int64 `json:"NodeId,omitempty"`

		NodeIPV4Config *CommIPV4Interface `json:"NodeIpV4Config,omitempty"`

		OperationalStatus string `json:"OperationalStatus,omitempty"`
	}

	dataAO1.Hostname = m.Hostname

	dataAO1.NodeID = m.NodeID

	dataAO1.NodeIPV4Config = m.NodeIPV4Config

	dataAO1.OperationalStatus = m.OperationalStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appliance node info
func (m *ApplianceNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeIPV4Config(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationalStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplianceNodeInfo) validateNodeIPV4Config(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeIPV4Config) { // not required
		return nil
	}

	if m.NodeIPV4Config != nil {
		if err := m.NodeIPV4Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeIpV4Config")
			}
			return err
		}
	}

	return nil
}

var applianceNodeInfoTypeOperationalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Operational","Impaired","AttentionNeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applianceNodeInfoTypeOperationalStatusPropEnum = append(applianceNodeInfoTypeOperationalStatusPropEnum, v)
	}
}

// property enum
func (m *ApplianceNodeInfo) validateOperationalStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applianceNodeInfoTypeOperationalStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplianceNodeInfo) validateOperationalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationalStatusEnum("OperationalStatus", "body", m.OperationalStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplianceNodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplianceNodeInfo) UnmarshalBinary(b []byte) error {
	var res ApplianceNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
