// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowMoReferenceProperty Workflow:Mo Reference Property
//
// Capture all the properties for an Intersight managed object reference.
//
// swagger:model workflowMoReferenceProperty
type WorkflowMoReferenceProperty struct {
	MoBaseComplexType

	WorkflowMoReferencePropertyAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowMoReferenceProperty) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowMoReferencePropertyAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowMoReferencePropertyAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowMoReferenceProperty) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowMoReferencePropertyAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow mo reference property
func (m *WorkflowMoReferenceProperty) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowMoReferencePropertyAO1P1
	if err := m.WorkflowMoReferencePropertyAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowMoReferenceProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowMoReferenceProperty) UnmarshalBinary(b []byte) error {
	var res WorkflowMoReferenceProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowMoReferencePropertyAO1P1 workflow mo reference property a o1 p1
//
// swagger:model WorkflowMoReferencePropertyAO1P1
type WorkflowMoReferencePropertyAO1P1 struct {

	// List of properties from an Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
	DisplayAttributes []string `json:"DisplayAttributes"`

	// Field to hold an Intersight API along with an optional filter to narrow down the search options.
	Selector string `json:"Selector,omitempty"`

	// A property from the Intersight object, value of which can be used as value for referenced input definition.
	ValueAttribute string `json:"ValueAttribute,omitempty"`

	// workflow mo reference property a o1 p1
	WorkflowMoReferencePropertyAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowMoReferencePropertyAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// List of properties from an Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
		DisplayAttributes []string `json:"DisplayAttributes"`

		// Field to hold an Intersight API along with an optional filter to narrow down the search options.
		Selector string `json:"Selector,omitempty"`

		// A property from the Intersight object, value of which can be used as value for referenced input definition.
		ValueAttribute string `json:"ValueAttribute,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowMoReferencePropertyAO1P1

	rcv.DisplayAttributes = stage1.DisplayAttributes
	rcv.Selector = stage1.Selector
	rcv.ValueAttribute = stage1.ValueAttribute
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "DisplayAttributes")
	delete(stage2, "Selector")
	delete(stage2, "ValueAttribute")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowMoReferencePropertyAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowMoReferencePropertyAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// List of properties from an Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.
		DisplayAttributes []string `json:"DisplayAttributes"`

		// Field to hold an Intersight API along with an optional filter to narrow down the search options.
		Selector string `json:"Selector,omitempty"`

		// A property from the Intersight object, value of which can be used as value for referenced input definition.
		ValueAttribute string `json:"ValueAttribute,omitempty"`
	}

	stage1.DisplayAttributes = m.DisplayAttributes
	stage1.Selector = m.Selector
	stage1.ValueAttribute = m.ValueAttribute

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowMoReferencePropertyAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowMoReferencePropertyAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow mo reference property a o1 p1
func (m *WorkflowMoReferencePropertyAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowMoReferencePropertyAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowMoReferencePropertyAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowMoReferencePropertyAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
