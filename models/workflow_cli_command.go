// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowCliCommand CLI Command
//
// This models a single CLI command that can be executed on the end point.
//
// swagger:model workflowCliCommand
type WorkflowCliCommand struct {
	WorkflowAPI

	// The command to run on the device connector.
	Command string `json:"Command,omitempty"`

	// The regex string that identifies the end of the command response.
	EndPrompt string `json:"EndPrompt,omitempty"`

	// Cli prompts required as part of interactive command execution. For e.g. login credentials will be part of prompts
	// which are provided as list of expect prompt regex and corresponding answer string.
	ExpectPrompts []*WorkflowExpectPrompt `json:"ExpectPrompts"`

	// Skips the execution status check of the terminal command. One use case for this is while exiting the
	// terminal session from esxi host.
	SkipStatusCheck *bool `json:"SkipStatusCheck,omitempty"`

	// If this flag is set, it marks the end of the terminal session where the previous commands were executed.
	TerminalEnd *bool `json:"TerminalEnd,omitempty"`

	// If this flag is set, the execution of this command initiates a terminal session in which the subsequent
	// CLI commands are executed until a command with terminalEnd flag is encountered or the end of the batch.
	TerminalStart *bool `json:"TerminalStart,omitempty"`

	// The type of the command - can be interactive or non-interactive.
	// Enum: [NonInteractive Interactive]
	Type *string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowCliCommand) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAPI
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAPI = aO0

	// AO1
	var dataAO1 struct {
		Command string `json:"Command,omitempty"`

		EndPrompt string `json:"EndPrompt,omitempty"`

		ExpectPrompts []*WorkflowExpectPrompt `json:"ExpectPrompts"`

		SkipStatusCheck *bool `json:"SkipStatusCheck,omitempty"`

		TerminalEnd *bool `json:"TerminalEnd,omitempty"`

		TerminalStart *bool `json:"TerminalStart,omitempty"`

		Type *string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Command = dataAO1.Command

	m.EndPrompt = dataAO1.EndPrompt

	m.ExpectPrompts = dataAO1.ExpectPrompts

	m.SkipStatusCheck = dataAO1.SkipStatusCheck

	m.TerminalEnd = dataAO1.TerminalEnd

	m.TerminalStart = dataAO1.TerminalStart

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowCliCommand) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowAPI)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Command string `json:"Command,omitempty"`

		EndPrompt string `json:"EndPrompt,omitempty"`

		ExpectPrompts []*WorkflowExpectPrompt `json:"ExpectPrompts"`

		SkipStatusCheck *bool `json:"SkipStatusCheck,omitempty"`

		TerminalEnd *bool `json:"TerminalEnd,omitempty"`

		TerminalStart *bool `json:"TerminalStart,omitempty"`

		Type *string `json:"Type,omitempty"`
	}

	dataAO1.Command = m.Command

	dataAO1.EndPrompt = m.EndPrompt

	dataAO1.ExpectPrompts = m.ExpectPrompts

	dataAO1.SkipStatusCheck = m.SkipStatusCheck

	dataAO1.TerminalEnd = m.TerminalEnd

	dataAO1.TerminalStart = m.TerminalStart

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow cli command
func (m *WorkflowCliCommand) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAPI
	if err := m.WorkflowAPI.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectPrompts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowCliCommand) validateExpectPrompts(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectPrompts) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpectPrompts); i++ {
		if swag.IsZero(m.ExpectPrompts[i]) { // not required
			continue
		}

		if m.ExpectPrompts[i] != nil {
			if err := m.ExpectPrompts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExpectPrompts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workflowCliCommandTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NonInteractive","Interactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowCliCommandTypeTypePropEnum = append(workflowCliCommandTypeTypePropEnum, v)
	}
}

// property enum
func (m *WorkflowCliCommand) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowCliCommandTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowCliCommand) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowCliCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowCliCommand) UnmarshalBinary(b []byte) error {
	var res WorkflowCliCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
