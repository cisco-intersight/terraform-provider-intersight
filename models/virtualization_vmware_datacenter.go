// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualizationVmwareDatacenter Virtualization:Vmware Datacenter
//
// Datacenter object in VMware inventory. It is the logical container for all other objects like Datastore, Host, VirtualMachine, etc.
//
// swagger:model virtualizationVmwareDatacenter
type VirtualizationVmwareDatacenter struct {
	VirtualizationDatacenter

	// Count of all clusters associated with this DC.
	ClusterCount int64 `json:"ClusterCount,omitempty"`

	// Count of all datastores associated with this DC.
	DatastoreCount int64 `json:"DatastoreCount,omitempty"`

	// Count of all hosts associated with this DC.
	HostCount int64 `json:"HostCount,omitempty"`

	// Hypervisor to which this datacenter belongs. All entities are owned by the hypervisor.
	// Read Only: true
	HypervisorManager *VirtualizationVmwareVcenterRef `json:"HypervisorManager,omitempty"`

	// Count of all networks associated with this datacenter (DC).
	NetworkCount int64 `json:"NetworkCount,omitempty"`

	// Count of all virtual machines (VMs) associated with this DC.
	VMCount int64 `json:"VmCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationVmwareDatacenter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationDatacenter
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationDatacenter = aO0

	// AO1
	var dataAO1 struct {
		ClusterCount int64 `json:"ClusterCount,omitempty"`

		DatastoreCount int64 `json:"DatastoreCount,omitempty"`

		HostCount int64 `json:"HostCount,omitempty"`

		HypervisorManager *VirtualizationVmwareVcenterRef `json:"HypervisorManager,omitempty"`

		NetworkCount int64 `json:"NetworkCount,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ClusterCount = dataAO1.ClusterCount

	m.DatastoreCount = dataAO1.DatastoreCount

	m.HostCount = dataAO1.HostCount

	m.HypervisorManager = dataAO1.HypervisorManager

	m.NetworkCount = dataAO1.NetworkCount

	m.VMCount = dataAO1.VMCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationVmwareDatacenter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationDatacenter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ClusterCount int64 `json:"ClusterCount,omitempty"`

		DatastoreCount int64 `json:"DatastoreCount,omitempty"`

		HostCount int64 `json:"HostCount,omitempty"`

		HypervisorManager *VirtualizationVmwareVcenterRef `json:"HypervisorManager,omitempty"`

		NetworkCount int64 `json:"NetworkCount,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}

	dataAO1.ClusterCount = m.ClusterCount

	dataAO1.DatastoreCount = m.DatastoreCount

	dataAO1.HostCount = m.HostCount

	dataAO1.HypervisorManager = m.HypervisorManager

	dataAO1.NetworkCount = m.NetworkCount

	dataAO1.VMCount = m.VMCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization vmware datacenter
func (m *VirtualizationVmwareDatacenter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationDatacenter
	if err := m.VirtualizationDatacenter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorManager(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationVmwareDatacenter) validateHypervisorManager(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervisorManager) { // not required
		return nil
	}

	if m.HypervisorManager != nil {
		if err := m.HypervisorManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HypervisorManager")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationVmwareDatacenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationVmwareDatacenter) UnmarshalBinary(b []byte) error {
	var res VirtualizationVmwareDatacenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
