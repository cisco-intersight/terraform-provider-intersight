// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetAddressInformation Asset:Address Information
//
// Type for saving the address information. It is used in asset.DeviceContractInformation object to save customer address.
//
// swagger:model assetAddressInformation
type AssetAddressInformation struct {
	MoBaseComplexType

	AssetAddressInformationAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetAddressInformation) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 AssetAddressInformationAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AssetAddressInformationAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetAddressInformation) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.AssetAddressInformationAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset address information
func (m *AssetAddressInformation) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with AssetAddressInformationAO1P1
	if err := m.AssetAddressInformationAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetAddressInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetAddressInformation) UnmarshalBinary(b []byte) error {
	var res AssetAddressInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetAddressInformationAO1P1 asset address information a o1 p1
//
// swagger:model AssetAddressInformationAO1P1
type AssetAddressInformationAO1P1 struct {

	// Address Line one of the address information. example "PO BOX 641570".
	// Read Only: true
	Address1 string `json:"Address1,omitempty"`

	// Address Line two of the address information. example "Cisco Systems".
	// Read Only: true
	Address2 string `json:"Address2,omitempty"`

	// City in which the address resides. example "San Jose".
	// Read Only: true
	City string `json:"City,omitempty"`

	// Country in which the address resides. example "US".
	// Read Only: true
	Country string `json:"Country,omitempty"`

	// Location in which the address resides. example "14852".
	// Read Only: true
	Location string `json:"Location,omitempty"`

	// Name of the user whose address is being populated.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Postal Code in which the address resides. example "95164-1570".
	// Read Only: true
	PostalCode string `json:"PostalCode,omitempty"`

	// State in which the address resides. example "CA".
	// Read Only: true
	State string `json:"State,omitempty"`

	// asset address information a o1 p1
	AssetAddressInformationAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AssetAddressInformationAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Address Line one of the address information. example "PO BOX 641570".
		// Read Only: true
		Address1 string `json:"Address1,omitempty"`

		// Address Line two of the address information. example "Cisco Systems".
		// Read Only: true
		Address2 string `json:"Address2,omitempty"`

		// City in which the address resides. example "San Jose".
		// Read Only: true
		City string `json:"City,omitempty"`

		// Country in which the address resides. example "US".
		// Read Only: true
		Country string `json:"Country,omitempty"`

		// Location in which the address resides. example "14852".
		// Read Only: true
		Location string `json:"Location,omitempty"`

		// Name of the user whose address is being populated.
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// Postal Code in which the address resides. example "95164-1570".
		// Read Only: true
		PostalCode string `json:"PostalCode,omitempty"`

		// State in which the address resides. example "CA".
		// Read Only: true
		State string `json:"State,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AssetAddressInformationAO1P1

	rcv.Address1 = stage1.Address1
	rcv.Address2 = stage1.Address2
	rcv.City = stage1.City
	rcv.Country = stage1.Country
	rcv.Location = stage1.Location
	rcv.Name = stage1.Name
	rcv.PostalCode = stage1.PostalCode
	rcv.State = stage1.State
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Address1")
	delete(stage2, "Address2")
	delete(stage2, "City")
	delete(stage2, "Country")
	delete(stage2, "Location")
	delete(stage2, "Name")
	delete(stage2, "PostalCode")
	delete(stage2, "State")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AssetAddressInformationAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AssetAddressInformationAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Address Line one of the address information. example "PO BOX 641570".
		// Read Only: true
		Address1 string `json:"Address1,omitempty"`

		// Address Line two of the address information. example "Cisco Systems".
		// Read Only: true
		Address2 string `json:"Address2,omitempty"`

		// City in which the address resides. example "San Jose".
		// Read Only: true
		City string `json:"City,omitempty"`

		// Country in which the address resides. example "US".
		// Read Only: true
		Country string `json:"Country,omitempty"`

		// Location in which the address resides. example "14852".
		// Read Only: true
		Location string `json:"Location,omitempty"`

		// Name of the user whose address is being populated.
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// Postal Code in which the address resides. example "95164-1570".
		// Read Only: true
		PostalCode string `json:"PostalCode,omitempty"`

		// State in which the address resides. example "CA".
		// Read Only: true
		State string `json:"State,omitempty"`
	}

	stage1.Address1 = m.Address1
	stage1.Address2 = m.Address2
	stage1.City = m.City
	stage1.Country = m.Country
	stage1.Location = m.Location
	stage1.Name = m.Name
	stage1.PostalCode = m.PostalCode
	stage1.State = m.State

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AssetAddressInformationAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AssetAddressInformationAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this asset address information a o1 p1
func (m *AssetAddressInformationAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetAddressInformationAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetAddressInformationAO1P1) UnmarshalBinary(b []byte) error {
	var res AssetAddressInformationAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
