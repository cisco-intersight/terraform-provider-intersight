// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowBaseDataType Workflow:Base Data Type
//
// The base data type that is used to derive all the other data types for inputs and outputs.
//
// swagger:model workflowBaseDataType
type WorkflowBaseDataType struct {
	MoBaseComplexType

	WorkflowBaseDataTypeAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowBaseDataType) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowBaseDataTypeAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowBaseDataTypeAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowBaseDataType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowBaseDataTypeAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow base data type
func (m *WorkflowBaseDataType) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowBaseDataTypeAO1P1
	if err := m.WorkflowBaseDataTypeAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowBaseDataType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowBaseDataType) UnmarshalBinary(b []byte) error {
	var res WorkflowBaseDataType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowBaseDataTypeAO1P1 workflow base data type a o1 p1
//
// swagger:model WorkflowBaseDataTypeAO1P1
type WorkflowBaseDataTypeAO1P1 struct {

	// Default value for the data type. If default value was provided and the input was required the default value will be used as the input.
	Default *WorkflowDefaultValue `json:"Default,omitempty"`

	// Provide a detailed description of the data type.
	Description string `json:"Description,omitempty"`

	// Descriptive label for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), space ( ) or an underscore (_). The first and last character in label must be an alphanumeric character.
	Label string `json:"Label,omitempty"`

	// Descriptive name for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-) or an underscore (_). The first and last character in name must be an alphanumeric character.
	Name string `json:"Name,omitempty"`

	// Specifies whether this parameter is required. The field is applicable for task and workflow.
	Required *bool `json:"Required,omitempty"`

	// workflow base data type a o1 p1
	WorkflowBaseDataTypeAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowBaseDataTypeAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Default value for the data type. If default value was provided and the input was required the default value will be used as the input.
		Default *WorkflowDefaultValue `json:"Default,omitempty"`

		// Provide a detailed description of the data type.
		Description string `json:"Description,omitempty"`

		// Descriptive label for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), space ( ) or an underscore (_). The first and last character in label must be an alphanumeric character.
		Label string `json:"Label,omitempty"`

		// Descriptive name for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-) or an underscore (_). The first and last character in name must be an alphanumeric character.
		Name string `json:"Name,omitempty"`

		// Specifies whether this parameter is required. The field is applicable for task and workflow.
		Required *bool `json:"Required,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowBaseDataTypeAO1P1

	rcv.Default = stage1.Default
	rcv.Description = stage1.Description
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Required = stage1.Required
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Default")
	delete(stage2, "Description")
	delete(stage2, "Label")
	delete(stage2, "Name")
	delete(stage2, "Required")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowBaseDataTypeAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowBaseDataTypeAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Default value for the data type. If default value was provided and the input was required the default value will be used as the input.
		Default *WorkflowDefaultValue `json:"Default,omitempty"`

		// Provide a detailed description of the data type.
		Description string `json:"Description,omitempty"`

		// Descriptive label for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), space ( ) or an underscore (_). The first and last character in label must be an alphanumeric character.
		Label string `json:"Label,omitempty"`

		// Descriptive name for the data type. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-) or an underscore (_). The first and last character in name must be an alphanumeric character.
		Name string `json:"Name,omitempty"`

		// Specifies whether this parameter is required. The field is applicable for task and workflow.
		Required *bool `json:"Required,omitempty"`
	}

	stage1.Default = m.Default
	stage1.Description = m.Description
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Required = m.Required

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowBaseDataTypeAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowBaseDataTypeAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow base data type a o1 p1
func (m *WorkflowBaseDataTypeAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowBaseDataTypeAO1P1) validateDefault(formats strfmt.Registry) error {

	if swag.IsZero(m.Default) { // not required
		return nil
	}

	if m.Default != nil {
		if err := m.Default.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Default")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowBaseDataTypeAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowBaseDataTypeAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowBaseDataTypeAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
