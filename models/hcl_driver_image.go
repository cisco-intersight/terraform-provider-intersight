// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclDriverImage Hcl:Driver Image
//
// Collection used to store the driver ISO urls for each server based on how it is managed.
//
// swagger:model hclDriverImage
type HclDriverImage struct {
	MoBaseMo

	// URL of the driver ISO images.
	DriverIsoURL string `json:"DriverIsoUrl,omitempty"`

	// Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release.
	// Enum: [UCSM IMC]
	ManagementType *string `json:"ManagementType,omitempty"`

	// Three part ID representing the server model as returned by UCSM/CIMC XML APIs.
	ServerPid string `json:"ServerPid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclDriverImage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DriverIsoURL string `json:"DriverIsoUrl,omitempty"`

		ManagementType *string `json:"ManagementType,omitempty"`

		ServerPid string `json:"ServerPid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DriverIsoURL = dataAO1.DriverIsoURL

	m.ManagementType = dataAO1.ManagementType

	m.ServerPid = dataAO1.ServerPid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclDriverImage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DriverIsoURL string `json:"DriverIsoUrl,omitempty"`

		ManagementType *string `json:"ManagementType,omitempty"`

		ServerPid string `json:"ServerPid,omitempty"`
	}

	dataAO1.DriverIsoURL = m.DriverIsoURL

	dataAO1.ManagementType = m.ManagementType

	dataAO1.ServerPid = m.ServerPid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl driver image
func (m *HclDriverImage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hclDriverImageTypeManagementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UCSM","IMC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclDriverImageTypeManagementTypePropEnum = append(hclDriverImageTypeManagementTypePropEnum, v)
	}
}

// property enum
func (m *HclDriverImage) validateManagementTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclDriverImageTypeManagementTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclDriverImage) validateManagementType(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateManagementTypeEnum("ManagementType", "body", *m.ManagementType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclDriverImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclDriverImage) UnmarshalBinary(b []byte) error {
	var res HclDriverImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
