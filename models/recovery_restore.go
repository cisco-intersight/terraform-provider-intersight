// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoveryRestore Restore
//
// swagger:model recoveryRestore
type RecoveryRestore struct {
	MoBaseMo

	// The backup info that needs to be restored in the target endpoint.
	BackupInfo *RecoveryAbstractBackupInfoRef `json:"BackupInfo,omitempty"`

	// Configuration parameters to be passed into the restore workflow.
	ConfigParams *RecoveryConfigParams `json:"ConfigParams,omitempty"`

	// The DeviceRegistration of the target endpoint.
	Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Relationship to the RestoreStatus mo that tracks status of restore workflow.
	// Read Only: true
	RestoreStatus *RecoveryAbstractRestoreStatusRef `json:"RestoreStatus,omitempty"`

	// The run time instance of the workflow for this upgrade operation.
	// Read Only: true
	Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoveryRestore) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		BackupInfo *RecoveryAbstractBackupInfoRef `json:"BackupInfo,omitempty"`

		ConfigParams *RecoveryConfigParams `json:"ConfigParams,omitempty"`

		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		RestoreStatus *RecoveryAbstractRestoreStatusRef `json:"RestoreStatus,omitempty"`

		Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BackupInfo = dataAO1.BackupInfo

	m.ConfigParams = dataAO1.ConfigParams

	m.Device = dataAO1.Device

	m.Organization = dataAO1.Organization

	m.RestoreStatus = dataAO1.RestoreStatus

	m.Workflow = dataAO1.Workflow

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoveryRestore) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BackupInfo *RecoveryAbstractBackupInfoRef `json:"BackupInfo,omitempty"`

		ConfigParams *RecoveryConfigParams `json:"ConfigParams,omitempty"`

		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		RestoreStatus *RecoveryAbstractRestoreStatusRef `json:"RestoreStatus,omitempty"`

		Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
	}

	dataAO1.BackupInfo = m.BackupInfo

	dataAO1.ConfigParams = m.ConfigParams

	dataAO1.Device = m.Device

	dataAO1.Organization = m.Organization

	dataAO1.RestoreStatus = m.RestoreStatus

	dataAO1.Workflow = m.Workflow

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recovery restore
func (m *RecoveryRestore) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryRestore) validateBackupInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupInfo) { // not required
		return nil
	}

	if m.BackupInfo != nil {
		if err := m.BackupInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryRestore) validateConfigParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigParams) { // not required
		return nil
	}

	if m.ConfigParams != nil {
		if err := m.ConfigParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryRestore) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Device")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryRestore) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryRestore) validateRestoreStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RestoreStatus) { // not required
		return nil
	}

	if m.RestoreStatus != nil {
		if err := m.RestoreStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RestoreStatus")
			}
			return err
		}
	}

	return nil
}

func (m *RecoveryRestore) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryRestore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryRestore) UnmarshalBinary(b []byte) error {
	var res RecoveryRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
