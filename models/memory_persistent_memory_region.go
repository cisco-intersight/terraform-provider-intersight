// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoryPersistentMemoryRegion Memory:Persistent Memory Region
//
// Persistent Memory Region configured on the Persistent Memory Modules on a server.
//
// swagger:model memoryPersistentMemoryRegion
type MemoryPersistentMemoryRegion struct {
	InventoryBase

	// Free capacity in GB of the Persistent Memory Region.
	// Read Only: true
	FreeCapacity string `json:"FreeCapacity,omitempty"`

	// Health state of the Persistent Memory Region.
	// Read Only: true
	HealthState string `json:"HealthState,omitempty"`

	// ID of the Interleaved Set formed for this Persistent Memory Region.
	// Read Only: true
	InterleavedSetID string `json:"InterleavedSetId,omitempty"`

	// Set of locator IDs that are included in the Persistent Memory Region.
	// Read Only: true
	LocaterIds string `json:"LocaterIds,omitempty"`

	// A collection of references to the [memory.PersistentMemoryConfiguration](mo://memory.PersistentMemoryConfiguration) Managed Object.
	// When this managed object is deleted, the referenced [memory.PersistentMemoryConfiguration](mo://memory.PersistentMemoryConfiguration) MO unsets its reference to this deleted MO.
	// Read Only: true
	MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

	// Collection of all the Persistent Memory Namespaces configured within this Persistent Memory Region.
	// Read Only: true
	PersistentMemoryNamespaces []*MemoryPersistentMemoryNamespaceRef `json:"PersistentMemoryNamespaces"`

	// Persistent Memory type of the Persistent Memory Region.
	// Read Only: true
	PersistentMemoryType string `json:"PersistentMemoryType,omitempty"`

	// ID of the Persistent Memory Region.
	// Read Only: true
	RegionID string `json:"RegionId,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Socket ID of the Persistent Memory Region.
	// Read Only: true
	SocketID string `json:"SocketId,omitempty"`

	// Socket Memory ID of the Persistent Memory Region.
	// Read Only: true
	SocketMemoryID string `json:"SocketMemoryId,omitempty"`

	// Total capacity in GB of the Persistent Memory Region.
	// Read Only: true
	TotalCapacity string `json:"TotalCapacity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MemoryPersistentMemoryRegion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		FreeCapacity string `json:"FreeCapacity,omitempty"`

		HealthState string `json:"HealthState,omitempty"`

		InterleavedSetID string `json:"InterleavedSetId,omitempty"`

		LocaterIds string `json:"LocaterIds,omitempty"`

		MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

		PersistentMemoryNamespaces []*MemoryPersistentMemoryNamespaceRef `json:"PersistentMemoryNamespaces"`

		PersistentMemoryType string `json:"PersistentMemoryType,omitempty"`

		RegionID string `json:"RegionId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SocketID string `json:"SocketId,omitempty"`

		SocketMemoryID string `json:"SocketMemoryId,omitempty"`

		TotalCapacity string `json:"TotalCapacity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.FreeCapacity = dataAO1.FreeCapacity

	m.HealthState = dataAO1.HealthState

	m.InterleavedSetID = dataAO1.InterleavedSetID

	m.LocaterIds = dataAO1.LocaterIds

	m.MemoryPersistentMemoryConfiguration = dataAO1.MemoryPersistentMemoryConfiguration

	m.PersistentMemoryNamespaces = dataAO1.PersistentMemoryNamespaces

	m.PersistentMemoryType = dataAO1.PersistentMemoryType

	m.RegionID = dataAO1.RegionID

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SocketID = dataAO1.SocketID

	m.SocketMemoryID = dataAO1.SocketMemoryID

	m.TotalCapacity = dataAO1.TotalCapacity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MemoryPersistentMemoryRegion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		FreeCapacity string `json:"FreeCapacity,omitempty"`

		HealthState string `json:"HealthState,omitempty"`

		InterleavedSetID string `json:"InterleavedSetId,omitempty"`

		LocaterIds string `json:"LocaterIds,omitempty"`

		MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

		PersistentMemoryNamespaces []*MemoryPersistentMemoryNamespaceRef `json:"PersistentMemoryNamespaces"`

		PersistentMemoryType string `json:"PersistentMemoryType,omitempty"`

		RegionID string `json:"RegionId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SocketID string `json:"SocketId,omitempty"`

		SocketMemoryID string `json:"SocketMemoryId,omitempty"`

		TotalCapacity string `json:"TotalCapacity,omitempty"`
	}

	dataAO1.FreeCapacity = m.FreeCapacity

	dataAO1.HealthState = m.HealthState

	dataAO1.InterleavedSetID = m.InterleavedSetID

	dataAO1.LocaterIds = m.LocaterIds

	dataAO1.MemoryPersistentMemoryConfiguration = m.MemoryPersistentMemoryConfiguration

	dataAO1.PersistentMemoryNamespaces = m.PersistentMemoryNamespaces

	dataAO1.PersistentMemoryType = m.PersistentMemoryType

	dataAO1.RegionID = m.RegionID

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SocketID = m.SocketID

	dataAO1.SocketMemoryID = m.SocketMemoryID

	dataAO1.TotalCapacity = m.TotalCapacity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this memory persistent memory region
func (m *MemoryPersistentMemoryRegion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryPersistentMemoryConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentMemoryNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemoryPersistentMemoryRegion) validateMemoryPersistentMemoryConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryPersistentMemoryConfiguration) { // not required
		return nil
	}

	if m.MemoryPersistentMemoryConfiguration != nil {
		if err := m.MemoryPersistentMemoryConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MemoryPersistentMemoryConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *MemoryPersistentMemoryRegion) validatePersistentMemoryNamespaces(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentMemoryNamespaces) { // not required
		return nil
	}

	for i := 0; i < len(m.PersistentMemoryNamespaces); i++ {
		if swag.IsZero(m.PersistentMemoryNamespaces[i]) { // not required
			continue
		}

		if m.PersistentMemoryNamespaces[i] != nil {
			if err := m.PersistentMemoryNamespaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PersistentMemoryNamespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemoryPersistentMemoryRegion) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemoryPersistentMemoryRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryPersistentMemoryRegion) UnmarshalBinary(b []byte) error {
	var res MemoryPersistentMemoryRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
