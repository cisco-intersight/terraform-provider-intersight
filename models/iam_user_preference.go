// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamUserPreference Iam:User Preference
//
// Holder for UI preferences such as theme, columns.
//
// swagger:model iamUserPreference
type IamUserPreference struct {
	MoBaseMo

	// A collection of references to the [iam.Idp](mo://iam.Idp) Managed Object.
	// When this managed object is deleted, the referenced [iam.Idp](mo://iam.Idp) MO unsets its reference to this deleted MO.
	// Read Only: true
	Idp *IamIdpRef `json:"Idp,omitempty"`

	// A collection of references to the [iam.IdpReference](mo://iam.IdpReference) Managed Object.
	// When this managed object is deleted, the referenced [iam.IdpReference](mo://iam.IdpReference) MO unsets its reference to this deleted MO.
	// Read Only: true
	IdpReference *IamIdpReferenceRef `json:"IdpReference,omitempty"`

	// UI preferences of the user.
	Preference interface{} `json:"Preference,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamUserPreference) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Idp *IamIdpRef `json:"Idp,omitempty"`

		IdpReference *IamIdpReferenceRef `json:"IdpReference,omitempty"`

		Preference interface{} `json:"Preference,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Idp = dataAO1.Idp

	m.IdpReference = dataAO1.IdpReference

	m.Preference = dataAO1.Preference

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamUserPreference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Idp *IamIdpRef `json:"Idp,omitempty"`

		IdpReference *IamIdpReferenceRef `json:"IdpReference,omitempty"`

		Preference interface{} `json:"Preference,omitempty"`
	}

	dataAO1.Idp = m.Idp

	dataAO1.IdpReference = m.IdpReference

	dataAO1.Preference = m.Preference

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam user preference
func (m *IamUserPreference) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamUserPreference) validateIdp(formats strfmt.Registry) error {

	if swag.IsZero(m.Idp) { // not required
		return nil
	}

	if m.Idp != nil {
		if err := m.Idp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Idp")
			}
			return err
		}
	}

	return nil
}

func (m *IamUserPreference) validateIdpReference(formats strfmt.Registry) error {

	if swag.IsZero(m.IdpReference) { // not required
		return nil
	}

	if m.IdpReference != nil {
		if err := m.IdpReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IdpReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamUserPreference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamUserPreference) UnmarshalBinary(b []byte) error {
	var res IamUserPreference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
