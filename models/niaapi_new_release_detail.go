// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NiaapiNewReleaseDetail Niaapi:New Release Detail
//
// The detail content of of this post.
//
// swagger:model niaapiNewReleaseDetail
type NiaapiNewReleaseDetail struct {
	MoBaseComplexType

	NiaapiNewReleaseDetailAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiNewReleaseDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 NiaapiNewReleaseDetailAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.NiaapiNewReleaseDetailAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiNewReleaseDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.NiaapiNewReleaseDetailAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi new release detail
func (m *NiaapiNewReleaseDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with NiaapiNewReleaseDetailAO1P1
	if err := m.NiaapiNewReleaseDetailAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiNewReleaseDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiNewReleaseDetail) UnmarshalBinary(b []byte) error {
	var res NiaapiNewReleaseDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NiaapiNewReleaseDetailAO1P1 niaapi new release detail a o1 p1
//
// swagger:model NiaapiNewReleaseDetailAO1P1
type NiaapiNewReleaseDetailAO1P1 struct {

	// Description of this new verison release post.
	Description string `json:"Description,omitempty"`

	// Link of downloading the release file.
	Link string `json:"Link,omitempty"`

	// The link used to provide a gateway for customer to review the release note.
	ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

	// The link title used to provide a gateway for customer to review the release note.
	ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

	// The link used to provide a gateway for customer to download the release.
	SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

	// The link title used to provide a gateway for customer to download the release.
	SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

	// Title of the new verison release post.
	Title string `json:"Title,omitempty"`

	// Version number Associate with this Post.
	Version string `json:"Version,omitempty"`

	// niaapi new release detail a o1 p1
	NiaapiNewReleaseDetailAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *NiaapiNewReleaseDetailAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Description of this new verison release post.
		Description string `json:"Description,omitempty"`

		// Link of downloading the release file.
		Link string `json:"Link,omitempty"`

		// The link used to provide a gateway for customer to review the release note.
		ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

		// The link title used to provide a gateway for customer to review the release note.
		ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

		// The link used to provide a gateway for customer to download the release.
		SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

		// The link title used to provide a gateway for customer to download the release.
		SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

		// Title of the new verison release post.
		Title string `json:"Title,omitempty"`

		// Version number Associate with this Post.
		Version string `json:"Version,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv NiaapiNewReleaseDetailAO1P1

	rcv.Description = stage1.Description
	rcv.Link = stage1.Link
	rcv.ReleaseNoteLink = stage1.ReleaseNoteLink
	rcv.ReleaseNoteLinkTitle = stage1.ReleaseNoteLinkTitle
	rcv.SoftwareDownloadLink = stage1.SoftwareDownloadLink
	rcv.SoftwareDownloadLinkTitle = stage1.SoftwareDownloadLinkTitle
	rcv.Title = stage1.Title
	rcv.Version = stage1.Version
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Description")
	delete(stage2, "Link")
	delete(stage2, "ReleaseNoteLink")
	delete(stage2, "ReleaseNoteLinkTitle")
	delete(stage2, "SoftwareDownloadLink")
	delete(stage2, "SoftwareDownloadLinkTitle")
	delete(stage2, "Title")
	delete(stage2, "Version")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.NiaapiNewReleaseDetailAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m NiaapiNewReleaseDetailAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Description of this new verison release post.
		Description string `json:"Description,omitempty"`

		// Link of downloading the release file.
		Link string `json:"Link,omitempty"`

		// The link used to provide a gateway for customer to review the release note.
		ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

		// The link title used to provide a gateway for customer to review the release note.
		ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

		// The link used to provide a gateway for customer to download the release.
		SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

		// The link title used to provide a gateway for customer to download the release.
		SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

		// Title of the new verison release post.
		Title string `json:"Title,omitempty"`

		// Version number Associate with this Post.
		Version string `json:"Version,omitempty"`
	}

	stage1.Description = m.Description
	stage1.Link = m.Link
	stage1.ReleaseNoteLink = m.ReleaseNoteLink
	stage1.ReleaseNoteLinkTitle = m.ReleaseNoteLinkTitle
	stage1.SoftwareDownloadLink = m.SoftwareDownloadLink
	stage1.SoftwareDownloadLinkTitle = m.SoftwareDownloadLinkTitle
	stage1.Title = m.Title
	stage1.Version = m.Version

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.NiaapiNewReleaseDetailAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.NiaapiNewReleaseDetailAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this niaapi new release detail a o1 p1
func (m *NiaapiNewReleaseDetailAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiNewReleaseDetailAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiNewReleaseDetailAO1P1) UnmarshalBinary(b []byte) error {
	var res NiaapiNewReleaseDetailAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
