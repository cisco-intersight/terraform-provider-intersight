// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IamCertificate Iam:Certificate
//
// Holds a certificate, signed by a CAcert.
//
// swagger:model iamCertificate
type IamCertificate struct {
	MoBaseMo

	// User-input pem-encoded certificate, signed by a CAcert.
	Certificate *X509Certificate `json:"Certificate,omitempty"`

	// The certificate signing request associated with this certificate.
	CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`

	// Status of the certificate.
	// Read Only: true
	// Enum: [PendingValidation Valid Invalid]
	Status string `json:"Status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamCertificate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Certificate *X509Certificate `json:"Certificate,omitempty"`

		CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`

		Status string `json:"Status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Certificate = dataAO1.Certificate

	m.CertificateRequest = dataAO1.CertificateRequest

	m.Status = dataAO1.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamCertificate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Certificate *X509Certificate `json:"Certificate,omitempty"`

		CertificateRequest *IamCertificateRequestRef `json:"CertificateRequest,omitempty"`

		Status string `json:"Status,omitempty"`
	}

	dataAO1.Certificate = m.Certificate

	dataAO1.CertificateRequest = m.CertificateRequest

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam certificate
func (m *IamCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamCertificate) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Certificate")
			}
			return err
		}
	}

	return nil
}

func (m *IamCertificate) validateCertificateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateRequest) { // not required
		return nil
	}

	if m.CertificateRequest != nil {
		if err := m.CertificateRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateRequest")
			}
			return err
		}
	}

	return nil
}

var iamCertificateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PendingValidation","Valid","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iamCertificateTypeStatusPropEnum = append(iamCertificateTypeStatusPropEnum, v)
	}
}

// property enum
func (m *IamCertificate) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iamCertificateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IamCertificate) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamCertificate) UnmarshalBinary(b []byte) error {
	var res IamCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
