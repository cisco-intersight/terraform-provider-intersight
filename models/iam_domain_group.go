// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamDomainGroup Iam:Domain Group
//
// Intersight services are mapped to three different categories of services for scaling purpose.
// Three categories are defined: Partition1/Partition2/Partition3. Topics for each category are created with
// a specific number of partitions. For each cloud environment these numbers will be different.
//
// swagger:model iamDomainGroup
type IamDomainGroup struct {
	MoBaseMo

	// A collection of references to the [iam.Account](mo://iam.Account) Managed Object.
	// When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The name of the domain-group.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// The partition number domain group related messages are produced for 'Partition1' category service topics.
	// Read Only: true
	Partition1 int64 `json:"Partition1,omitempty"`

	// In a cloud environment this parameter will indicate to which partition number domain group related messages are produced for 'Partition2' category service topics.
	// Read Only: true
	Partition2 int64 `json:"Partition2,omitempty"`

	// In a cloud environment this parameter will indicate to which partition number domain group related messages are produced for 'Partition3' category service topics.
	// Read Only: true
	Partition3 int64 `json:"Partition3,omitempty"`

	// Partition key used for producing messages to Kafka partitions. By default Domain-group id will be used as parition key. For Domain-groups belonging to Early adopters domain-group id will be prefixed with 'H' and used as partition key, such partition key will be treated differently and messages will always be produced to partition 0.
	// Read Only: true
	PartitionKey string `json:"PartitionKey,omitempty"`

	// The number of devices in the domain-group.
	// Device registration notifications are processed to update the usage of the domain-group. The on-boarding account will have multiple domain-groups, and during the device registration least used domain-group will be selected for the device.
	// Read Only: true
	Usage int64 `json:"Usage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamDomainGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Name string `json:"Name,omitempty"`

		Partition1 int64 `json:"Partition1,omitempty"`

		Partition2 int64 `json:"Partition2,omitempty"`

		Partition3 int64 `json:"Partition3,omitempty"`

		PartitionKey string `json:"PartitionKey,omitempty"`

		Usage int64 `json:"Usage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Name = dataAO1.Name

	m.Partition1 = dataAO1.Partition1

	m.Partition2 = dataAO1.Partition2

	m.Partition3 = dataAO1.Partition3

	m.PartitionKey = dataAO1.PartitionKey

	m.Usage = dataAO1.Usage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamDomainGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Name string `json:"Name,omitempty"`

		Partition1 int64 `json:"Partition1,omitempty"`

		Partition2 int64 `json:"Partition2,omitempty"`

		Partition3 int64 `json:"Partition3,omitempty"`

		PartitionKey string `json:"PartitionKey,omitempty"`

		Usage int64 `json:"Usage,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Name = m.Name

	dataAO1.Partition1 = m.Partition1

	dataAO1.Partition2 = m.Partition2

	dataAO1.Partition3 = m.Partition3

	dataAO1.PartitionKey = m.PartitionKey

	dataAO1.Usage = m.Usage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam domain group
func (m *IamDomainGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamDomainGroup) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamDomainGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamDomainGroup) UnmarshalBinary(b []byte) error {
	var res IamDomainGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
