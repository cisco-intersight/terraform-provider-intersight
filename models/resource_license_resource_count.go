// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceLicenseResourceCount Resource:License Resource Count
//
// LicenseResourceCount tracks the server count info for 3 different licensing tiers.
//
// swagger:model resourceLicenseResourceCount
type ResourceLicenseResourceCount struct {
	MoBaseMo

	// The account to which this resource group belongs to.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The list of all license groups bind with this server count object.
	// Read Only: true
	LicenseGroups []*ResourceGroupRef `json:"LicenseGroups"`

	// Type of licensing defined for this resource group. Used for licensing group.
	// Read Only: true
	// Enum: [Base Essential Standard Advantage Premier]
	LicenseType string `json:"LicenseType,omitempty"`

	// The number of resource belongs to this licensing tier.
	// Read Only: true
	ResourceCount int64 `json:"ResourceCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ResourceLicenseResourceCount) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		LicenseGroups []*ResourceGroupRef `json:"LicenseGroups"`

		LicenseType string `json:"LicenseType,omitempty"`

		ResourceCount int64 `json:"ResourceCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.LicenseGroups = dataAO1.LicenseGroups

	m.LicenseType = dataAO1.LicenseType

	m.ResourceCount = dataAO1.ResourceCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ResourceLicenseResourceCount) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		LicenseGroups []*ResourceGroupRef `json:"LicenseGroups"`

		LicenseType string `json:"LicenseType,omitempty"`

		ResourceCount int64 `json:"ResourceCount,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.LicenseGroups = m.LicenseGroups

	dataAO1.LicenseType = m.LicenseType

	dataAO1.ResourceCount = m.ResourceCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this resource license resource count
func (m *ResourceLicenseResourceCount) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceLicenseResourceCount) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceLicenseResourceCount) validateLicenseGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseGroups); i++ {
		if swag.IsZero(m.LicenseGroups[i]) { // not required
			continue
		}

		if m.LicenseGroups[i] != nil {
			if err := m.LicenseGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LicenseGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var resourceLicenseResourceCountTypeLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Base","Essential","Standard","Advantage","Premier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceLicenseResourceCountTypeLicenseTypePropEnum = append(resourceLicenseResourceCountTypeLicenseTypePropEnum, v)
	}
}

// property enum
func (m *ResourceLicenseResourceCount) validateLicenseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceLicenseResourceCountTypeLicenseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceLicenseResourceCount) validateLicenseType(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseTypeEnum("LicenseType", "body", m.LicenseType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceLicenseResourceCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceLicenseResourceCount) UnmarshalBinary(b []byte) error {
	var res ResourceLicenseResourceCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
