// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperflexCluster Hyperflex:Cluster
//
// A HyperFlex cluster. Contains inventory information concerning the health, software versions, storage, and nodes
// of the cluster.
//
// swagger:model hyperflexCluster
type HyperflexCluster struct {
	MoBaseMo

	// The alarms that have been raised for this HyperFlex cluster.
	// New alarms are added to this collection, and existing alarms are updated if the severity changes.
	// Deleted alarms are not removed but are cleared by marking them as green.
	// Read Only: true
	Alarm []*HyperflexAlarmRef `json:"Alarm"`

	// The number of days remaining before the cluster's storage utilization reaches the recommended capacity limit of 76%.
	// Default value is math.MaxInt32 to indicate that the capacity runway is "Unknown" for a cluster that is not connected or with not sufficient data.
	// Read Only: true
	CapacityRunway int64 `json:"CapacityRunway,omitempty"`

	// The name of this HyperFlex cluster.
	// Read Only: true
	ClusterName string `json:"ClusterName,omitempty"`

	// The storage type of this cluster (All Flash or Hybrid).
	// Read Only: true
	ClusterType int64 `json:"ClusterType,omitempty"`

	// The unique identifier for this HyperFlex cluster.
	// Read Only: true
	ClusterUUID string `json:"ClusterUuid,omitempty"`

	// The number of compute nodes that belong to this cluster.
	// Read Only: true
	ComputeNodeCount int64 `json:"ComputeNodeCount,omitempty"`

	// The number of converged nodes that belong to this cluster.
	// Read Only: true
	ConvergedNodeCount int64 `json:"ConvergedNodeCount,omitempty"`

	// The deployment type of the HyperFlex cluster.
	// The cluster can have one of the following configurations:
	// 1. Datacenter: The HyperFlex cluster consists of UCS Fabric Interconnect-attached nodes on a single site.
	// 2. Stretched Cluster: The HyperFlex cluster consists of UCS Fabric Interconnect-attached nodes distributed across multiple sites.
	// 3. Edge: The HyperFlex cluster consists of 2-4 standalone nodes.
	// If the cluster is running a HyperFlex Data Platform version less than 4.0 or if the deployment type cannot be determined,
	// the deployment type is set as 'NA' (not available).
	// Read Only: true
	// Enum: [NA Datacenter Stretched Cluster Edge]
	DeploymentType string `json:"DeploymentType,omitempty"`

	// The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
	// Read Only: true
	DeviceID string `json:"DeviceId,omitempty"`

	// The number of yellow (warning) and red (critical) alarms stored as an aggregate.
	// The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
	// Read Only: true
	FltAggr int64 `json:"FltAggr,omitempty"`

	// The health of the HyperFlex cluster.
	// Detailed information concerning the cluster health, which includes cluster operational status, resiliency health status,
	// number of node and disk failues tolerable, and the status of services such as the ZooKeeper ensemble and arbitration service.
	// This relationship is only populated for devices with HyperFlex Data Platform 3.0+. For clusters running an older version, refer
	// to the Summary property of the hyperflex/Clusters API.
	// Read Only: true
	Health *HyperflexHealthRef `json:"Health,omitempty"`

	// The HyperFlex Data Platform version of this cluster.
	// Read Only: true
	HxVersion string `json:"HxVersion,omitempty"`

	// The version and build number of the HyperFlex Data Platform for this cluster.
	// After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect
	// the newly installed version.
	// Read Only: true
	HxdpBuildVersion string `json:"HxdpBuildVersion,omitempty"`

	// The type of hypervisor running on this cluster.
	// Read Only: true
	// Enum: [ESXi]
	HypervisorType string `json:"HypervisorType,omitempty"`

	// The version of hypervisor running on this cluster.
	// Read Only: true
	HypervisorVersion string `json:"HypervisorVersion,omitempty"`

	// The nodes belonging to this HyperFlex cluster.
	// The node object contains inventory information about a specific HyperFlex node, such as host IP address,
	// hypervisor type and version, and operational status.
	// Read Only: true
	Nodes []*HyperflexNodeRef `json:"Nodes"`

	// The registration that represents this HyperFlex cluster's connection to Intersight.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The summary of HyperFlex cluster health, storage, and number of nodes.
	// Read Only: true
	Summary *HyperflexSummary `json:"Summary,omitempty"`

	// The storage utilization percentage is computed based on total capacity and current capacity utilization.
	// Read Only: true
	UtilizationPercentage float32 `json:"UtilizationPercentage,omitempty"`

	// The storage utilization trend percentage represents the trend in percentage computed using the first and last point from historical data.
	// Read Only: true
	UtilizationTrendPercentage float32 `json:"UtilizationTrendPercentage,omitempty"`

	// The number of virtual machines present on this cluster.
	// Read Only: true
	VMCount int64 `json:"VmCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexCluster) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Alarm []*HyperflexAlarmRef `json:"Alarm"`

		CapacityRunway int64 `json:"CapacityRunway,omitempty"`

		ClusterName string `json:"ClusterName,omitempty"`

		ClusterType int64 `json:"ClusterType,omitempty"`

		ClusterUUID string `json:"ClusterUuid,omitempty"`

		ComputeNodeCount int64 `json:"ComputeNodeCount,omitempty"`

		ConvergedNodeCount int64 `json:"ConvergedNodeCount,omitempty"`

		DeploymentType string `json:"DeploymentType,omitempty"`

		DeviceID string `json:"DeviceId,omitempty"`

		FltAggr int64 `json:"FltAggr,omitempty"`

		Health *HyperflexHealthRef `json:"Health,omitempty"`

		HxVersion string `json:"HxVersion,omitempty"`

		HxdpBuildVersion string `json:"HxdpBuildVersion,omitempty"`

		HypervisorType string `json:"HypervisorType,omitempty"`

		HypervisorVersion string `json:"HypervisorVersion,omitempty"`

		Nodes []*HyperflexNodeRef `json:"Nodes"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Summary *HyperflexSummary `json:"Summary,omitempty"`

		UtilizationPercentage float32 `json:"UtilizationPercentage,omitempty"`

		UtilizationTrendPercentage float32 `json:"UtilizationTrendPercentage,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Alarm = dataAO1.Alarm

	m.CapacityRunway = dataAO1.CapacityRunway

	m.ClusterName = dataAO1.ClusterName

	m.ClusterType = dataAO1.ClusterType

	m.ClusterUUID = dataAO1.ClusterUUID

	m.ComputeNodeCount = dataAO1.ComputeNodeCount

	m.ConvergedNodeCount = dataAO1.ConvergedNodeCount

	m.DeploymentType = dataAO1.DeploymentType

	m.DeviceID = dataAO1.DeviceID

	m.FltAggr = dataAO1.FltAggr

	m.Health = dataAO1.Health

	m.HxVersion = dataAO1.HxVersion

	m.HxdpBuildVersion = dataAO1.HxdpBuildVersion

	m.HypervisorType = dataAO1.HypervisorType

	m.HypervisorVersion = dataAO1.HypervisorVersion

	m.Nodes = dataAO1.Nodes

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Summary = dataAO1.Summary

	m.UtilizationPercentage = dataAO1.UtilizationPercentage

	m.UtilizationTrendPercentage = dataAO1.UtilizationTrendPercentage

	m.VMCount = dataAO1.VMCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexCluster) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Alarm []*HyperflexAlarmRef `json:"Alarm"`

		CapacityRunway int64 `json:"CapacityRunway,omitempty"`

		ClusterName string `json:"ClusterName,omitempty"`

		ClusterType int64 `json:"ClusterType,omitempty"`

		ClusterUUID string `json:"ClusterUuid,omitempty"`

		ComputeNodeCount int64 `json:"ComputeNodeCount,omitempty"`

		ConvergedNodeCount int64 `json:"ConvergedNodeCount,omitempty"`

		DeploymentType string `json:"DeploymentType,omitempty"`

		DeviceID string `json:"DeviceId,omitempty"`

		FltAggr int64 `json:"FltAggr,omitempty"`

		Health *HyperflexHealthRef `json:"Health,omitempty"`

		HxVersion string `json:"HxVersion,omitempty"`

		HxdpBuildVersion string `json:"HxdpBuildVersion,omitempty"`

		HypervisorType string `json:"HypervisorType,omitempty"`

		HypervisorVersion string `json:"HypervisorVersion,omitempty"`

		Nodes []*HyperflexNodeRef `json:"Nodes"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Summary *HyperflexSummary `json:"Summary,omitempty"`

		UtilizationPercentage float32 `json:"UtilizationPercentage,omitempty"`

		UtilizationTrendPercentage float32 `json:"UtilizationTrendPercentage,omitempty"`

		VMCount int64 `json:"VmCount,omitempty"`
	}

	dataAO1.Alarm = m.Alarm

	dataAO1.CapacityRunway = m.CapacityRunway

	dataAO1.ClusterName = m.ClusterName

	dataAO1.ClusterType = m.ClusterType

	dataAO1.ClusterUUID = m.ClusterUUID

	dataAO1.ComputeNodeCount = m.ComputeNodeCount

	dataAO1.ConvergedNodeCount = m.ConvergedNodeCount

	dataAO1.DeploymentType = m.DeploymentType

	dataAO1.DeviceID = m.DeviceID

	dataAO1.FltAggr = m.FltAggr

	dataAO1.Health = m.Health

	dataAO1.HxVersion = m.HxVersion

	dataAO1.HxdpBuildVersion = m.HxdpBuildVersion

	dataAO1.HypervisorType = m.HypervisorType

	dataAO1.HypervisorVersion = m.HypervisorVersion

	dataAO1.Nodes = m.Nodes

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Summary = m.Summary

	dataAO1.UtilizationPercentage = m.UtilizationPercentage

	dataAO1.UtilizationTrendPercentage = m.UtilizationTrendPercentage

	dataAO1.VMCount = m.VMCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex cluster
func (m *HyperflexCluster) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexCluster) validateAlarm(formats strfmt.Registry) error {

	if swag.IsZero(m.Alarm) { // not required
		return nil
	}

	for i := 0; i < len(m.Alarm); i++ {
		if swag.IsZero(m.Alarm[i]) { // not required
			continue
		}

		if m.Alarm[i] != nil {
			if err := m.Alarm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Alarm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hyperflexClusterTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","Datacenter","Stretched Cluster","Edge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexClusterTypeDeploymentTypePropEnum = append(hyperflexClusterTypeDeploymentTypePropEnum, v)
	}
}

// property enum
func (m *HyperflexCluster) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexClusterTypeDeploymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexCluster) validateDeploymentType(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("DeploymentType", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

func (m *HyperflexCluster) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Health")
			}
			return err
		}
	}

	return nil
}

var hyperflexClusterTypeHypervisorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ESXi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexClusterTypeHypervisorTypePropEnum = append(hyperflexClusterTypeHypervisorTypePropEnum, v)
	}
}

// property enum
func (m *HyperflexCluster) validateHypervisorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexClusterTypeHypervisorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexCluster) validateHypervisorType(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervisorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHypervisorTypeEnum("HypervisorType", "body", m.HypervisorType); err != nil {
		return err
	}

	return nil
}

func (m *HyperflexCluster) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HyperflexCluster) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *HyperflexCluster) validateSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexCluster) UnmarshalBinary(b []byte) error {
	var res HyperflexCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
