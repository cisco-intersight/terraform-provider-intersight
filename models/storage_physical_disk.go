// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePhysicalDisk Storage:Physical Disk
//
// Physical Disk on a server.
//
// swagger:model storagePhysicalDisk
type StoragePhysicalDisk struct {
	EquipmentBase

	// The block size of the physical disk.
	// Read Only: true
	BlockSize string `json:"BlockSize,omitempty"`

	// bootable
	// Read Only: true
	Bootable string `json:"Bootable,omitempty"`

	// configuration checkpoint
	// Read Only: true
	ConfigurationCheckpoint string `json:"ConfigurationCheckpoint,omitempty"`

	// configuration state
	// Read Only: true
	ConfigurationState string `json:"ConfigurationState,omitempty"`

	// discovered path
	// Read Only: true
	DiscoveredPath string `json:"DiscoveredPath,omitempty"`

	// disk Id
	// Read Only: true
	DiskID string `json:"DiskId,omitempty"`

	// This field identifies the health of the disk.
	// Read Only: true
	DiskState string `json:"DiskState,omitempty"`

	// drive firmware
	DriveFirmware string `json:"DriveFirmware,omitempty"`

	// drive state
	// Read Only: true
	DriveState string `json:"DriveState,omitempty"`

	// fde capable
	FdeCapable string `json:"FdeCapable,omitempty"`

	// link speed
	// Read Only: true
	LinkSpeed string `json:"LinkSpeed,omitempty"`

	// link state
	// Read Only: true
	LinkState string `json:"LinkState,omitempty"`

	// locator led
	// Read Only: true
	LocatorLed *EquipmentLocatorLedRef `json:"LocatorLed,omitempty"`

	// The number of blocks present on the physical disk.
	// Read Only: true
	NumBlocks string `json:"NumBlocks,omitempty"`

	// oper power state
	// Read Only: true
	OperPowerState string `json:"OperPowerState,omitempty"`

	// oper qualifier reason
	// Read Only: true
	OperQualifierReason string `json:"OperQualifierReason,omitempty"`

	// operability
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// physical block size
	// Read Only: true
	PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

	// The physical connectivity between a SCSI controller and physical disks.
	PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

	// This field identifies the Product ID for physicalDisk.
	// Read Only: true
	Pid string `json:"Pid,omitempty"`

	// presence
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// protocol
	// Read Only: true
	Protocol string `json:"Protocol,omitempty"`

	// raw size
	// Read Only: true
	RawSize string `json:"RawSize,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// running firmware
	// Read Only: true
	RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

	// It is a reference to SAS Port to physical disk.
	// Read Only: true
	SasPorts []*StorageSasPortRef `json:"SasPorts"`

	// This field identifies whether the disk is encrypted.
	Secured string `json:"Secured,omitempty"`

	// size
	// Read Only: true
	Size string `json:"Size,omitempty"`

	// A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.
	// When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageController *StorageControllerRef `json:"StorageController,omitempty"`

	// A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.
	// When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`

	// thermal
	// Read Only: true
	Thermal string `json:"Thermal,omitempty"`

	// type
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// variant type
	// Read Only: true
	VariantType string `json:"VariantType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePhysicalDisk) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		Bootable string `json:"Bootable,omitempty"`

		ConfigurationCheckpoint string `json:"ConfigurationCheckpoint,omitempty"`

		ConfigurationState string `json:"ConfigurationState,omitempty"`

		DiscoveredPath string `json:"DiscoveredPath,omitempty"`

		DiskID string `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		DriveFirmware string `json:"DriveFirmware,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		FdeCapable string `json:"FdeCapable,omitempty"`

		LinkSpeed string `json:"LinkSpeed,omitempty"`

		LinkState string `json:"LinkState,omitempty"`

		LocatorLed *EquipmentLocatorLedRef `json:"LocatorLed,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperQualifierReason string `json:"OperQualifierReason,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

		PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		RawSize string `json:"RawSize,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		SasPorts []*StorageSasPortRef `json:"SasPorts"`

		Secured string `json:"Secured,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Type string `json:"Type,omitempty"`

		VariantType string `json:"VariantType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BlockSize = dataAO1.BlockSize

	m.Bootable = dataAO1.Bootable

	m.ConfigurationCheckpoint = dataAO1.ConfigurationCheckpoint

	m.ConfigurationState = dataAO1.ConfigurationState

	m.DiscoveredPath = dataAO1.DiscoveredPath

	m.DiskID = dataAO1.DiskID

	m.DiskState = dataAO1.DiskState

	m.DriveFirmware = dataAO1.DriveFirmware

	m.DriveState = dataAO1.DriveState

	m.FdeCapable = dataAO1.FdeCapable

	m.LinkSpeed = dataAO1.LinkSpeed

	m.LinkState = dataAO1.LinkState

	m.LocatorLed = dataAO1.LocatorLed

	m.NumBlocks = dataAO1.NumBlocks

	m.OperPowerState = dataAO1.OperPowerState

	m.OperQualifierReason = dataAO1.OperQualifierReason

	m.Operability = dataAO1.Operability

	m.PhysicalBlockSize = dataAO1.PhysicalBlockSize

	m.PhysicalDiskExtensions = dataAO1.PhysicalDiskExtensions

	m.Pid = dataAO1.Pid

	m.Presence = dataAO1.Presence

	m.Protocol = dataAO1.Protocol

	m.RawSize = dataAO1.RawSize

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.RunningFirmware = dataAO1.RunningFirmware

	m.SasPorts = dataAO1.SasPorts

	m.Secured = dataAO1.Secured

	m.Size = dataAO1.Size

	m.StorageController = dataAO1.StorageController

	m.StorageEnclosure = dataAO1.StorageEnclosure

	m.Thermal = dataAO1.Thermal

	m.Type = dataAO1.Type

	m.VariantType = dataAO1.VariantType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePhysicalDisk) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BlockSize string `json:"BlockSize,omitempty"`

		Bootable string `json:"Bootable,omitempty"`

		ConfigurationCheckpoint string `json:"ConfigurationCheckpoint,omitempty"`

		ConfigurationState string `json:"ConfigurationState,omitempty"`

		DiscoveredPath string `json:"DiscoveredPath,omitempty"`

		DiskID string `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		DriveFirmware string `json:"DriveFirmware,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		FdeCapable string `json:"FdeCapable,omitempty"`

		LinkSpeed string `json:"LinkSpeed,omitempty"`

		LinkState string `json:"LinkState,omitempty"`

		LocatorLed *EquipmentLocatorLedRef `json:"LocatorLed,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperQualifierReason string `json:"OperQualifierReason,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

		PhysicalDiskExtensions []*StoragePhysicalDiskExtensionRef `json:"PhysicalDiskExtensions"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		Protocol string `json:"Protocol,omitempty"`

		RawSize string `json:"RawSize,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RunningFirmware []*FirmwareRunningFirmwareRef `json:"RunningFirmware"`

		SasPorts []*StorageSasPortRef `json:"SasPorts"`

		Secured string `json:"Secured,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		StorageEnclosure *StorageEnclosureRef `json:"StorageEnclosure,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Type string `json:"Type,omitempty"`

		VariantType string `json:"VariantType,omitempty"`
	}

	dataAO1.BlockSize = m.BlockSize

	dataAO1.Bootable = m.Bootable

	dataAO1.ConfigurationCheckpoint = m.ConfigurationCheckpoint

	dataAO1.ConfigurationState = m.ConfigurationState

	dataAO1.DiscoveredPath = m.DiscoveredPath

	dataAO1.DiskID = m.DiskID

	dataAO1.DiskState = m.DiskState

	dataAO1.DriveFirmware = m.DriveFirmware

	dataAO1.DriveState = m.DriveState

	dataAO1.FdeCapable = m.FdeCapable

	dataAO1.LinkSpeed = m.LinkSpeed

	dataAO1.LinkState = m.LinkState

	dataAO1.LocatorLed = m.LocatorLed

	dataAO1.NumBlocks = m.NumBlocks

	dataAO1.OperPowerState = m.OperPowerState

	dataAO1.OperQualifierReason = m.OperQualifierReason

	dataAO1.Operability = m.Operability

	dataAO1.PhysicalBlockSize = m.PhysicalBlockSize

	dataAO1.PhysicalDiskExtensions = m.PhysicalDiskExtensions

	dataAO1.Pid = m.Pid

	dataAO1.Presence = m.Presence

	dataAO1.Protocol = m.Protocol

	dataAO1.RawSize = m.RawSize

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.RunningFirmware = m.RunningFirmware

	dataAO1.SasPorts = m.SasPorts

	dataAO1.Secured = m.Secured

	dataAO1.Size = m.Size

	dataAO1.StorageController = m.StorageController

	dataAO1.StorageEnclosure = m.StorageEnclosure

	dataAO1.Thermal = m.Thermal

	dataAO1.Type = m.Type

	dataAO1.VariantType = m.VariantType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage physical disk
func (m *StoragePhysicalDisk) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocatorLed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDiskExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSasPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEnclosure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePhysicalDisk) validateLocatorLed(formats strfmt.Registry) error {

	if swag.IsZero(m.LocatorLed) { // not required
		return nil
	}

	if m.LocatorLed != nil {
		if err := m.LocatorLed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LocatorLed")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePhysicalDisk) validatePhysicalDiskExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDiskExtensions) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalDiskExtensions); i++ {
		if swag.IsZero(m.PhysicalDiskExtensions[i]) { // not required
			continue
		}

		if m.PhysicalDiskExtensions[i] != nil {
			if err := m.PhysicalDiskExtensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PhysicalDiskExtensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePhysicalDisk) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePhysicalDisk) validateRunningFirmware(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningFirmware) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningFirmware); i++ {
		if swag.IsZero(m.RunningFirmware[i]) { // not required
			continue
		}

		if m.RunningFirmware[i] != nil {
			if err := m.RunningFirmware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RunningFirmware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePhysicalDisk) validateSasPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.SasPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.SasPorts); i++ {
		if swag.IsZero(m.SasPorts[i]) { // not required
			continue
		}

		if m.SasPorts[i] != nil {
			if err := m.SasPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SasPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePhysicalDisk) validateStorageController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageController) { // not required
		return nil
	}

	if m.StorageController != nil {
		if err := m.StorageController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageController")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePhysicalDisk) validateStorageEnclosure(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageEnclosure) { // not required
		return nil
	}

	if m.StorageEnclosure != nil {
		if err := m.StorageEnclosure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageEnclosure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePhysicalDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePhysicalDisk) UnmarshalBinary(b []byte) error {
	var res StoragePhysicalDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
