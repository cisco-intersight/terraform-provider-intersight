// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclFirmware Hcl:Firmware
//
// Model which holds the details of firmware version and driver version.
//
// swagger:model hclFirmware
type HclFirmware struct {
	MoBaseComplexType

	HclFirmwareAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclFirmware) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 HclFirmwareAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HclFirmwareAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclFirmware) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HclFirmwareAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl firmware
func (m *HclFirmware) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HclFirmwareAO1P1
	if err := m.HclFirmwareAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HclFirmware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclFirmware) UnmarshalBinary(b []byte) error {
	var res HclFirmware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HclFirmwareAO1P1 hcl firmware a o1 p1
//
// swagger:model HclFirmwareAO1P1
type HclFirmwareAO1P1 struct {

	// Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.
	DriverName string `json:"DriverName,omitempty"`

	// Version of the Driver supported.
	DriverVersion string `json:"DriverVersion,omitempty"`

	// Error code for the support status.
	// Read Only: true
	// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
	ErrorCode string `json:"ErrorCode,omitempty"`

	// Firmware version of the product/adapter supported.
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// Identifier of the firmware.
	ID string `json:"Id,omitempty"`

	// True if the driver is latest recommended driver.
	// Read Only: true
	LatestDriver *bool `json:"LatestDriver,omitempty"`

	// True if the firmware is latest recommended firmware.
	// Read Only: true
	LatestFirmware *bool `json:"LatestFirmware,omitempty"`

	// hcl firmware a o1 p1
	HclFirmwareAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HclFirmwareAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.
		DriverName string `json:"DriverName,omitempty"`

		// Version of the Driver supported.
		DriverVersion string `json:"DriverVersion,omitempty"`

		// Error code for the support status.
		// Read Only: true
		// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
		ErrorCode string `json:"ErrorCode,omitempty"`

		// Firmware version of the product/adapter supported.
		FirmwareVersion string `json:"FirmwareVersion,omitempty"`

		// Identifier of the firmware.
		ID string `json:"Id,omitempty"`

		// True if the driver is latest recommended driver.
		// Read Only: true
		LatestDriver *bool `json:"LatestDriver,omitempty"`

		// True if the firmware is latest recommended firmware.
		// Read Only: true
		LatestFirmware *bool `json:"LatestFirmware,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HclFirmwareAO1P1

	rcv.DriverName = stage1.DriverName
	rcv.DriverVersion = stage1.DriverVersion
	rcv.ErrorCode = stage1.ErrorCode
	rcv.FirmwareVersion = stage1.FirmwareVersion
	rcv.ID = stage1.ID
	rcv.LatestDriver = stage1.LatestDriver
	rcv.LatestFirmware = stage1.LatestFirmware
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "DriverName")
	delete(stage2, "DriverVersion")
	delete(stage2, "ErrorCode")
	delete(stage2, "FirmwareVersion")
	delete(stage2, "Id")
	delete(stage2, "LatestDriver")
	delete(stage2, "LatestFirmware")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HclFirmwareAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HclFirmwareAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.
		DriverName string `json:"DriverName,omitempty"`

		// Version of the Driver supported.
		DriverVersion string `json:"DriverVersion,omitempty"`

		// Error code for the support status.
		// Read Only: true
		// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
		ErrorCode string `json:"ErrorCode,omitempty"`

		// Firmware version of the product/adapter supported.
		FirmwareVersion string `json:"FirmwareVersion,omitempty"`

		// Identifier of the firmware.
		ID string `json:"Id,omitempty"`

		// True if the driver is latest recommended driver.
		// Read Only: true
		LatestDriver *bool `json:"LatestDriver,omitempty"`

		// True if the firmware is latest recommended firmware.
		// Read Only: true
		LatestFirmware *bool `json:"LatestFirmware,omitempty"`
	}

	stage1.DriverName = m.DriverName
	stage1.DriverVersion = m.DriverVersion
	stage1.ErrorCode = m.ErrorCode
	stage1.FirmwareVersion = m.FirmwareVersion
	stage1.ID = m.ID
	stage1.LatestDriver = m.LatestDriver
	stage1.LatestFirmware = m.LatestFirmware

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HclFirmwareAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HclFirmwareAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hcl firmware a o1 p1
func (m *HclFirmwareAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hclFirmwareAO1P1TypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Unknown","UnknownServer","InvalidUcsVersion","ProcessorNotSupported","OSNotSupported","OSUnknown","UCSVersionNotSupported","UcsVersionServerOSCombinationNotSupported","ProductUnknown","ProductNotSupported","DriverNameNotSupported","FirmwareVersionNotSupported","DriverVersionNotSupported","FirmwareVersionDriverVersionCombinationNotSupported","FirmwareVersionAndDriverVersionNotSupported","FirmwareVersionAndDriverNameNotSupported","InternalError","MarshallingError","Exempted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclFirmwareAO1P1TypeErrorCodePropEnum = append(hclFirmwareAO1P1TypeErrorCodePropEnum, v)
	}
}

const (

	// HclFirmwareAO1P1ErrorCodeSuccess captures enum value "Success"
	HclFirmwareAO1P1ErrorCodeSuccess string = "Success"

	// HclFirmwareAO1P1ErrorCodeUnknown captures enum value "Unknown"
	HclFirmwareAO1P1ErrorCodeUnknown string = "Unknown"

	// HclFirmwareAO1P1ErrorCodeUnknownServer captures enum value "UnknownServer"
	HclFirmwareAO1P1ErrorCodeUnknownServer string = "UnknownServer"

	// HclFirmwareAO1P1ErrorCodeInvalidUcsVersion captures enum value "InvalidUcsVersion"
	HclFirmwareAO1P1ErrorCodeInvalidUcsVersion string = "InvalidUcsVersion"

	// HclFirmwareAO1P1ErrorCodeProcessorNotSupported captures enum value "ProcessorNotSupported"
	HclFirmwareAO1P1ErrorCodeProcessorNotSupported string = "ProcessorNotSupported"

	// HclFirmwareAO1P1ErrorCodeOSNotSupported captures enum value "OSNotSupported"
	HclFirmwareAO1P1ErrorCodeOSNotSupported string = "OSNotSupported"

	// HclFirmwareAO1P1ErrorCodeOSUnknown captures enum value "OSUnknown"
	HclFirmwareAO1P1ErrorCodeOSUnknown string = "OSUnknown"

	// HclFirmwareAO1P1ErrorCodeUCSVersionNotSupported captures enum value "UCSVersionNotSupported"
	HclFirmwareAO1P1ErrorCodeUCSVersionNotSupported string = "UCSVersionNotSupported"

	// HclFirmwareAO1P1ErrorCodeUcsVersionServerOSCombinationNotSupported captures enum value "UcsVersionServerOSCombinationNotSupported"
	HclFirmwareAO1P1ErrorCodeUcsVersionServerOSCombinationNotSupported string = "UcsVersionServerOSCombinationNotSupported"

	// HclFirmwareAO1P1ErrorCodeProductUnknown captures enum value "ProductUnknown"
	HclFirmwareAO1P1ErrorCodeProductUnknown string = "ProductUnknown"

	// HclFirmwareAO1P1ErrorCodeProductNotSupported captures enum value "ProductNotSupported"
	HclFirmwareAO1P1ErrorCodeProductNotSupported string = "ProductNotSupported"

	// HclFirmwareAO1P1ErrorCodeDriverNameNotSupported captures enum value "DriverNameNotSupported"
	HclFirmwareAO1P1ErrorCodeDriverNameNotSupported string = "DriverNameNotSupported"

	// HclFirmwareAO1P1ErrorCodeFirmwareVersionNotSupported captures enum value "FirmwareVersionNotSupported"
	HclFirmwareAO1P1ErrorCodeFirmwareVersionNotSupported string = "FirmwareVersionNotSupported"

	// HclFirmwareAO1P1ErrorCodeDriverVersionNotSupported captures enum value "DriverVersionNotSupported"
	HclFirmwareAO1P1ErrorCodeDriverVersionNotSupported string = "DriverVersionNotSupported"

	// HclFirmwareAO1P1ErrorCodeFirmwareVersionDriverVersionCombinationNotSupported captures enum value "FirmwareVersionDriverVersionCombinationNotSupported"
	HclFirmwareAO1P1ErrorCodeFirmwareVersionDriverVersionCombinationNotSupported string = "FirmwareVersionDriverVersionCombinationNotSupported"

	// HclFirmwareAO1P1ErrorCodeFirmwareVersionAndDriverVersionNotSupported captures enum value "FirmwareVersionAndDriverVersionNotSupported"
	HclFirmwareAO1P1ErrorCodeFirmwareVersionAndDriverVersionNotSupported string = "FirmwareVersionAndDriverVersionNotSupported"

	// HclFirmwareAO1P1ErrorCodeFirmwareVersionAndDriverNameNotSupported captures enum value "FirmwareVersionAndDriverNameNotSupported"
	HclFirmwareAO1P1ErrorCodeFirmwareVersionAndDriverNameNotSupported string = "FirmwareVersionAndDriverNameNotSupported"

	// HclFirmwareAO1P1ErrorCodeInternalError captures enum value "InternalError"
	HclFirmwareAO1P1ErrorCodeInternalError string = "InternalError"

	// HclFirmwareAO1P1ErrorCodeMarshallingError captures enum value "MarshallingError"
	HclFirmwareAO1P1ErrorCodeMarshallingError string = "MarshallingError"

	// HclFirmwareAO1P1ErrorCodeExempted captures enum value "Exempted"
	HclFirmwareAO1P1ErrorCodeExempted string = "Exempted"
)

// prop value enum
func (m *HclFirmwareAO1P1) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclFirmwareAO1P1TypeErrorCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclFirmwareAO1P1) validateErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorCodeEnum("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclFirmwareAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclFirmwareAO1P1) UnmarshalBinary(b []byte) error {
	var res HclFirmwareAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
