// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamAdvisoryInstance Tam:Advisory Instance
//
// Instance of an Intersight advisory applicable for an Intersight managed object. An advisory instance is created when a given advisory is found applicable for an Intersight managed object. An advisory instance is retained for some time even after being cleared for historical purposes. A 'cleared' advisory instance is deleted after the retention time is elaspsed.
//
// swagger:model tamAdvisoryInstance
type TamAdvisoryInstance struct {
	MoBaseMo

	// Reference to the Intersight advisory affecting the managed object.
	Advisory *TamAdvisoryRef `json:"Advisory,omitempty"`

	// Reference to the Intersight managed object afftected by the advisory.
	AffectedObject *MoBaseMoRef `json:"AffectedObject,omitempty"`

	// Moid of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.
	AffectedObjectMoid string `json:"AffectedObjectMoid,omitempty"`

	// Object type of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.
	AffectedObjectType string `json:"AffectedObjectType,omitempty"`

	// Device registation reference for the managed object affected by a given advisory instance. The managed object itself is represented using 'affectedObject' reference.
	DeviceRegistration *AssetDeviceRegistrationRef `json:"DeviceRegistration,omitempty"`

	// Timestamp when a state change was observed on this advisory instnace.
	// Read Only: true
	// Format: date-time
	LastStateChangeTime strfmt.DateTime `json:"LastStateChangeTime,omitempty"`

	// Timestamp when this advisory was last evaluated.
	// Read Only: true
	// Format: date-time
	LastVerifiedTime strfmt.DateTime `json:"LastVerifiedTime,omitempty"`

	// Current state of the advisory instance (Active/Cleared/Unknown etc.).
	// Enum: [unknown active cleared]
	State *string `json:"State,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamAdvisoryInstance) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Advisory *TamAdvisoryRef `json:"Advisory,omitempty"`

		AffectedObject *MoBaseMoRef `json:"AffectedObject,omitempty"`

		AffectedObjectMoid string `json:"AffectedObjectMoid,omitempty"`

		AffectedObjectType string `json:"AffectedObjectType,omitempty"`

		DeviceRegistration *AssetDeviceRegistrationRef `json:"DeviceRegistration,omitempty"`

		LastStateChangeTime strfmt.DateTime `json:"LastStateChangeTime,omitempty"`

		LastVerifiedTime strfmt.DateTime `json:"LastVerifiedTime,omitempty"`

		State *string `json:"State,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Advisory = dataAO1.Advisory

	m.AffectedObject = dataAO1.AffectedObject

	m.AffectedObjectMoid = dataAO1.AffectedObjectMoid

	m.AffectedObjectType = dataAO1.AffectedObjectType

	m.DeviceRegistration = dataAO1.DeviceRegistration

	m.LastStateChangeTime = dataAO1.LastStateChangeTime

	m.LastVerifiedTime = dataAO1.LastVerifiedTime

	m.State = dataAO1.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamAdvisoryInstance) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Advisory *TamAdvisoryRef `json:"Advisory,omitempty"`

		AffectedObject *MoBaseMoRef `json:"AffectedObject,omitempty"`

		AffectedObjectMoid string `json:"AffectedObjectMoid,omitempty"`

		AffectedObjectType string `json:"AffectedObjectType,omitempty"`

		DeviceRegistration *AssetDeviceRegistrationRef `json:"DeviceRegistration,omitempty"`

		LastStateChangeTime strfmt.DateTime `json:"LastStateChangeTime,omitempty"`

		LastVerifiedTime strfmt.DateTime `json:"LastVerifiedTime,omitempty"`

		State *string `json:"State,omitempty"`
	}

	dataAO1.Advisory = m.Advisory

	dataAO1.AffectedObject = m.AffectedObject

	dataAO1.AffectedObjectMoid = m.AffectedObjectMoid

	dataAO1.AffectedObjectType = m.AffectedObjectType

	dataAO1.DeviceRegistration = m.DeviceRegistration

	dataAO1.LastStateChangeTime = m.LastStateChangeTime

	dataAO1.LastVerifiedTime = m.LastVerifiedTime

	dataAO1.State = m.State

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam advisory instance
func (m *TamAdvisoryInstance) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvisory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffectedObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastStateChangeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastVerifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TamAdvisoryInstance) validateAdvisory(formats strfmt.Registry) error {

	if swag.IsZero(m.Advisory) { // not required
		return nil
	}

	if m.Advisory != nil {
		if err := m.Advisory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Advisory")
			}
			return err
		}
	}

	return nil
}

func (m *TamAdvisoryInstance) validateAffectedObject(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedObject) { // not required
		return nil
	}

	if m.AffectedObject != nil {
		if err := m.AffectedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffectedObject")
			}
			return err
		}
	}

	return nil
}

func (m *TamAdvisoryInstance) validateDeviceRegistration(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceRegistration) { // not required
		return nil
	}

	if m.DeviceRegistration != nil {
		if err := m.DeviceRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeviceRegistration")
			}
			return err
		}
	}

	return nil
}

func (m *TamAdvisoryInstance) validateLastStateChangeTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastStateChangeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastStateChangeTime", "body", "date-time", m.LastStateChangeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TamAdvisoryInstance) validateLastVerifiedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastVerifiedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastVerifiedTime", "body", "date-time", m.LastVerifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var tamAdvisoryInstanceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","active","cleared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamAdvisoryInstanceTypeStatePropEnum = append(tamAdvisoryInstanceTypeStatePropEnum, v)
	}
}

// property enum
func (m *TamAdvisoryInstance) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamAdvisoryInstanceTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAdvisoryInstance) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamAdvisoryInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamAdvisoryInstance) UnmarshalBinary(b []byte) error {
	var res TamAdvisoryInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
