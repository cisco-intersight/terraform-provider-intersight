// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryRequest Inventory:Request
//
// Request MO allows the inventory of specific devices to be collected on demand. The inventory can be collected in three levels - all the MOs of a specific device, MOs of specific MO types for a given device or specific MO instances of specific MO types for a given device. These MO instances are used just to collect the requests and not persisted.
//
// swagger:model inventoryRequest
type InventoryRequest struct {
	MoBaseMo

	// The device bind with this Request.
	Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

	// The collection of specific inventory MOs that need to be fetched. The property is optional and if not present then all the MOs of the given device will be fetched.
	Mos []*InventoryInventoryMo `json:"Mos"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InventoryRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Mos []*InventoryInventoryMo `json:"Mos"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Device = dataAO1.Device

	m.Mos = dataAO1.Mos

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InventoryRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Mos []*InventoryInventoryMo `json:"Mos"`
	}

	dataAO1.Device = m.Device

	dataAO1.Mos = m.Mos

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this inventory request
func (m *InventoryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryRequest) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Device")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryRequest) validateMos(formats strfmt.Registry) error {

	if swag.IsZero(m.Mos) { // not required
		return nil
	}

	for i := 0; i < len(m.Mos); i++ {
		if swag.IsZero(m.Mos[i]) { // not required
			continue
		}

		if m.Mos[i] != nil {
			if err := m.Mos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryRequest) UnmarshalBinary(b []byte) error {
	var res InventoryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
