// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePureProtectionGroup Storage:Pure Protection Group
//
// Protection group entity in Pure storage array. A volume can be protected by associating with protection group either directly or indirectly (either host or host group). Snapshots are created on protected volume in local array or target array or both as per scheduler configuration.
//
// swagger:model storagePureProtectionGroup
type StoragePureProtectionGroup struct {
	StorageProtectionGroup

	// List of host group object associated to the protection group.
	// Read Only: true
	HostGroups []*StoragePureHostGroupRef `json:"HostGroups"`

	// List of host object associated to the protection group.
	// Read Only: true
	Hosts []*StoragePureHostRef `json:"Hosts"`

	// Device registration managed object that represents this storage array connection to Intersight.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Overall size of all snapshots in the protection group, represented in bytes.
	Size int64 `json:"Size,omitempty"`

	// Name of PureStorage array name on which the protection group is created.
	// Read Only: true
	Source string `json:"Source,omitempty"`

	// Target PureStorage array names where the replication snapshots are created.
	// Read Only: true
	Targets []string `json:"Targets"`

	// List of volume object associated to the protection group.
	// Read Only: true
	Volumes []*StoragePureVolumeRef `json:"Volumes"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePureProtectionGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageProtectionGroup
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageProtectionGroup = aO0

	// AO1
	var dataAO1 struct {
		HostGroups []*StoragePureHostGroupRef `json:"HostGroups"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Size int64 `json:"Size,omitempty"`

		Source string `json:"Source,omitempty"`

		Targets []string `json:"Targets"`

		Volumes []*StoragePureVolumeRef `json:"Volumes"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HostGroups = dataAO1.HostGroups

	m.Hosts = dataAO1.Hosts

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Size = dataAO1.Size

	m.Source = dataAO1.Source

	m.Targets = dataAO1.Targets

	m.Volumes = dataAO1.Volumes

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePureProtectionGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StorageProtectionGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HostGroups []*StoragePureHostGroupRef `json:"HostGroups"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Size int64 `json:"Size,omitempty"`

		Source string `json:"Source,omitempty"`

		Targets []string `json:"Targets"`

		Volumes []*StoragePureVolumeRef `json:"Volumes"`
	}

	dataAO1.HostGroups = m.HostGroups

	dataAO1.Hosts = m.Hosts

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Size = m.Size

	dataAO1.Source = m.Source

	dataAO1.Targets = m.Targets

	dataAO1.Volumes = m.Volumes

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pure protection group
func (m *StoragePureProtectionGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageProtectionGroup
	if err := m.StorageProtectionGroup.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePureProtectionGroup) validateHostGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.HostGroups); i++ {
		if swag.IsZero(m.HostGroups[i]) { // not required
			continue
		}

		if m.HostGroups[i] != nil {
			if err := m.HostGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HostGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePureProtectionGroup) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePureProtectionGroup) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureProtectionGroup) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePureProtectionGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePureProtectionGroup) UnmarshalBinary(b []byte) error {
	var res StoragePureProtectionGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
