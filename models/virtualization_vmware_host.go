// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualizationVmwareHost Virtualization:Vmware Host
//
// The VMware Host entity with its attributes. Every Host belongs to a Datacenter and probably runs VMs.
//
// swagger:model virtualizationVmwareHost
type VirtualizationVmwareHost struct {
	VirtualizationHost

	// It is the time when this host booted up.
	// Format: date-time
	BootTime strfmt.DateTime `json:"BootTime,omitempty"`

	// Specifies associated cluster with the host entity. It is optional and upto platform to decide.
	Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

	// Is host connected to vCenter. Values are connected, notconnected.
	ConnectionState string `json:"ConnectionState,omitempty"`

	// Every entity is grouped under the datacenter object and managed as a group.
	// Read Only: true
	Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

	// A collection of references to the [virtualization.VmwareDatastore](mo://virtualization.VmwareDatastore) Managed Object.
	// When this managed object is deleted, the referenced [virtualization.VmwareDatastore](mo://virtualization.VmwareDatastore) MOs unset their reference to this deleted MO.
	// Read Only: true
	Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

	// Is the host powered-up or powered-down.
	// Enum: [Unknown PoweredOn PoweredOff StandBy Paused]
	HwPowerState *string `json:"HwPowerState,omitempty"`

	// It is the count of all network adapters attached to this host.
	NetworkAdapterCount int64 `json:"NetworkAdapterCount,omitempty"`

	// Snapshot of resources (CPU, memory, etc.) consumed by this host.
	ResourceConsumed *VirtualizationResourceConsumption `json:"ResourceConsumed,omitempty"`

	// It is the count of all storage adapters attached to this host.
	StorageAdapterCount int64 `json:"StorageAdapterCount,omitempty"`

	// The identity of this host within vCenter (optional).
	VcenterHostID string `json:"VcenterHostId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationVmwareHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VirtualizationHost
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VirtualizationHost = aO0

	// AO1
	var dataAO1 struct {
		BootTime strfmt.DateTime `json:"BootTime,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		ConnectionState string `json:"ConnectionState,omitempty"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

		HwPowerState *string `json:"HwPowerState,omitempty"`

		NetworkAdapterCount int64 `json:"NetworkAdapterCount,omitempty"`

		ResourceConsumed *VirtualizationResourceConsumption `json:"ResourceConsumed,omitempty"`

		StorageAdapterCount int64 `json:"StorageAdapterCount,omitempty"`

		VcenterHostID string `json:"VcenterHostId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BootTime = dataAO1.BootTime

	m.Cluster = dataAO1.Cluster

	m.ConnectionState = dataAO1.ConnectionState

	m.Datacenter = dataAO1.Datacenter

	m.Datastores = dataAO1.Datastores

	m.HwPowerState = dataAO1.HwPowerState

	m.NetworkAdapterCount = dataAO1.NetworkAdapterCount

	m.ResourceConsumed = dataAO1.ResourceConsumed

	m.StorageAdapterCount = dataAO1.StorageAdapterCount

	m.VcenterHostID = dataAO1.VcenterHostID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationVmwareHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.VirtualizationHost)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BootTime strfmt.DateTime `json:"BootTime,omitempty"`

		Cluster *VirtualizationVmwareClusterRef `json:"Cluster,omitempty"`

		ConnectionState string `json:"ConnectionState,omitempty"`

		Datacenter *VirtualizationVmwareDatacenterRef `json:"Datacenter,omitempty"`

		Datastores []*VirtualizationVmwareDatastoreRef `json:"Datastores"`

		HwPowerState *string `json:"HwPowerState,omitempty"`

		NetworkAdapterCount int64 `json:"NetworkAdapterCount,omitempty"`

		ResourceConsumed *VirtualizationResourceConsumption `json:"ResourceConsumed,omitempty"`

		StorageAdapterCount int64 `json:"StorageAdapterCount,omitempty"`

		VcenterHostID string `json:"VcenterHostId,omitempty"`
	}

	dataAO1.BootTime = m.BootTime

	dataAO1.Cluster = m.Cluster

	dataAO1.ConnectionState = m.ConnectionState

	dataAO1.Datacenter = m.Datacenter

	dataAO1.Datastores = m.Datastores

	dataAO1.HwPowerState = m.HwPowerState

	dataAO1.NetworkAdapterCount = m.NetworkAdapterCount

	dataAO1.ResourceConsumed = m.ResourceConsumed

	dataAO1.StorageAdapterCount = m.StorageAdapterCount

	dataAO1.VcenterHostID = m.VcenterHostID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization vmware host
func (m *VirtualizationVmwareHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VirtualizationHost
	if err := m.VirtualizationHost.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHwPowerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceConsumed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualizationVmwareHost) validateBootTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BootTime) { // not required
		return nil
	}

	if err := validate.FormatOf("BootTime", "body", "date-time", m.BootTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationVmwareHost) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareHost) validateDatacenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if m.Datacenter != nil {
		if err := m.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualizationVmwareHost) validateDatastores(formats strfmt.Registry) error {

	if swag.IsZero(m.Datastores) { // not required
		return nil
	}

	for i := 0; i < len(m.Datastores); i++ {
		if swag.IsZero(m.Datastores[i]) { // not required
			continue
		}

		if m.Datastores[i] != nil {
			if err := m.Datastores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Datastores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var virtualizationVmwareHostTypeHwPowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","PoweredOn","PoweredOff","StandBy","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualizationVmwareHostTypeHwPowerStatePropEnum = append(virtualizationVmwareHostTypeHwPowerStatePropEnum, v)
	}
}

// property enum
func (m *VirtualizationVmwareHost) validateHwPowerStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualizationVmwareHostTypeHwPowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualizationVmwareHost) validateHwPowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.HwPowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validateHwPowerStateEnum("HwPowerState", "body", *m.HwPowerState); err != nil {
		return err
	}

	return nil
}

func (m *VirtualizationVmwareHost) validateResourceConsumed(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceConsumed) { // not required
		return nil
	}

	if m.ResourceConsumed != nil {
		if err := m.ResourceConsumed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceConsumed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationVmwareHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationVmwareHost) UnmarshalBinary(b []byte) error {
	var res VirtualizationVmwareHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
