// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentPsu Equipment:Psu
//
// swagger:model equipmentPsu
type EquipmentPsu struct {
	EquipmentBase

	// A collection of references to the [compute.RackUnit](mo://compute.RackUnit) Managed Object.
	// When this managed object is deleted, the referenced [compute.RackUnit](mo://compute.RackUnit) MO unsets its reference to this deleted MO.
	// Read Only: true
	ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

	// This field is to provide description for the power supply unit.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// A collection of references to the [equipment.Chassis](mo://equipment.Chassis) Managed Object.
	// When this managed object is deleted, the referenced [equipment.Chassis](mo://equipment.Chassis) MO unsets its reference to this deleted MO.
	// Read Only: true
	EquipmentChassis *EquipmentChassisRef `json:"EquipmentChassis,omitempty"`

	// A collection of references to the [equipment.RackEnclosure](mo://equipment.RackEnclosure) Managed Object.
	// When this managed object is deleted, the referenced [equipment.RackEnclosure](mo://equipment.RackEnclosure) MO unsets its reference to this deleted MO.
	// Read Only: true
	EquipmentRackEnclosure *EquipmentRackEnclosureRef `json:"EquipmentRackEnclosure,omitempty"`

	// A collection of references to the [network.Element](mo://network.Element) Managed Object.
	// When this managed object is deleted, the referenced [network.Element](mo://network.Element) MO unsets its reference to this deleted MO.
	// Read Only: true
	NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

	// oper state
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// This field identifies the Part Number for this Power Supply Unit.
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// This field identifies the Product ID for the Power Supply.
	// Read Only: true
	Pid string `json:"Pid,omitempty"`

	// This field identifies the presence state of the psu.
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// This field identifies the Firmware Version of the Power Supply.
	// Read Only: true
	PsuFwVersion string `json:"PsuFwVersion,omitempty"`

	// psu Id
	// Read Only: true
	PsuID int64 `json:"PsuId,omitempty"`

	// This field identifies the input source for the Power Supply.
	// Read Only: true
	PsuInputSrc string `json:"PsuInputSrc,omitempty"`

	// This field identifies the type of the Power Supply.
	// Read Only: true
	PsuType string `json:"PsuType,omitempty"`

	// This field identifies the Wattage of the Power Supply.
	// Read Only: true
	PsuWattage string `json:"PsuWattage,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// This field identifies the Stockkeeping Unit for this Power Supply.
	// Read Only: true
	Sku string `json:"Sku,omitempty"`

	// This field identifies the Vendor ID for this Power Supply Unit.
	// Read Only: true
	Vid string `json:"Vid,omitempty"`

	// This field is used to indicate the Voltage for this Power Supply.
	// Read Only: true
	Voltage string `json:"Voltage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentPsu) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		Description string `json:"Description,omitempty"`

		EquipmentChassis *EquipmentChassisRef `json:"EquipmentChassis,omitempty"`

		EquipmentRackEnclosure *EquipmentRackEnclosureRef `json:"EquipmentRackEnclosure,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		PsuFwVersion string `json:"PsuFwVersion,omitempty"`

		PsuID int64 `json:"PsuId,omitempty"`

		PsuInputSrc string `json:"PsuInputSrc,omitempty"`

		PsuType string `json:"PsuType,omitempty"`

		PsuWattage string `json:"PsuWattage,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Sku string `json:"Sku,omitempty"`

		Vid string `json:"Vid,omitempty"`

		Voltage string `json:"Voltage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ComputeRackUnit = dataAO1.ComputeRackUnit

	m.Description = dataAO1.Description

	m.EquipmentChassis = dataAO1.EquipmentChassis

	m.EquipmentRackEnclosure = dataAO1.EquipmentRackEnclosure

	m.NetworkElement = dataAO1.NetworkElement

	m.OperState = dataAO1.OperState

	m.PartNumber = dataAO1.PartNumber

	m.Pid = dataAO1.Pid

	m.Presence = dataAO1.Presence

	m.PsuFwVersion = dataAO1.PsuFwVersion

	m.PsuID = dataAO1.PsuID

	m.PsuInputSrc = dataAO1.PsuInputSrc

	m.PsuType = dataAO1.PsuType

	m.PsuWattage = dataAO1.PsuWattage

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Sku = dataAO1.Sku

	m.Vid = dataAO1.Vid

	m.Voltage = dataAO1.Voltage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentPsu) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ComputeRackUnit *ComputeRackUnitRef `json:"ComputeRackUnit,omitempty"`

		Description string `json:"Description,omitempty"`

		EquipmentChassis *EquipmentChassisRef `json:"EquipmentChassis,omitempty"`

		EquipmentRackEnclosure *EquipmentRackEnclosureRef `json:"EquipmentRackEnclosure,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		OperState string `json:"OperState,omitempty"`

		PartNumber string `json:"PartNumber,omitempty"`

		Pid string `json:"Pid,omitempty"`

		Presence string `json:"Presence,omitempty"`

		PsuFwVersion string `json:"PsuFwVersion,omitempty"`

		PsuID int64 `json:"PsuId,omitempty"`

		PsuInputSrc string `json:"PsuInputSrc,omitempty"`

		PsuType string `json:"PsuType,omitempty"`

		PsuWattage string `json:"PsuWattage,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Sku string `json:"Sku,omitempty"`

		Vid string `json:"Vid,omitempty"`

		Voltage string `json:"Voltage,omitempty"`
	}

	dataAO1.ComputeRackUnit = m.ComputeRackUnit

	dataAO1.Description = m.Description

	dataAO1.EquipmentChassis = m.EquipmentChassis

	dataAO1.EquipmentRackEnclosure = m.EquipmentRackEnclosure

	dataAO1.NetworkElement = m.NetworkElement

	dataAO1.OperState = m.OperState

	dataAO1.PartNumber = m.PartNumber

	dataAO1.Pid = m.Pid

	dataAO1.Presence = m.Presence

	dataAO1.PsuFwVersion = m.PsuFwVersion

	dataAO1.PsuID = m.PsuID

	dataAO1.PsuInputSrc = m.PsuInputSrc

	dataAO1.PsuType = m.PsuType

	dataAO1.PsuWattage = m.PsuWattage

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Sku = m.Sku

	dataAO1.Vid = m.Vid

	dataAO1.Voltage = m.Voltage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment psu
func (m *EquipmentPsu) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeRackUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentChassis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipmentRackEnclosure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentPsu) validateComputeRackUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeRackUnit) { // not required
		return nil
	}

	if m.ComputeRackUnit != nil {
		if err := m.ComputeRackUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ComputeRackUnit")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentPsu) validateEquipmentChassis(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentChassis) { // not required
		return nil
	}

	if m.EquipmentChassis != nil {
		if err := m.EquipmentChassis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentChassis")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentPsu) validateEquipmentRackEnclosure(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipmentRackEnclosure) { // not required
		return nil
	}

	if m.EquipmentRackEnclosure != nil {
		if err := m.EquipmentRackEnclosure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EquipmentRackEnclosure")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentPsu) validateNetworkElement(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElement) { // not required
		return nil
	}

	if m.NetworkElement != nil {
		if err := m.NetworkElement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkElement")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentPsu) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentPsu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentPsu) UnmarshalBinary(b []byte) error {
	var res EquipmentPsu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
