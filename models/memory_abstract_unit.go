// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoryAbstractUnit Memory:Abstract Unit
//
// Abstract class for all memory units.
//
// swagger:model memoryAbstractUnit
type MemoryAbstractUnit struct {
	EquipmentBase

	// This represents the administrative state of the memory unit on a server.
	// Read Only: true
	AdminState string `json:"AdminState,omitempty"`

	// This represents the memory array to which the memory unit belongs to.
	// Read Only: true
	ArrayID int64 `json:"ArrayId,omitempty"`

	// This represents the memory bank of the memory unit on a server.
	// Read Only: true
	Bank int64 `json:"Bank,omitempty"`

	// This represents the memory capacity in MiB of the memory unit on a server.
	// Read Only: true
	Capacity string `json:"Capacity,omitempty"`

	// This represents the clock of the memory unit on a server.
	// Read Only: true
	Clock string `json:"Clock,omitempty"`

	// This represents the form factor of the memory unit on a server.
	// Read Only: true
	FormFactor string `json:"FormFactor,omitempty"`

	// This represents the latency of the memory unit on a server.
	// Read Only: true
	Latency string `json:"Latency,omitempty"`

	// This represents the location of the memory unit on a server.
	// Read Only: true
	Location string `json:"Location,omitempty"`

	// This represents the operational power state of the memory unit on a server.
	// Read Only: true
	OperPowerState string `json:"OperPowerState,omitempty"`

	// This represents the operational state of the memory unit on a server.
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// This represents the operability of the memory unit on a server.
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// This represents the presence state of the memory unit on a server.
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// This represents the set of the memory unit on a server.
	// Read Only: true
	Set int64 `json:"Set,omitempty"`

	// This represents the speed of the memory unit on a server.
	// Read Only: true
	Speed string `json:"Speed,omitempty"`

	// This represents the thremal state of the memory unit on a server.
	// Read Only: true
	Thermal string `json:"Thermal,omitempty"`

	// This represents the memory type of the memory unit on a server.
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// This represents the visibility of the memory unit on a server.
	// Read Only: true
	Visibility string `json:"Visibility,omitempty"`

	// This represents the width of the memory unit on a server.
	// Read Only: true
	Width string `json:"Width,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MemoryAbstractUnit) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		AdminState string `json:"AdminState,omitempty"`

		ArrayID int64 `json:"ArrayId,omitempty"`

		Bank int64 `json:"Bank,omitempty"`

		Capacity string `json:"Capacity,omitempty"`

		Clock string `json:"Clock,omitempty"`

		FormFactor string `json:"FormFactor,omitempty"`

		Latency string `json:"Latency,omitempty"`

		Location string `json:"Location,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		Presence string `json:"Presence,omitempty"`

		Set int64 `json:"Set,omitempty"`

		Speed string `json:"Speed,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Type string `json:"Type,omitempty"`

		Visibility string `json:"Visibility,omitempty"`

		Width string `json:"Width,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdminState = dataAO1.AdminState

	m.ArrayID = dataAO1.ArrayID

	m.Bank = dataAO1.Bank

	m.Capacity = dataAO1.Capacity

	m.Clock = dataAO1.Clock

	m.FormFactor = dataAO1.FormFactor

	m.Latency = dataAO1.Latency

	m.Location = dataAO1.Location

	m.OperPowerState = dataAO1.OperPowerState

	m.OperState = dataAO1.OperState

	m.Operability = dataAO1.Operability

	m.Presence = dataAO1.Presence

	m.Set = dataAO1.Set

	m.Speed = dataAO1.Speed

	m.Thermal = dataAO1.Thermal

	m.Type = dataAO1.Type

	m.Visibility = dataAO1.Visibility

	m.Width = dataAO1.Width

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MemoryAbstractUnit) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AdminState string `json:"AdminState,omitempty"`

		ArrayID int64 `json:"ArrayId,omitempty"`

		Bank int64 `json:"Bank,omitempty"`

		Capacity string `json:"Capacity,omitempty"`

		Clock string `json:"Clock,omitempty"`

		FormFactor string `json:"FormFactor,omitempty"`

		Latency string `json:"Latency,omitempty"`

		Location string `json:"Location,omitempty"`

		OperPowerState string `json:"OperPowerState,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		Presence string `json:"Presence,omitempty"`

		Set int64 `json:"Set,omitempty"`

		Speed string `json:"Speed,omitempty"`

		Thermal string `json:"Thermal,omitempty"`

		Type string `json:"Type,omitempty"`

		Visibility string `json:"Visibility,omitempty"`

		Width string `json:"Width,omitempty"`
	}

	dataAO1.AdminState = m.AdminState

	dataAO1.ArrayID = m.ArrayID

	dataAO1.Bank = m.Bank

	dataAO1.Capacity = m.Capacity

	dataAO1.Clock = m.Clock

	dataAO1.FormFactor = m.FormFactor

	dataAO1.Latency = m.Latency

	dataAO1.Location = m.Location

	dataAO1.OperPowerState = m.OperPowerState

	dataAO1.OperState = m.OperState

	dataAO1.Operability = m.Operability

	dataAO1.Presence = m.Presence

	dataAO1.Set = m.Set

	dataAO1.Speed = m.Speed

	dataAO1.Thermal = m.Thermal

	dataAO1.Type = m.Type

	dataAO1.Visibility = m.Visibility

	dataAO1.Width = m.Width

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this memory abstract unit
func (m *MemoryAbstractUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MemoryAbstractUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryAbstractUnit) UnmarshalBinary(b []byte) error {
	var res MemoryAbstractUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
