// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortPhysical Port:Physical
//
// Abstract super class for all ports.
//
// swagger:model portPhysical
type PortPhysical struct {
	InventoryBase

	// oper state
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// role
	// Read Only: true
	Role string `json:"Role,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PortPhysical) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		OperState string `json:"OperState,omitempty"`

		Role string `json:"Role,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.OperState = dataAO1.OperState

	m.Role = dataAO1.Role

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PortPhysical) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		OperState string `json:"OperState,omitempty"`

		Role string `json:"Role,omitempty"`
	}

	dataAO1.OperState = m.OperState

	dataAO1.Role = m.Role

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this port physical
func (m *PortPhysical) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PortPhysical) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortPhysical) UnmarshalBinary(b []byte) error {
	var res PortPhysical
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
