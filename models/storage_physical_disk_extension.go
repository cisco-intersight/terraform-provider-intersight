// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePhysicalDiskExtension Storage:Physical Disk Extension
//
// Information of disks as reported by controller. In certain cases like S-series servers, disk information will be reported by controller separately and this represents such information.
//
// swagger:model storagePhysicalDiskExtension
type StoragePhysicalDiskExtension struct {
	EquipmentBase

	// It shows whether disk is bootable or not.
	// Read Only: true
	Bootable string `json:"Bootable,omitempty"`

	// It shows the Physical drive Dn.
	// Read Only: true
	DiskDn string `json:"DiskDn,omitempty"`

	// It shows storage Enclosure slotId.
	// Read Only: true
	DiskID int64 `json:"DiskId,omitempty"`

	// It shows the current drive state of disk.
	// Read Only: true
	DiskState string `json:"DiskState,omitempty"`

	// It shows the current drive state of disk.
	Health string `json:"Health,omitempty"`

	// A collection of references to the [storage.PhysicalDisk](mo://storage.PhysicalDisk) Managed Object.
	// When this managed object is deleted, the referenced [storage.PhysicalDisk](mo://storage.PhysicalDisk) MO unsets its reference to this deleted MO.
	PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.
	// When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageController *StorageControllerRef `json:"StorageController,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePhysicalDiskExtension) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Bootable string `json:"Bootable,omitempty"`

		DiskDn string `json:"DiskDn,omitempty"`

		DiskID int64 `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		Health string `json:"Health,omitempty"`

		PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bootable = dataAO1.Bootable

	m.DiskDn = dataAO1.DiskDn

	m.DiskID = dataAO1.DiskID

	m.DiskState = dataAO1.DiskState

	m.Health = dataAO1.Health

	m.PhysicalDisk = dataAO1.PhysicalDisk

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageController = dataAO1.StorageController

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePhysicalDiskExtension) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bootable string `json:"Bootable,omitempty"`

		DiskDn string `json:"DiskDn,omitempty"`

		DiskID int64 `json:"DiskId,omitempty"`

		DiskState string `json:"DiskState,omitempty"`

		Health string `json:"Health,omitempty"`

		PhysicalDisk *StoragePhysicalDiskRef `json:"PhysicalDisk,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`
	}

	dataAO1.Bootable = m.Bootable

	dataAO1.DiskDn = m.DiskDn

	dataAO1.DiskID = m.DiskID

	dataAO1.DiskState = m.DiskState

	dataAO1.Health = m.Health

	dataAO1.PhysicalDisk = m.PhysicalDisk

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageController = m.StorageController

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage physical disk extension
func (m *StoragePhysicalDiskExtension) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageController(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePhysicalDiskExtension) validatePhysicalDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDisk) { // not required
		return nil
	}

	if m.PhysicalDisk != nil {
		if err := m.PhysicalDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PhysicalDisk")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePhysicalDiskExtension) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePhysicalDiskExtension) validateStorageController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageController) { // not required
		return nil
	}

	if m.StorageController != nil {
		if err := m.StorageController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageController")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePhysicalDiskExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePhysicalDiskExtension) UnmarshalBinary(b []byte) error {
	var res StoragePhysicalDiskExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
