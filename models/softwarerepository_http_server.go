// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SoftwarerepositoryHTTPServer HTTP/S
//
// An external HTTP file server. This can represent the cisco.com website or a HTTP server in the user's datacenter.
//
// swagger:model softwarerepositoryHttpServer
type SoftwarerepositoryHTTPServer struct {
	SoftwarerepositoryFileServer

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// HTTP/HTTPS link to the image. Accepted formats are HTTP[s]://server-hostname/share/image or HTTP[s]://serverip/share/image.
	LocationLink string `json:"LocationLink,omitempty"`

	// Password as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.
	Password string `json:"Password,omitempty"`

	// Username as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SoftwarerepositoryHTTPServer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SoftwarerepositoryFileServer
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SoftwarerepositoryFileServer = aO0

	// AO1
	var dataAO1 struct {
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		LocationLink string `json:"LocationLink,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.LocationLink = dataAO1.LocationLink

	m.Password = dataAO1.Password

	m.Username = dataAO1.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SoftwarerepositoryHTTPServer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SoftwarerepositoryFileServer)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		LocationLink string `json:"LocationLink,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.LocationLink = m.LocationLink

	dataAO1.Password = m.Password

	dataAO1.Username = m.Username

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this softwarerepository Http server
func (m *SoftwarerepositoryHTTPServer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SoftwarerepositoryFileServer
	if err := m.SoftwarerepositoryFileServer.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SoftwarerepositoryHTTPServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwarerepositoryHTTPServer) UnmarshalBinary(b []byte) error {
	var res SoftwarerepositoryHTTPServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
