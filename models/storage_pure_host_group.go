// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePureHostGroup Storage:Pure Host Group
//
// A host group represents a collection of hosts with common connectivity to volumes. Once a connection has been established between a host group and a volume, all of the hosts within the host group are able to access the volume through the connection. These connections are called shared connections because the connection is shared between all of the hosts within the host group.
//
// swagger:model storagePureHostGroup
type StoragePureHostGroup struct {
	StorageHostGroup

	// Names of the host which are associated with the host group. Empty if HostType is set as Host.
	// Read Only: true
	HostNames []string `json:"HostNames"`

	// A collection of references to the [storage.PureHost](mo://storage.PureHost) Managed Object.
	// When this managed object is deleted, the referenced [storage.PureHost](mo://storage.PureHost) MOs unset their reference to this deleted MO.
	// Read Only: true
	Hosts []*StoragePureHostRef `json:"Hosts"`

	// A collection of references to the [storage.PureProtectionGroup](mo://storage.PureProtectionGroup) Managed Object.
	// When this managed object is deleted, the referenced [storage.PureProtectionGroup](mo://storage.PureProtectionGroup) MO unsets its reference to this deleted MO.
	// Read Only: true
	ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

	// Device registration managed object that represents this storage array connection to Intersight.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Storage space utilized by the host entity.
	// Read Only: true
	StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePureHostGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageHostGroup
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageHostGroup = aO0

	// AO1
	var dataAO1 struct {
		HostNames []string `json:"HostNames"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HostNames = dataAO1.HostNames

	m.Hosts = dataAO1.Hosts

	m.ProtectionGroup = dataAO1.ProtectionGroup

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageUtilization = dataAO1.StorageUtilization

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePureHostGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StorageHostGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HostNames []string `json:"HostNames"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`
	}

	dataAO1.HostNames = m.HostNames

	dataAO1.Hosts = m.Hosts

	dataAO1.ProtectionGroup = m.ProtectionGroup

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageUtilization = m.StorageUtilization

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pure host group
func (m *StoragePureHostGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageHostGroup
	if err := m.StorageHostGroup.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePureHostGroup) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePureHostGroup) validateProtectionGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionGroup) { // not required
		return nil
	}

	if m.ProtectionGroup != nil {
		if err := m.ProtectionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProtectionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHostGroup) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHostGroup) validateStorageUtilization(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUtilization) { // not required
		return nil
	}

	if m.StorageUtilization != nil {
		if err := m.StorageUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageUtilization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePureHostGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePureHostGroup) UnmarshalBinary(b []byte) error {
	var res StoragePureHostGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
