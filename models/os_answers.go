// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OsAnswers Os:Answers
//
// This MO captures the values for the most common set of fields in OS specific
// answer files. The values provided in this MO are used to construct the OS specific
// answer files (kickstart, seed, unattended xml) by replacing the fields/placeholders
// in selected os.ConfigurationFile content with the values of this MO properties.
//
// swagger:model osAnswers
type OsAnswers struct {
	MoBaseComplexType

	OsAnswersAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OsAnswers) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 OsAnswersAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.OsAnswersAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OsAnswers) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.OsAnswersAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this os answers
func (m *OsAnswers) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with OsAnswersAO1P1
	if err := m.OsAnswersAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OsAnswers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsAnswers) UnmarshalBinary(b []byte) error {
	var res OsAnswers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsAnswersAO1P1 os answers a o1 p1
//
// swagger:model OsAnswersAO1P1
type OsAnswersAO1P1 struct {

	// If the source of the answers is a static file, the content of the file is stored as value
	// in this property.
	// The value is mandatory only when the 'Source' property has been set to 'File'.
	AnswerFile string `json:"AnswerFile,omitempty"`

	// Hostname to be configured for the server in the OS.
	Hostname string `json:"Hostname,omitempty"`

	// IP configuration type. Values are Static or Dynamic configuration of IP.
	// In case of static IP configuration, IP address, gateway and other details need
	// to be populated. In case of dynamic the IP configuration is obtained dynamically
	// from DHCP.
	// Enum: [static DHCP]
	IPConfigType *string `json:"IpConfigType,omitempty"`

	// In case of static IP configuration, IP address, netmask and gateway details are
	// provided.
	IPV4Config *CommIPV4Interface `json:"IpV4Config,omitempty"`

	// Indicates whether the value of the 'answerFile' property has been set.
	// Read Only: true
	IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

	// Enable to indicate Root Password provided is encrypted.
	IsRootPasswordCrypted *bool `json:"IsRootPasswordCrypted,omitempty"`

	// is root password set
	IsRootPasswordSet *bool `json:"IsRootPasswordSet,omitempty"`

	// IP address of the name server to be configured in the OS.
	Nameserver string `json:"Nameserver,omitempty"`

	// The product key to be used for a specific version of Windows installation.
	ProductKey string `json:"ProductKey,omitempty"`

	// Password configured for the root / administrator user in the OS. You can enter a plain text or an encrypted password.
	// Intersight encrypts the plaintext password. Enable the Encrypted Password option to provide an encrypted password.
	// For more details on encrypting passwords, see Help Center.
	RootPassword string `json:"RootPassword,omitempty"`

	// Answer values can be provided from three sources - Embedded in OS image, static file,
	// or as placeholder values for an answer file template.
	// Source of the answers is given as value, Embedded/File/Template.
	// 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File'
	// option indicates that the answers are provided as a file. 'Template' indicates that the
	// placeholders in the selected os.ConfigurationFile MO are replaced with values provided
	// as os.Answers MO.
	// Enum: [None Embedded File Template]
	Source *string `json:"Source,omitempty"`

	// os answers a o1 p1
	OsAnswersAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *OsAnswersAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// If the source of the answers is a static file, the content of the file is stored as value
		// in this property.
		// The value is mandatory only when the 'Source' property has been set to 'File'.
		AnswerFile string `json:"AnswerFile,omitempty"`

		// Hostname to be configured for the server in the OS.
		Hostname string `json:"Hostname,omitempty"`

		// IP configuration type. Values are Static or Dynamic configuration of IP.
		// In case of static IP configuration, IP address, gateway and other details need
		// to be populated. In case of dynamic the IP configuration is obtained dynamically
		// from DHCP.
		// Enum: [static DHCP]
		IPConfigType *string `json:"IpConfigType,omitempty"`

		// In case of static IP configuration, IP address, netmask and gateway details are
		// provided.
		IPV4Config *CommIPV4Interface `json:"IpV4Config,omitempty"`

		// Indicates whether the value of the 'answerFile' property has been set.
		// Read Only: true
		IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

		// Enable to indicate Root Password provided is encrypted.
		IsRootPasswordCrypted *bool `json:"IsRootPasswordCrypted,omitempty"`

		// is root password set
		IsRootPasswordSet *bool `json:"IsRootPasswordSet,omitempty"`

		// IP address of the name server to be configured in the OS.
		Nameserver string `json:"Nameserver,omitempty"`

		// The product key to be used for a specific version of Windows installation.
		ProductKey string `json:"ProductKey,omitempty"`

		// Password configured for the root / administrator user in the OS. You can enter a plain text or an encrypted password.
		// Intersight encrypts the plaintext password. Enable the Encrypted Password option to provide an encrypted password.
		// For more details on encrypting passwords, see Help Center.
		RootPassword string `json:"RootPassword,omitempty"`

		// Answer values can be provided from three sources - Embedded in OS image, static file,
		// or as placeholder values for an answer file template.
		// Source of the answers is given as value, Embedded/File/Template.
		// 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File'
		// option indicates that the answers are provided as a file. 'Template' indicates that the
		// placeholders in the selected os.ConfigurationFile MO are replaced with values provided
		// as os.Answers MO.
		// Enum: [None Embedded File Template]
		Source *string `json:"Source,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv OsAnswersAO1P1

	rcv.AnswerFile = stage1.AnswerFile
	rcv.Hostname = stage1.Hostname
	rcv.IPConfigType = stage1.IPConfigType
	rcv.IPV4Config = stage1.IPV4Config
	rcv.IsAnswerFileSet = stage1.IsAnswerFileSet
	rcv.IsRootPasswordCrypted = stage1.IsRootPasswordCrypted
	rcv.IsRootPasswordSet = stage1.IsRootPasswordSet
	rcv.Nameserver = stage1.Nameserver
	rcv.ProductKey = stage1.ProductKey
	rcv.RootPassword = stage1.RootPassword
	rcv.Source = stage1.Source
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AnswerFile")
	delete(stage2, "Hostname")
	delete(stage2, "IpConfigType")
	delete(stage2, "IpV4Config")
	delete(stage2, "IsAnswerFileSet")
	delete(stage2, "IsRootPasswordCrypted")
	delete(stage2, "IsRootPasswordSet")
	delete(stage2, "Nameserver")
	delete(stage2, "ProductKey")
	delete(stage2, "RootPassword")
	delete(stage2, "Source")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.OsAnswersAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m OsAnswersAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// If the source of the answers is a static file, the content of the file is stored as value
		// in this property.
		// The value is mandatory only when the 'Source' property has been set to 'File'.
		AnswerFile string `json:"AnswerFile,omitempty"`

		// Hostname to be configured for the server in the OS.
		Hostname string `json:"Hostname,omitempty"`

		// IP configuration type. Values are Static or Dynamic configuration of IP.
		// In case of static IP configuration, IP address, gateway and other details need
		// to be populated. In case of dynamic the IP configuration is obtained dynamically
		// from DHCP.
		// Enum: [static DHCP]
		IPConfigType *string `json:"IpConfigType,omitempty"`

		// In case of static IP configuration, IP address, netmask and gateway details are
		// provided.
		IPV4Config *CommIPV4Interface `json:"IpV4Config,omitempty"`

		// Indicates whether the value of the 'answerFile' property has been set.
		// Read Only: true
		IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

		// Enable to indicate Root Password provided is encrypted.
		IsRootPasswordCrypted *bool `json:"IsRootPasswordCrypted,omitempty"`

		// is root password set
		IsRootPasswordSet *bool `json:"IsRootPasswordSet,omitempty"`

		// IP address of the name server to be configured in the OS.
		Nameserver string `json:"Nameserver,omitempty"`

		// The product key to be used for a specific version of Windows installation.
		ProductKey string `json:"ProductKey,omitempty"`

		// Password configured for the root / administrator user in the OS. You can enter a plain text or an encrypted password.
		// Intersight encrypts the plaintext password. Enable the Encrypted Password option to provide an encrypted password.
		// For more details on encrypting passwords, see Help Center.
		RootPassword string `json:"RootPassword,omitempty"`

		// Answer values can be provided from three sources - Embedded in OS image, static file,
		// or as placeholder values for an answer file template.
		// Source of the answers is given as value, Embedded/File/Template.
		// 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File'
		// option indicates that the answers are provided as a file. 'Template' indicates that the
		// placeholders in the selected os.ConfigurationFile MO are replaced with values provided
		// as os.Answers MO.
		// Enum: [None Embedded File Template]
		Source *string `json:"Source,omitempty"`
	}

	stage1.AnswerFile = m.AnswerFile
	stage1.Hostname = m.Hostname
	stage1.IPConfigType = m.IPConfigType
	stage1.IPV4Config = m.IPV4Config
	stage1.IsAnswerFileSet = m.IsAnswerFileSet
	stage1.IsRootPasswordCrypted = m.IsRootPasswordCrypted
	stage1.IsRootPasswordSet = m.IsRootPasswordSet
	stage1.Nameserver = m.Nameserver
	stage1.ProductKey = m.ProductKey
	stage1.RootPassword = m.RootPassword
	stage1.Source = m.Source

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.OsAnswersAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.OsAnswersAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this os answers a o1 p1
func (m *OsAnswersAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPConfigType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4Config(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var osAnswersAO1P1TypeIPConfigTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","DHCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osAnswersAO1P1TypeIPConfigTypePropEnum = append(osAnswersAO1P1TypeIPConfigTypePropEnum, v)
	}
}

const (

	// OsAnswersAO1P1IPConfigTypeStatic captures enum value "static"
	OsAnswersAO1P1IPConfigTypeStatic string = "static"

	// OsAnswersAO1P1IPConfigTypeDHCP captures enum value "DHCP"
	OsAnswersAO1P1IPConfigTypeDHCP string = "DHCP"
)

// prop value enum
func (m *OsAnswersAO1P1) validateIPConfigTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, osAnswersAO1P1TypeIPConfigTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OsAnswersAO1P1) validateIPConfigType(formats strfmt.Registry) error {

	if swag.IsZero(m.IPConfigType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPConfigTypeEnum("IpConfigType", "body", *m.IPConfigType); err != nil {
		return err
	}

	return nil
}

func (m *OsAnswersAO1P1) validateIPV4Config(formats strfmt.Registry) error {

	if swag.IsZero(m.IPV4Config) { // not required
		return nil
	}

	if m.IPV4Config != nil {
		if err := m.IPV4Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IpV4Config")
			}
			return err
		}
	}

	return nil
}

var osAnswersAO1P1TypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Embedded","File","Template"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osAnswersAO1P1TypeSourcePropEnum = append(osAnswersAO1P1TypeSourcePropEnum, v)
	}
}

const (

	// OsAnswersAO1P1SourceNone captures enum value "None"
	OsAnswersAO1P1SourceNone string = "None"

	// OsAnswersAO1P1SourceEmbedded captures enum value "Embedded"
	OsAnswersAO1P1SourceEmbedded string = "Embedded"

	// OsAnswersAO1P1SourceFile captures enum value "File"
	OsAnswersAO1P1SourceFile string = "File"

	// OsAnswersAO1P1SourceTemplate captures enum value "Template"
	OsAnswersAO1P1SourceTemplate string = "Template"
)

// prop value enum
func (m *OsAnswersAO1P1) validateSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, osAnswersAO1P1TypeSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OsAnswersAO1P1) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("Source", "body", *m.Source); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsAnswersAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsAnswersAO1P1) UnmarshalBinary(b []byte) error {
	var res OsAnswersAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
