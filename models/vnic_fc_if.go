// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VnicFcIf Virtual Fibre Channel Interface
//
// Virtual Fibre Channel Interface.
//
// swagger:model vnicFcIf
type VnicFcIf struct {
	MoBaseMo

	// Relationship to the the Fibre Channel Adapter Policy.
	FcAdapterPolicy *VnicFcAdapterPolicyRef `json:"FcAdapterPolicy,omitempty"`

	// Relationship to the Fibre Channel Network Policy.
	FcNetworkPolicy *VnicFcNetworkPolicyRef `json:"FcNetworkPolicy,omitempty"`

	// Relationship to the Fibre Channel QoS Policy.
	FcQosPolicy *VnicFcQosPolicyRef `json:"FcQosPolicy,omitempty"`

	// Name of the virtual fibre channel interface.
	Name string `json:"Name,omitempty"`

	// The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.
	Order int64 `json:"Order,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Enables retention of LUN ID associations in memory until they are manually cleared.
	PersistentBindings *bool `json:"PersistentBindings,omitempty"`

	// Placement Settings for the virtual interface.
	Placement *VnicPlacementSettings `json:"Placement,omitempty"`

	// Relationship to the SAN Connectivity Policy.
	SanConnectivityPolicy *VnicSanConnectivityPolicyRef `json:"SanConnectivityPolicy,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicFcIf) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		FcAdapterPolicy *VnicFcAdapterPolicyRef `json:"FcAdapterPolicy,omitempty"`

		FcNetworkPolicy *VnicFcNetworkPolicyRef `json:"FcNetworkPolicy,omitempty"`

		FcQosPolicy *VnicFcQosPolicyRef `json:"FcQosPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		Order int64 `json:"Order,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PersistentBindings *bool `json:"PersistentBindings,omitempty"`

		Placement *VnicPlacementSettings `json:"Placement,omitempty"`

		SanConnectivityPolicy *VnicSanConnectivityPolicyRef `json:"SanConnectivityPolicy,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.FcAdapterPolicy = dataAO1.FcAdapterPolicy

	m.FcNetworkPolicy = dataAO1.FcNetworkPolicy

	m.FcQosPolicy = dataAO1.FcQosPolicy

	m.Name = dataAO1.Name

	m.Order = dataAO1.Order

	m.Organization = dataAO1.Organization

	m.PersistentBindings = dataAO1.PersistentBindings

	m.Placement = dataAO1.Placement

	m.SanConnectivityPolicy = dataAO1.SanConnectivityPolicy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicFcIf) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		FcAdapterPolicy *VnicFcAdapterPolicyRef `json:"FcAdapterPolicy,omitempty"`

		FcNetworkPolicy *VnicFcNetworkPolicyRef `json:"FcNetworkPolicy,omitempty"`

		FcQosPolicy *VnicFcQosPolicyRef `json:"FcQosPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		Order int64 `json:"Order,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PersistentBindings *bool `json:"PersistentBindings,omitempty"`

		Placement *VnicPlacementSettings `json:"Placement,omitempty"`

		SanConnectivityPolicy *VnicSanConnectivityPolicyRef `json:"SanConnectivityPolicy,omitempty"`
	}

	dataAO1.FcAdapterPolicy = m.FcAdapterPolicy

	dataAO1.FcNetworkPolicy = m.FcNetworkPolicy

	dataAO1.FcQosPolicy = m.FcQosPolicy

	dataAO1.Name = m.Name

	dataAO1.Order = m.Order

	dataAO1.Organization = m.Organization

	dataAO1.PersistentBindings = m.PersistentBindings

	dataAO1.Placement = m.Placement

	dataAO1.SanConnectivityPolicy = m.SanConnectivityPolicy

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic fc if
func (m *VnicFcIf) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcAdapterPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcNetworkPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanConnectivityPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VnicFcIf) validateFcAdapterPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.FcAdapterPolicy) { // not required
		return nil
	}

	if m.FcAdapterPolicy != nil {
		if err := m.FcAdapterPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FcAdapterPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *VnicFcIf) validateFcNetworkPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.FcNetworkPolicy) { // not required
		return nil
	}

	if m.FcNetworkPolicy != nil {
		if err := m.FcNetworkPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FcNetworkPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *VnicFcIf) validateFcQosPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.FcQosPolicy) { // not required
		return nil
	}

	if m.FcQosPolicy != nil {
		if err := m.FcQosPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FcQosPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *VnicFcIf) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *VnicFcIf) validatePlacement(formats strfmt.Registry) error {

	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if m.Placement != nil {
		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Placement")
			}
			return err
		}
	}

	return nil
}

func (m *VnicFcIf) validateSanConnectivityPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.SanConnectivityPolicy) { // not required
		return nil
	}

	if m.SanConnectivityPolicy != nil {
		if err := m.SanConnectivityPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SanConnectivityPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VnicFcIf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicFcIf) UnmarshalBinary(b []byte) error {
	var res VnicFcIf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
