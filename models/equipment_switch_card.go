// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentSwitchCard Equipment:Switch Card
//
// Fixed / Removable module on a Fabric Interconnect / Switch.
//
// swagger:model equipmentSwitchCard
type EquipmentSwitchCard struct {
	EquipmentBase

	// description
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// A collection of references to the [network.Element](mo://network.Element) Managed Object.
	// When this managed object is deleted, the referenced [network.Element](mo://network.Element) MO unsets its reference to this deleted MO.
	// Read Only: true
	NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

	// num ports
	// Read Only: true
	NumPorts int64 `json:"NumPorts,omitempty"`

	// port groups
	// Read Only: true
	PortGroups []*PortGroupRef `json:"PortGroups"`

	// presence
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// slot Id
	// Read Only: true
	SlotID int64 `json:"SlotId,omitempty"`

	// state
	// Read Only: true
	State string `json:"State,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentSwitchCard) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		NumPorts int64 `json:"NumPorts,omitempty"`

		PortGroups []*PortGroupRef `json:"PortGroups"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SlotID int64 `json:"SlotId,omitempty"`

		State string `json:"State,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.NetworkElement = dataAO1.NetworkElement

	m.NumPorts = dataAO1.NumPorts

	m.PortGroups = dataAO1.PortGroups

	m.Presence = dataAO1.Presence

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SlotID = dataAO1.SlotID

	m.State = dataAO1.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentSwitchCard) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		NetworkElement *NetworkElementRef `json:"NetworkElement,omitempty"`

		NumPorts int64 `json:"NumPorts,omitempty"`

		PortGroups []*PortGroupRef `json:"PortGroups"`

		Presence string `json:"Presence,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SlotID int64 `json:"SlotId,omitempty"`

		State string `json:"State,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.NetworkElement = m.NetworkElement

	dataAO1.NumPorts = m.NumPorts

	dataAO1.PortGroups = m.PortGroups

	dataAO1.Presence = m.Presence

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SlotID = m.SlotID

	dataAO1.State = m.State

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment switch card
func (m *EquipmentSwitchCard) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentSwitchCard) validateNetworkElement(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElement) { // not required
		return nil
	}

	if m.NetworkElement != nil {
		if err := m.NetworkElement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkElement")
			}
			return err
		}
	}

	return nil
}

func (m *EquipmentSwitchCard) validatePortGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.PortGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PortGroups); i++ {
		if swag.IsZero(m.PortGroups[i]) { // not required
			continue
		}

		if m.PortGroups[i] != nil {
			if err := m.PortGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PortGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EquipmentSwitchCard) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentSwitchCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentSwitchCard) UnmarshalBinary(b []byte) error {
	var res EquipmentSwitchCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
