// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryDnMoBinding Inventory:Dn Mo Binding
//
// DnMoBinding provides a binding between a Intersight MO and a UCSM MO which has a DN.
//
// swagger:model inventoryDnMoBinding
type InventoryDnMoBinding struct {
	MoBaseMo

	// Distinguished Name of the UCSM object.
	// Read Only: true
	Dn string `json:"Dn,omitempty"`

	// Relationship to the device registration object.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The property targetMoId represents the Binding target's MoId.
	// Read Only: true
	TargetMoID string `json:"TargetMoId,omitempty"`

	// The property targetMoType represents the Binding target's Mo type.
	// Read Only: true
	TargetMoType string `json:"TargetMoType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InventoryDnMoBinding) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Dn string `json:"Dn,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TargetMoID string `json:"TargetMoId,omitempty"`

		TargetMoType string `json:"TargetMoType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Dn = dataAO1.Dn

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.TargetMoID = dataAO1.TargetMoID

	m.TargetMoType = dataAO1.TargetMoType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InventoryDnMoBinding) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Dn string `json:"Dn,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		TargetMoID string `json:"TargetMoId,omitempty"`

		TargetMoType string `json:"TargetMoType,omitempty"`
	}

	dataAO1.Dn = m.Dn

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.TargetMoID = m.TargetMoID

	dataAO1.TargetMoType = m.TargetMoType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this inventory dn mo binding
func (m *InventoryDnMoBinding) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryDnMoBinding) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryDnMoBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryDnMoBinding) UnmarshalBinary(b []byte) error {
	var res InventoryDnMoBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
