// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PkixEcdsaKeySpec Pkix:Ecdsa Key Spec
//
// The key pair is generated using Elliptic Curve Digital Signature Algorithm (ECDSA), as defined in FIPS 186-4.
// The ECDSA standard was originally developed for the American National Standards Institute by the Accredited
// Standards Committee on Financial Services, X9.
// ANS X9.62 defines methods for digital signature generation and verification using ECDSA. Specifications for
// the generation of the domain parameters used during the generation and verification of digital signatures
// are also included in ANS X9.62.
//
// swagger:model pkixEcdsaKeySpec
type PkixEcdsaKeySpec struct {
	PkixKeyGenerationSpec

	// A specific set of Elliptic Curve parameters, as recommended by NIST in FIPS 186-4.
	// Enum: [P256 P224 P384 P521]
	Curve *string `json:"Curve,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PkixEcdsaKeySpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PkixKeyGenerationSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PkixKeyGenerationSpec = aO0

	// AO1
	var dataAO1 struct {
		Curve *string `json:"Curve,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Curve = dataAO1.Curve

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PkixEcdsaKeySpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PkixKeyGenerationSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Curve *string `json:"Curve,omitempty"`
	}

	dataAO1.Curve = m.Curve

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pkix ecdsa key spec
func (m *PkixEcdsaKeySpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PkixKeyGenerationSpec
	if err := m.PkixKeyGenerationSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurve(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pkixEcdsaKeySpecTypeCurvePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["P256","P224","P384","P521"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pkixEcdsaKeySpecTypeCurvePropEnum = append(pkixEcdsaKeySpecTypeCurvePropEnum, v)
	}
}

// property enum
func (m *PkixEcdsaKeySpec) validateCurveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pkixEcdsaKeySpecTypeCurvePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PkixEcdsaKeySpec) validateCurve(formats strfmt.Registry) error {

	if swag.IsZero(m.Curve) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurveEnum("Curve", "body", *m.Curve); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkixEcdsaKeySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkixEcdsaKeySpec) UnmarshalBinary(b []byte) error {
	var res PkixEcdsaKeySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
