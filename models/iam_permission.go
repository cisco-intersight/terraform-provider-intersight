// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamPermission Role
//
// Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.
//
// swagger:model iamPermission
type IamPermission struct {
	MoBaseMo

	// A collection of references to the [iam.Account](mo://iam.Account) Managed Object.
	// When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// The informative description about each permission.
	Description string `json:"Description,omitempty"`

	// The end point roles assigned to this permission. The user can perform end point operations like GUI/CLI cross launch.
	// Read Only: true
	EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

	// The name of the permission which has to be granted to user.
	Name string `json:"Name,omitempty"`

	// The resource and roles assigned to this permission. Resource role specifies the organization and the collection of roles the permission has on the organization.
	ResourceRoles []*IamResourceRolesRef `json:"ResourceRoles"`

	// The roles assigned to this permission. Role is a collection of privilege sets. Roles are assigned to a user using the permission object.
	Roles []*IamRoleRef `json:"Roles"`

	// A collection of references to the [iam.UserGroup](mo://iam.UserGroup) Managed Object.
	// When this managed object is deleted, the referenced [iam.UserGroup](mo://iam.UserGroup) MOs unset their reference to this deleted MO.
	UserGroups []*IamUserGroupRef `json:"UserGroups"`

	// A collection of references to the [iam.User](mo://iam.User) Managed Object.
	// When this managed object is deleted, the referenced [iam.User](mo://iam.User) MOs unset their reference to this deleted MO.
	Users []*IamUserRef `json:"Users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamPermission) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Description string `json:"Description,omitempty"`

		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Name string `json:"Name,omitempty"`

		ResourceRoles []*IamResourceRolesRef `json:"ResourceRoles"`

		Roles []*IamRoleRef `json:"Roles"`

		UserGroups []*IamUserGroupRef `json:"UserGroups"`

		Users []*IamUserRef `json:"Users"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Description = dataAO1.Description

	m.EndPointRoles = dataAO1.EndPointRoles

	m.Name = dataAO1.Name

	m.ResourceRoles = dataAO1.ResourceRoles

	m.Roles = dataAO1.Roles

	m.UserGroups = dataAO1.UserGroups

	m.Users = dataAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamPermission) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Description string `json:"Description,omitempty"`

		EndPointRoles []*IamEndPointRoleRef `json:"EndPointRoles"`

		Name string `json:"Name,omitempty"`

		ResourceRoles []*IamResourceRolesRef `json:"ResourceRoles"`

		Roles []*IamRoleRef `json:"Roles"`

		UserGroups []*IamUserGroupRef `json:"UserGroups"`

		Users []*IamUserRef `json:"Users"`
	}

	dataAO1.Account = m.Account

	dataAO1.Description = m.Description

	dataAO1.EndPointRoles = m.EndPointRoles

	dataAO1.Name = m.Name

	dataAO1.ResourceRoles = m.ResourceRoles

	dataAO1.Roles = m.Roles

	dataAO1.UserGroups = m.UserGroups

	dataAO1.Users = m.Users

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam permission
func (m *IamPermission) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPointRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamPermission) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *IamPermission) validateEndPointRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPointRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPointRoles); i++ {
		if swag.IsZero(m.EndPointRoles[i]) { // not required
			continue
		}

		if m.EndPointRoles[i] != nil {
			if err := m.EndPointRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EndPointRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPermission) validateResourceRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceRoles); i++ {
		if swag.IsZero(m.ResourceRoles[i]) { // not required
			continue
		}

		if m.ResourceRoles[i] != nil {
			if err := m.ResourceRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ResourceRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPermission) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPermission) validateUserGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPermission) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamPermission) UnmarshalBinary(b []byte) error {
	var res IamPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
