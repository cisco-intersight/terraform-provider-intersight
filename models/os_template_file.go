// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OsTemplateFile Os:Template File
//
// A TemplateFile is an OS specific answer file that helps with the unattended installation.
// The file can also be a template file with placeholders instead of actual answers.
// Intersight supports the golang template syntax specified in https://golang.org/pkg/text/template/.
// The values for these placeholders shall be given during OS installation in the form of 'additionalProperties'
// in os.OsInstall object.
//
// swagger:model osTemplateFile
type OsTemplateFile struct {
	MoBaseMo

	// The name of the OS Template File that user uploads for unattended installation.
	Name string `json:"Name,omitempty"`

	// This readonly property holds the list of placeholder names used in the
	// template file content.
	// Read Only: true
	Placeholders []string `json:"Placeholders"`

	// The content of the entire template file is stored as value. The content
	// can either be a static file content or a template content.
	// The template is expected to conform to the golang template syntax.
	// The placeholders, if any, would be populated and the values provided would be
	// used to populate this template.
	TemplateContent string `json:"TemplateContent,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OsTemplateFile) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Placeholders []string `json:"Placeholders"`

		TemplateContent string `json:"TemplateContent,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.Placeholders = dataAO1.Placeholders

	m.TemplateContent = dataAO1.TemplateContent

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OsTemplateFile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name string `json:"Name,omitempty"`

		Placeholders []string `json:"Placeholders"`

		TemplateContent string `json:"TemplateContent,omitempty"`
	}

	dataAO1.Name = m.Name

	dataAO1.Placeholders = m.Placeholders

	dataAO1.TemplateContent = m.TemplateContent

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this os template file
func (m *OsTemplateFile) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OsTemplateFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsTemplateFile) UnmarshalBinary(b []byte) error {
	var res OsTemplateFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
