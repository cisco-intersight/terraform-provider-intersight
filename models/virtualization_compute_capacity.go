// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualizationComputeCapacity Virtualization:Compute Capacity
//
// Details of available CPU power across all cores and the free capacity still available.
//
// swagger:model virtualizationComputeCapacity
type VirtualizationComputeCapacity struct {
	MoBaseComplexType

	VirtualizationComputeCapacityAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualizationComputeCapacity) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 VirtualizationComputeCapacityAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.VirtualizationComputeCapacityAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualizationComputeCapacity) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.VirtualizationComputeCapacityAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtualization compute capacity
func (m *VirtualizationComputeCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VirtualizationComputeCapacityAO1P1
	if err := m.VirtualizationComputeCapacityAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationComputeCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationComputeCapacity) UnmarshalBinary(b []byte) error {
	var res VirtualizationComputeCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VirtualizationComputeCapacityAO1P1 virtualization compute capacity a o1 p1
//
// swagger:model VirtualizationComputeCapacityAO1P1
type VirtualizationComputeCapacityAO1P1 struct {

	// Total capacity of the entity in MHz.
	Capacity int64 `json:"Capacity,omitempty"`

	// Free CPU capacity in MHz, as a point-in-time snapshot. The available CPU capacity is reported for an entity (such as Host or Cluster) when inventory data is collected for that entity. As part of the inventory data, a snapshot of the free and used CPU capacity is also reported.
	Free int64 `json:"Free,omitempty"`

	// Used CPU capacity of the entity in MHz, as a point-in-time snapshot.
	Used int64 `json:"Used,omitempty"`

	// virtualization compute capacity a o1 p1
	VirtualizationComputeCapacityAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *VirtualizationComputeCapacityAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Total capacity of the entity in MHz.
		Capacity int64 `json:"Capacity,omitempty"`

		// Free CPU capacity in MHz, as a point-in-time snapshot. The available CPU capacity is reported for an entity (such as Host or Cluster) when inventory data is collected for that entity. As part of the inventory data, a snapshot of the free and used CPU capacity is also reported.
		Free int64 `json:"Free,omitempty"`

		// Used CPU capacity of the entity in MHz, as a point-in-time snapshot.
		Used int64 `json:"Used,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv VirtualizationComputeCapacityAO1P1

	rcv.Capacity = stage1.Capacity
	rcv.Free = stage1.Free
	rcv.Used = stage1.Used
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Capacity")
	delete(stage2, "Free")
	delete(stage2, "Used")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.VirtualizationComputeCapacityAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m VirtualizationComputeCapacityAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Total capacity of the entity in MHz.
		Capacity int64 `json:"Capacity,omitempty"`

		// Free CPU capacity in MHz, as a point-in-time snapshot. The available CPU capacity is reported for an entity (such as Host or Cluster) when inventory data is collected for that entity. As part of the inventory data, a snapshot of the free and used CPU capacity is also reported.
		Free int64 `json:"Free,omitempty"`

		// Used CPU capacity of the entity in MHz, as a point-in-time snapshot.
		Used int64 `json:"Used,omitempty"`
	}

	stage1.Capacity = m.Capacity
	stage1.Free = m.Free
	stage1.Used = m.Used

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.VirtualizationComputeCapacityAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.VirtualizationComputeCapacityAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this virtualization compute capacity a o1 p1
func (m *VirtualizationComputeCapacityAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualizationComputeCapacityAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualizationComputeCapacityAO1P1) UnmarshalBinary(b []byte) error {
	var res VirtualizationComputeCapacityAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
