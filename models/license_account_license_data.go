// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseAccountLicenseData License:Account License Data
//
// License information for an account.
//
// swagger:model licenseAccountLicenseData
type LicenseAccountLicenseData struct {
	MoBaseMo

	// AccountLicenseData record to Account record relationship.
	Account *IamAccountRef `json:"Account,omitempty"`

	// Root user's ID of the account.
	// Read Only: true
	AccountID string `json:"AccountId,omitempty"`

	// Agent trusted store data.
	// Read Only: true
	AgentData string `json:"AgentData,omitempty"`

	// Authorization expiration time.
	// Read Only: true
	AuthExpireTime string `json:"AuthExpireTime,omitempty"`

	// Intial authorization time.
	// Read Only: true
	AuthInitialTime string `json:"AuthInitialTime,omitempty"`

	// Next time for the authorization.
	// Read Only: true
	AuthNextTime string `json:"AuthNextTime,omitempty"`

	// Account license data category name.
	// Read Only: true
	Category string `json:"Category,omitempty"`

	// AccountLicenseData record to CustomerOp record relationship.
	CustomerOp *LicenseCustomerOpRef `json:"CustomerOp,omitempty"`

	// Default license tier set by user.
	// Enum: [Base Essential Standard Advantage Premier]
	DefaultLicenseType *string `json:"DefaultLicenseType,omitempty"`

	// The detailed error message when there is any error related to license sync of this account.
	// Read Only: true
	ErrorDesc string `json:"ErrorDesc,omitempty"`

	// Account license data group name.
	// Read Only: true
	Group string `json:"Group,omitempty"`

	// The highest license tier which is in compliant of this account.
	// Read Only: true
	// Enum: [Base Essential Standard Advantage Premier]
	HighestCompliantLicenseTier string `json:"HighestCompliantLicenseTier,omitempty"`

	// Specifies last sync time with SA.
	// Read Only: true
	// Format: date-time
	LastSync strfmt.DateTime `json:"LastSync,omitempty"`

	// Record's last update datetime.
	// Read Only: true
	// Format: date-time
	LastUpdatedTime strfmt.DateTime `json:"LastUpdatedTime,omitempty"`

	// Aggregrated mode for the agent.
	// Read Only: true
	LicenseState string `json:"LicenseState,omitempty"`

	// Tech-support info of a smart-agent.
	// Read Only: true
	LicenseTechSupportInfo string `json:"LicenseTechSupportInfo,omitempty"`

	// All LicenceInfo records refercing this AccountLicenseData record.
	Licenseinfos []*LicenseLicenseInfoRef `json:"Licenseinfos"`

	// Registration exipiration time.
	// Read Only: true
	RegisterExpireTime string `json:"RegisterExpireTime,omitempty"`

	// Initial time of registration.
	// Read Only: true
	RegisterInitialTime string `json:"RegisterInitialTime,omitempty"`

	// Next time for the license registration.
	// Read Only: true
	RegisterNextTime string `json:"RegisterNextTime,omitempty"`

	// Registration status of a smart-agent.
	// Read Only: true
	RegistrationStatus string `json:"RegistrationStatus,omitempty"`

	// License renewal failure message.
	// Read Only: true
	RenewFailureString string `json:"RenewFailureString,omitempty"`

	// Name of the smart account.
	// Read Only: true
	SmartAccount string `json:"SmartAccount,omitempty"`

	// AccountLicenseData record to SmartlicenseToken record relationship.
	SmartlicenseToken *LicenseSmartlicenseTokenRef `json:"SmartlicenseToken,omitempty"`

	// Current sync status for the account.
	// Read Only: true
	SyncStatus string `json:"SyncStatus,omitempty"`

	// Name of the virtual account.
	// Read Only: true
	VirtualAccount string `json:"VirtualAccount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LicenseAccountLicenseData) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		AccountID string `json:"AccountId,omitempty"`

		AgentData string `json:"AgentData,omitempty"`

		AuthExpireTime string `json:"AuthExpireTime,omitempty"`

		AuthInitialTime string `json:"AuthInitialTime,omitempty"`

		AuthNextTime string `json:"AuthNextTime,omitempty"`

		Category string `json:"Category,omitempty"`

		CustomerOp *LicenseCustomerOpRef `json:"CustomerOp,omitempty"`

		DefaultLicenseType *string `json:"DefaultLicenseType,omitempty"`

		ErrorDesc string `json:"ErrorDesc,omitempty"`

		Group string `json:"Group,omitempty"`

		HighestCompliantLicenseTier string `json:"HighestCompliantLicenseTier,omitempty"`

		LastSync strfmt.DateTime `json:"LastSync,omitempty"`

		LastUpdatedTime strfmt.DateTime `json:"LastUpdatedTime,omitempty"`

		LicenseState string `json:"LicenseState,omitempty"`

		LicenseTechSupportInfo string `json:"LicenseTechSupportInfo,omitempty"`

		Licenseinfos []*LicenseLicenseInfoRef `json:"Licenseinfos"`

		RegisterExpireTime string `json:"RegisterExpireTime,omitempty"`

		RegisterInitialTime string `json:"RegisterInitialTime,omitempty"`

		RegisterNextTime string `json:"RegisterNextTime,omitempty"`

		RegistrationStatus string `json:"RegistrationStatus,omitempty"`

		RenewFailureString string `json:"RenewFailureString,omitempty"`

		SmartAccount string `json:"SmartAccount,omitempty"`

		SmartlicenseToken *LicenseSmartlicenseTokenRef `json:"SmartlicenseToken,omitempty"`

		SyncStatus string `json:"SyncStatus,omitempty"`

		VirtualAccount string `json:"VirtualAccount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.AccountID = dataAO1.AccountID

	m.AgentData = dataAO1.AgentData

	m.AuthExpireTime = dataAO1.AuthExpireTime

	m.AuthInitialTime = dataAO1.AuthInitialTime

	m.AuthNextTime = dataAO1.AuthNextTime

	m.Category = dataAO1.Category

	m.CustomerOp = dataAO1.CustomerOp

	m.DefaultLicenseType = dataAO1.DefaultLicenseType

	m.ErrorDesc = dataAO1.ErrorDesc

	m.Group = dataAO1.Group

	m.HighestCompliantLicenseTier = dataAO1.HighestCompliantLicenseTier

	m.LastSync = dataAO1.LastSync

	m.LastUpdatedTime = dataAO1.LastUpdatedTime

	m.LicenseState = dataAO1.LicenseState

	m.LicenseTechSupportInfo = dataAO1.LicenseTechSupportInfo

	m.Licenseinfos = dataAO1.Licenseinfos

	m.RegisterExpireTime = dataAO1.RegisterExpireTime

	m.RegisterInitialTime = dataAO1.RegisterInitialTime

	m.RegisterNextTime = dataAO1.RegisterNextTime

	m.RegistrationStatus = dataAO1.RegistrationStatus

	m.RenewFailureString = dataAO1.RenewFailureString

	m.SmartAccount = dataAO1.SmartAccount

	m.SmartlicenseToken = dataAO1.SmartlicenseToken

	m.SyncStatus = dataAO1.SyncStatus

	m.VirtualAccount = dataAO1.VirtualAccount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LicenseAccountLicenseData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		AccountID string `json:"AccountId,omitempty"`

		AgentData string `json:"AgentData,omitempty"`

		AuthExpireTime string `json:"AuthExpireTime,omitempty"`

		AuthInitialTime string `json:"AuthInitialTime,omitempty"`

		AuthNextTime string `json:"AuthNextTime,omitempty"`

		Category string `json:"Category,omitempty"`

		CustomerOp *LicenseCustomerOpRef `json:"CustomerOp,omitempty"`

		DefaultLicenseType *string `json:"DefaultLicenseType,omitempty"`

		ErrorDesc string `json:"ErrorDesc,omitempty"`

		Group string `json:"Group,omitempty"`

		HighestCompliantLicenseTier string `json:"HighestCompliantLicenseTier,omitempty"`

		LastSync strfmt.DateTime `json:"LastSync,omitempty"`

		LastUpdatedTime strfmt.DateTime `json:"LastUpdatedTime,omitempty"`

		LicenseState string `json:"LicenseState,omitempty"`

		LicenseTechSupportInfo string `json:"LicenseTechSupportInfo,omitempty"`

		Licenseinfos []*LicenseLicenseInfoRef `json:"Licenseinfos"`

		RegisterExpireTime string `json:"RegisterExpireTime,omitempty"`

		RegisterInitialTime string `json:"RegisterInitialTime,omitempty"`

		RegisterNextTime string `json:"RegisterNextTime,omitempty"`

		RegistrationStatus string `json:"RegistrationStatus,omitempty"`

		RenewFailureString string `json:"RenewFailureString,omitempty"`

		SmartAccount string `json:"SmartAccount,omitempty"`

		SmartlicenseToken *LicenseSmartlicenseTokenRef `json:"SmartlicenseToken,omitempty"`

		SyncStatus string `json:"SyncStatus,omitempty"`

		VirtualAccount string `json:"VirtualAccount,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.AccountID = m.AccountID

	dataAO1.AgentData = m.AgentData

	dataAO1.AuthExpireTime = m.AuthExpireTime

	dataAO1.AuthInitialTime = m.AuthInitialTime

	dataAO1.AuthNextTime = m.AuthNextTime

	dataAO1.Category = m.Category

	dataAO1.CustomerOp = m.CustomerOp

	dataAO1.DefaultLicenseType = m.DefaultLicenseType

	dataAO1.ErrorDesc = m.ErrorDesc

	dataAO1.Group = m.Group

	dataAO1.HighestCompliantLicenseTier = m.HighestCompliantLicenseTier

	dataAO1.LastSync = m.LastSync

	dataAO1.LastUpdatedTime = m.LastUpdatedTime

	dataAO1.LicenseState = m.LicenseState

	dataAO1.LicenseTechSupportInfo = m.LicenseTechSupportInfo

	dataAO1.Licenseinfos = m.Licenseinfos

	dataAO1.RegisterExpireTime = m.RegisterExpireTime

	dataAO1.RegisterInitialTime = m.RegisterInitialTime

	dataAO1.RegisterNextTime = m.RegisterNextTime

	dataAO1.RegistrationStatus = m.RegistrationStatus

	dataAO1.RenewFailureString = m.RenewFailureString

	dataAO1.SmartAccount = m.SmartAccount

	dataAO1.SmartlicenseToken = m.SmartlicenseToken

	dataAO1.SyncStatus = m.SyncStatus

	dataAO1.VirtualAccount = m.VirtualAccount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this license account license data
func (m *LicenseAccountLicenseData) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestCompliantLicenseTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseinfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartlicenseToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseAccountLicenseData) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseAccountLicenseData) validateCustomerOp(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerOp) { // not required
		return nil
	}

	if m.CustomerOp != nil {
		if err := m.CustomerOp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomerOp")
			}
			return err
		}
	}

	return nil
}

var licenseAccountLicenseDataTypeDefaultLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Base","Essential","Standard","Advantage","Premier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseAccountLicenseDataTypeDefaultLicenseTypePropEnum = append(licenseAccountLicenseDataTypeDefaultLicenseTypePropEnum, v)
	}
}

// property enum
func (m *LicenseAccountLicenseData) validateDefaultLicenseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseAccountLicenseDataTypeDefaultLicenseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseAccountLicenseData) validateDefaultLicenseType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultLicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultLicenseTypeEnum("DefaultLicenseType", "body", *m.DefaultLicenseType); err != nil {
		return err
	}

	return nil
}

var licenseAccountLicenseDataTypeHighestCompliantLicenseTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Base","Essential","Standard","Advantage","Premier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseAccountLicenseDataTypeHighestCompliantLicenseTierPropEnum = append(licenseAccountLicenseDataTypeHighestCompliantLicenseTierPropEnum, v)
	}
}

// property enum
func (m *LicenseAccountLicenseData) validateHighestCompliantLicenseTierEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseAccountLicenseDataTypeHighestCompliantLicenseTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseAccountLicenseData) validateHighestCompliantLicenseTier(formats strfmt.Registry) error {

	if swag.IsZero(m.HighestCompliantLicenseTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateHighestCompliantLicenseTierEnum("HighestCompliantLicenseTier", "body", m.HighestCompliantLicenseTier); err != nil {
		return err
	}

	return nil
}

func (m *LicenseAccountLicenseData) validateLastSync(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSync) { // not required
		return nil
	}

	if err := validate.FormatOf("LastSync", "body", "date-time", m.LastSync.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LicenseAccountLicenseData) validateLastUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUpdatedTime", "body", "date-time", m.LastUpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LicenseAccountLicenseData) validateLicenseinfos(formats strfmt.Registry) error {

	if swag.IsZero(m.Licenseinfos) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenseinfos); i++ {
		if swag.IsZero(m.Licenseinfos[i]) { // not required
			continue
		}

		if m.Licenseinfos[i] != nil {
			if err := m.Licenseinfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Licenseinfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseAccountLicenseData) validateSmartlicenseToken(formats strfmt.Registry) error {

	if swag.IsZero(m.SmartlicenseToken) { // not required
		return nil
	}

	if m.SmartlicenseToken != nil {
		if err := m.SmartlicenseToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SmartlicenseToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseAccountLicenseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseAccountLicenseData) UnmarshalBinary(b []byte) error {
	var res LicenseAccountLicenseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
