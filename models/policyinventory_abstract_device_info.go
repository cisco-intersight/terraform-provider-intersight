// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyinventoryAbstractDeviceInfo Policyinventory:Abstract Device Info
//
// Information pertaining to a Registered Device in Intersight which is pertinent to policy microservice.
//
// swagger:model policyinventoryAbstractDeviceInfo
type PolicyinventoryAbstractDeviceInfo struct {
	MoBaseMo

	// Configuration state of server profile config context.
	// Read Only: true
	ConfigState string `json:"ConfigState,omitempty"`

	// Control action of server profile config context.
	// Read Only: true
	ControlAction string `json:"ControlAction,omitempty"`

	// Error state of server profile config context.
	// Read Only: true
	ErrorState string `json:"ErrorState,omitempty"`

	// Inventory job information of the device.
	// Read Only: true
	JobInfo []*PolicyinventoryJobInfo `json:"JobInfo"`

	// Operational state of server profile config context.
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// Server profile MO ID of the server.
	// Read Only: true
	ProfileMoID string `json:"ProfileMoId,omitempty"`

	// Registered device associated with profile for which inventory is done.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyinventoryAbstractDeviceInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		ControlAction string `json:"ControlAction,omitempty"`

		ErrorState string `json:"ErrorState,omitempty"`

		JobInfo []*PolicyinventoryJobInfo `json:"JobInfo"`

		OperState string `json:"OperState,omitempty"`

		ProfileMoID string `json:"ProfileMoId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConfigState = dataAO1.ConfigState

	m.ControlAction = dataAO1.ControlAction

	m.ErrorState = dataAO1.ErrorState

	m.JobInfo = dataAO1.JobInfo

	m.OperState = dataAO1.OperState

	m.ProfileMoID = dataAO1.ProfileMoID

	m.RegisteredDevice = dataAO1.RegisteredDevice

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyinventoryAbstractDeviceInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		ControlAction string `json:"ControlAction,omitempty"`

		ErrorState string `json:"ErrorState,omitempty"`

		JobInfo []*PolicyinventoryJobInfo `json:"JobInfo"`

		OperState string `json:"OperState,omitempty"`

		ProfileMoID string `json:"ProfileMoId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
	}

	dataAO1.ConfigState = m.ConfigState

	dataAO1.ControlAction = m.ControlAction

	dataAO1.ErrorState = m.ErrorState

	dataAO1.JobInfo = m.JobInfo

	dataAO1.OperState = m.OperState

	dataAO1.ProfileMoID = m.ProfileMoID

	dataAO1.RegisteredDevice = m.RegisteredDevice

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policyinventory abstract device info
func (m *PolicyinventoryAbstractDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyinventoryAbstractDeviceInfo) validateJobInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.JobInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.JobInfo); i++ {
		if swag.IsZero(m.JobInfo[i]) { // not required
			continue
		}

		if m.JobInfo[i] != nil {
			if err := m.JobInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("JobInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyinventoryAbstractDeviceInfo) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyinventoryAbstractDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyinventoryAbstractDeviceInfo) UnmarshalBinary(b []byte) error {
	var res PolicyinventoryAbstractDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
