// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseLicenseInfo License:License Info
//
// License state information for a specific license entitlement. Essentials license entitlement is supported currently.
// licenseState attribute is used for license enforcement. When license state is one of TrialPeriod, Compliance, or OutOfCompliance,
// the feature set defined for the license entitlement is granted to the customer.
//
// swagger:model licenseLicenseInfo
type LicenseLicenseInfo struct {
	MoBaseMo

	// A collection of references to the [license.AccountLicenseData](mo://license.AccountLicenseData) Managed Object.
	// When this managed object is deleted, the referenced [license.AccountLicenseData](mo://license.AccountLicenseData) MO unsets its reference to this deleted MO.
	AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

	// The license administrative state.
	// Set this property to 'true' to activate the license entitlements.
	// Read Only: true
	ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

	// The number of days left for licenseState to stay in TrialPeriod or OutOfCompliance state.
	// Read Only: true
	DaysLeft int64 `json:"DaysLeft,omitempty"`

	// The date and time when the trial period expires.
	// The value of the 'endTime' property is set when the account enters the TrialPeriod or OutOfCompliance state.
	// Read Only: true
	// Format: date-time
	EndTime strfmt.DateTime `json:"EndTime,omitempty"`

	// The entitlement mode reported by Cisco Smart Software Manager.
	// Read Only: true
	EnforceMode string `json:"EnforceMode,omitempty"`

	// The detailed error message when there is any error related to this licensing entitlement.
	// Read Only: true
	ErrorDesc string `json:"ErrorDesc,omitempty"`

	// The default Trial or Grace period customer is entitled to.
	EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

	// The number of days the trial Trial or Grace period is extended.
	// The trial or grace period can be extended once.
	ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

	// The total number of devices claimed in the Intersight account.
	// Read Only: true
	LicenseCount int64 `json:"LicenseCount,omitempty"`

	// The license state defined by Intersight.
	// The value may be one of NotLicensed, TrialPeriod, OutOfCompliance, Compliance, GraceExpired, or TrialExpired.
	// Read Only: true
	// Enum: [NotLicensed GraceExpired TrialPeriod OutOfCompliance Compliance TrialExpired]
	LicenseState string `json:"LicenseState,omitempty"`

	// The name of the Intersight license entitlement.
	// For example, this property may be set to 'Essential'.
	// Read Only: true
	// Enum: [Base Essential Standard Advantage Premier]
	LicenseType string `json:"LicenseType,omitempty"`

	// The date and time when the licenseState entered the TrialPeriod or OutOfCompliance state.
	// Read Only: true
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// The administrative state of the trial license.
	// When the LicenseState is set to 'NotLicensed', 'trialAdmin' can be set to true to start the trial period,
	// i.e. licenseState is set to be TrialPeriod.
	// Read Only: true
	TrialAdmin *bool `json:"TrialAdmin,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LicenseLicenseInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

		ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

		DaysLeft int64 `json:"DaysLeft,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		EnforceMode string `json:"EnforceMode,omitempty"`

		ErrorDesc string `json:"ErrorDesc,omitempty"`

		EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

		ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

		LicenseCount int64 `json:"LicenseCount,omitempty"`

		LicenseState string `json:"LicenseState,omitempty"`

		LicenseType string `json:"LicenseType,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		TrialAdmin *bool `json:"TrialAdmin,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountLicenseData = dataAO1.AccountLicenseData

	m.ActiveAdmin = dataAO1.ActiveAdmin

	m.DaysLeft = dataAO1.DaysLeft

	m.EndTime = dataAO1.EndTime

	m.EnforceMode = dataAO1.EnforceMode

	m.ErrorDesc = dataAO1.ErrorDesc

	m.EvaluationPeriod = dataAO1.EvaluationPeriod

	m.ExtraEvaluation = dataAO1.ExtraEvaluation

	m.LicenseCount = dataAO1.LicenseCount

	m.LicenseState = dataAO1.LicenseState

	m.LicenseType = dataAO1.LicenseType

	m.StartTime = dataAO1.StartTime

	m.TrialAdmin = dataAO1.TrialAdmin

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LicenseLicenseInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountLicenseData *LicenseAccountLicenseDataRef `json:"AccountLicenseData,omitempty"`

		ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`

		DaysLeft int64 `json:"DaysLeft,omitempty"`

		EndTime strfmt.DateTime `json:"EndTime,omitempty"`

		EnforceMode string `json:"EnforceMode,omitempty"`

		ErrorDesc string `json:"ErrorDesc,omitempty"`

		EvaluationPeriod int64 `json:"EvaluationPeriod,omitempty"`

		ExtraEvaluation int64 `json:"ExtraEvaluation,omitempty"`

		LicenseCount int64 `json:"LicenseCount,omitempty"`

		LicenseState string `json:"LicenseState,omitempty"`

		LicenseType string `json:"LicenseType,omitempty"`

		StartTime strfmt.DateTime `json:"StartTime,omitempty"`

		TrialAdmin *bool `json:"TrialAdmin,omitempty"`
	}

	dataAO1.AccountLicenseData = m.AccountLicenseData

	dataAO1.ActiveAdmin = m.ActiveAdmin

	dataAO1.DaysLeft = m.DaysLeft

	dataAO1.EndTime = m.EndTime

	dataAO1.EnforceMode = m.EnforceMode

	dataAO1.ErrorDesc = m.ErrorDesc

	dataAO1.EvaluationPeriod = m.EvaluationPeriod

	dataAO1.ExtraEvaluation = m.ExtraEvaluation

	dataAO1.LicenseCount = m.LicenseCount

	dataAO1.LicenseState = m.LicenseState

	dataAO1.LicenseType = m.LicenseType

	dataAO1.StartTime = m.StartTime

	dataAO1.TrialAdmin = m.TrialAdmin

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this license license info
func (m *LicenseLicenseInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountLicenseData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseLicenseInfo) validateAccountLicenseData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountLicenseData) { // not required
		return nil
	}

	if m.AccountLicenseData != nil {
		if err := m.AccountLicenseData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountLicenseData")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseLicenseInfo) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var licenseLicenseInfoTypeLicenseStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotLicensed","GraceExpired","TrialPeriod","OutOfCompliance","Compliance","TrialExpired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseLicenseInfoTypeLicenseStatePropEnum = append(licenseLicenseInfoTypeLicenseStatePropEnum, v)
	}
}

// property enum
func (m *LicenseLicenseInfo) validateLicenseStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseLicenseInfoTypeLicenseStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseLicenseInfo) validateLicenseState(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseStateEnum("LicenseState", "body", m.LicenseState); err != nil {
		return err
	}

	return nil
}

var licenseLicenseInfoTypeLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Base","Essential","Standard","Advantage","Premier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseLicenseInfoTypeLicenseTypePropEnum = append(licenseLicenseInfoTypeLicenseTypePropEnum, v)
	}
}

// property enum
func (m *LicenseLicenseInfo) validateLicenseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseLicenseInfoTypeLicenseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseLicenseInfo) validateLicenseType(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseTypeEnum("LicenseType", "body", m.LicenseType); err != nil {
		return err
	}

	return nil
}

func (m *LicenseLicenseInfo) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseLicenseInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseLicenseInfo) UnmarshalBinary(b []byte) error {
	var res LicenseLicenseInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
