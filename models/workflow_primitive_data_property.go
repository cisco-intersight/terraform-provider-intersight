// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowPrimitiveDataProperty Workflow:Primitive Data Property
//
// Capture all the properties for primitive data type.
//
// swagger:model workflowPrimitiveDataProperty
type WorkflowPrimitiveDataProperty struct {
	MoBaseComplexType

	WorkflowPrimitiveDataPropertyAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowPrimitiveDataProperty) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 WorkflowPrimitiveDataPropertyAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowPrimitiveDataPropertyAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowPrimitiveDataProperty) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowPrimitiveDataPropertyAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow primitive data property
func (m *WorkflowPrimitiveDataProperty) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowPrimitiveDataPropertyAO1P1
	if err := m.WorkflowPrimitiveDataPropertyAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowPrimitiveDataProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowPrimitiveDataProperty) UnmarshalBinary(b []byte) error {
	var res WorkflowPrimitiveDataProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowPrimitiveDataPropertyAO1P1 workflow primitive data property a o1 p1
//
// swagger:model WorkflowPrimitiveDataPropertyAO1P1
type WorkflowPrimitiveDataPropertyAO1P1 struct {

	// Constraints that must be applied to the parameter value supplied for this data type.
	Constraints *WorkflowConstraints `json:"Constraints,omitempty"`

	// List of Intersight managed object selectors. The workflow execution user interface show objects from inventory that are matching the selectors to help with selecting inputs.
	InventorySelector []*WorkflowMoReferenceProperty `json:"InventorySelector"`

	// Intersight supports secure properties as task input/output. The values of
	// these properties are encrypted and stored in Intersight.
	// This flag marks the property to be secure when it is set to true.
	Secure *bool `json:"Secure,omitempty"`

	// Specify the enum type for primitive data type.
	// Enum: [string integer float boolean json enum]
	Type *string `json:"Type,omitempty"`

	// workflow primitive data property a o1 p1
	WorkflowPrimitiveDataPropertyAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowPrimitiveDataPropertyAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Constraints that must be applied to the parameter value supplied for this data type.
		Constraints *WorkflowConstraints `json:"Constraints,omitempty"`

		// List of Intersight managed object selectors. The workflow execution user interface show objects from inventory that are matching the selectors to help with selecting inputs.
		InventorySelector []*WorkflowMoReferenceProperty `json:"InventorySelector"`

		// Intersight supports secure properties as task input/output. The values of
		// these properties are encrypted and stored in Intersight.
		// This flag marks the property to be secure when it is set to true.
		Secure *bool `json:"Secure,omitempty"`

		// Specify the enum type for primitive data type.
		// Enum: [string integer float boolean json enum]
		Type *string `json:"Type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowPrimitiveDataPropertyAO1P1

	rcv.Constraints = stage1.Constraints
	rcv.InventorySelector = stage1.InventorySelector
	rcv.Secure = stage1.Secure
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Constraints")
	delete(stage2, "InventorySelector")
	delete(stage2, "Secure")
	delete(stage2, "Type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowPrimitiveDataPropertyAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowPrimitiveDataPropertyAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Constraints that must be applied to the parameter value supplied for this data type.
		Constraints *WorkflowConstraints `json:"Constraints,omitempty"`

		// List of Intersight managed object selectors. The workflow execution user interface show objects from inventory that are matching the selectors to help with selecting inputs.
		InventorySelector []*WorkflowMoReferenceProperty `json:"InventorySelector"`

		// Intersight supports secure properties as task input/output. The values of
		// these properties are encrypted and stored in Intersight.
		// This flag marks the property to be secure when it is set to true.
		Secure *bool `json:"Secure,omitempty"`

		// Specify the enum type for primitive data type.
		// Enum: [string integer float boolean json enum]
		Type *string `json:"Type,omitempty"`
	}

	stage1.Constraints = m.Constraints
	stage1.InventorySelector = m.InventorySelector
	stage1.Secure = m.Secure
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowPrimitiveDataPropertyAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowPrimitiveDataPropertyAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow primitive data property a o1 p1
func (m *WorkflowPrimitiveDataPropertyAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventorySelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowPrimitiveDataPropertyAO1P1) validateConstraints(formats strfmt.Registry) error {

	if swag.IsZero(m.Constraints) { // not required
		return nil
	}

	if m.Constraints != nil {
		if err := m.Constraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constraints")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowPrimitiveDataPropertyAO1P1) validateInventorySelector(formats strfmt.Registry) error {

	if swag.IsZero(m.InventorySelector) { // not required
		return nil
	}

	for i := 0; i < len(m.InventorySelector); i++ {
		if swag.IsZero(m.InventorySelector[i]) { // not required
			continue
		}

		if m.InventorySelector[i] != nil {
			if err := m.InventorySelector[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InventorySelector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workflowPrimitiveDataPropertyAO1P1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","integer","float","boolean","json","enum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPrimitiveDataPropertyAO1P1TypeTypePropEnum = append(workflowPrimitiveDataPropertyAO1P1TypeTypePropEnum, v)
	}
}

const (

	// WorkflowPrimitiveDataPropertyAO1P1TypeString captures enum value "string"
	WorkflowPrimitiveDataPropertyAO1P1TypeString string = "string"

	// WorkflowPrimitiveDataPropertyAO1P1TypeInteger captures enum value "integer"
	WorkflowPrimitiveDataPropertyAO1P1TypeInteger string = "integer"

	// WorkflowPrimitiveDataPropertyAO1P1TypeFloat captures enum value "float"
	WorkflowPrimitiveDataPropertyAO1P1TypeFloat string = "float"

	// WorkflowPrimitiveDataPropertyAO1P1TypeBoolean captures enum value "boolean"
	WorkflowPrimitiveDataPropertyAO1P1TypeBoolean string = "boolean"

	// WorkflowPrimitiveDataPropertyAO1P1TypeJSON captures enum value "json"
	WorkflowPrimitiveDataPropertyAO1P1TypeJSON string = "json"

	// WorkflowPrimitiveDataPropertyAO1P1TypeEnum captures enum value "enum"
	WorkflowPrimitiveDataPropertyAO1P1TypeEnum string = "enum"
)

// prop value enum
func (m *WorkflowPrimitiveDataPropertyAO1P1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPrimitiveDataPropertyAO1P1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowPrimitiveDataPropertyAO1P1) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowPrimitiveDataPropertyAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowPrimitiveDataPropertyAO1P1) UnmarshalBinary(b []byte) error {
	var res WorkflowPrimitiveDataPropertyAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
