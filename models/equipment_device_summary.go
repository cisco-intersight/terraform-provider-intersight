// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EquipmentDeviceSummary Equipment:Device Summary
//
// Aggregation of properties pertaining to different inventory MOs.
//
// swagger:model equipmentDeviceSummary
type EquipmentDeviceSummary struct {
	ViewsView

	// The distinguished name for the Network Element.
	// Read Only: true
	Dn string `json:"Dn,omitempty"`

	// The model information of the Network Element.
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// The serial number for the Network Element.
	// Read Only: true
	Serial string `json:"Serial,omitempty"`

	// The source object type of this view MO.
	// Read Only: true
	SourceObjectType string `json:"SourceObjectType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EquipmentDeviceSummary) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ViewsView
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ViewsView = aO0

	// AO1
	var dataAO1 struct {
		Dn string `json:"Dn,omitempty"`

		Model string `json:"Model,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Serial string `json:"Serial,omitempty"`

		SourceObjectType string `json:"SourceObjectType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Dn = dataAO1.Dn

	m.Model = dataAO1.Model

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Serial = dataAO1.Serial

	m.SourceObjectType = dataAO1.SourceObjectType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EquipmentDeviceSummary) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ViewsView)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Dn string `json:"Dn,omitempty"`

		Model string `json:"Model,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Serial string `json:"Serial,omitempty"`

		SourceObjectType string `json:"SourceObjectType,omitempty"`
	}

	dataAO1.Dn = m.Dn

	dataAO1.Model = m.Model

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Serial = m.Serial

	dataAO1.SourceObjectType = m.SourceObjectType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this equipment device summary
func (m *EquipmentDeviceSummary) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ViewsView
	if err := m.ViewsView.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EquipmentDeviceSummary) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EquipmentDeviceSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EquipmentDeviceSummary) UnmarshalBinary(b []byte) error {
	var res EquipmentDeviceSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
