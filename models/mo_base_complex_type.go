// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MoBaseComplexType Mo:Base Complex Type
//
// BaseComplexType is a base abstract class for all complex types. All complex types inherit from this base type.
//
// swagger:model moBaseComplexType
type MoBaseComplexType struct {

	// The concrete type of this complex type.
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	ObjectType string `json:"ObjectType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MoBaseComplexType) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ObjectType string `json:"ObjectType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ObjectType = dataAO0.ObjectType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MoBaseComplexType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ObjectType string `json:"ObjectType,omitempty"`
	}

	dataAO0.ObjectType = m.ObjectType

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mo base complex type
func (m *MoBaseComplexType) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MoBaseComplexType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoBaseComplexType) UnmarshalBinary(b []byte) error {
	var res MoBaseComplexType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
