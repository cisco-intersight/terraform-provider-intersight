// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HyperflexLogicalAvailabilityZone Hyperflex:Logical Availability Zone
//
// A configuration for the Logical Availability Zone.
// Logical Availability Zones (LAZ) allow for increased fault tolerance by dividing clusters into logical partitions
// where a given block of data is only written to a zone once. This allows replications of data to be distributed evenly
// across zones. LAZ configurations are compatible with HyperFlex clusters meeting all of the following criteria:
// 1. The HyperFlex cluster must be attached to a UCS Fabric Interconnect.
// 2. The HyperFlex cluster must be running HyperFlex Data Platform 3.0 or higher.
// 3. The HyperFlex cluster must have 8 or more converged nodes.
//
// swagger:model hyperflexLogicalAvailabilityZone
type HyperflexLogicalAvailabilityZone struct {
	MoBaseComplexType

	HyperflexLogicalAvailabilityZoneAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexLogicalAvailabilityZone) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 HyperflexLogicalAvailabilityZoneAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HyperflexLogicalAvailabilityZoneAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexLogicalAvailabilityZone) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HyperflexLogicalAvailabilityZoneAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex logical availability zone
func (m *HyperflexLogicalAvailabilityZone) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HyperflexLogicalAvailabilityZoneAO1P1
	if err := m.HyperflexLogicalAvailabilityZoneAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZone) UnmarshalBinary(b []byte) error {
	var res HyperflexLogicalAvailabilityZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HyperflexLogicalAvailabilityZoneAO1P1 hyperflex logical availability zone a o1 p1
//
// swagger:model HyperflexLogicalAvailabilityZoneAO1P1
type HyperflexLogicalAvailabilityZoneAO1P1 struct {

	// Enable or disable Logical Availability Zones (LAZ).
	// If enabled, HyperFlex Data Platform automatically selects and groups nodes into different availability zones. For HyperFlex Data Platform versions prior to 3.0 release, this setting does not apply. For HyperFlex Data Platform versions 3.0 or higher, this setting is only applicable to Fabric Interconnect attached HyperFlex systems with 8 or more converged nodes.
	AutoConfig *bool `json:"AutoConfig,omitempty"`

	// hyperflex logical availability zone a o1 p1
	HyperflexLogicalAvailabilityZoneAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HyperflexLogicalAvailabilityZoneAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Enable or disable Logical Availability Zones (LAZ).
		// If enabled, HyperFlex Data Platform automatically selects and groups nodes into different availability zones. For HyperFlex Data Platform versions prior to 3.0 release, this setting does not apply. For HyperFlex Data Platform versions 3.0 or higher, this setting is only applicable to Fabric Interconnect attached HyperFlex systems with 8 or more converged nodes.
		AutoConfig *bool `json:"AutoConfig,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HyperflexLogicalAvailabilityZoneAO1P1

	rcv.AutoConfig = stage1.AutoConfig
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AutoConfig")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HyperflexLogicalAvailabilityZoneAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HyperflexLogicalAvailabilityZoneAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Enable or disable Logical Availability Zones (LAZ).
		// If enabled, HyperFlex Data Platform automatically selects and groups nodes into different availability zones. For HyperFlex Data Platform versions prior to 3.0 release, this setting does not apply. For HyperFlex Data Platform versions 3.0 or higher, this setting is only applicable to Fabric Interconnect attached HyperFlex systems with 8 or more converged nodes.
		AutoConfig *bool `json:"AutoConfig,omitempty"`
	}

	stage1.AutoConfig = m.AutoConfig

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HyperflexLogicalAvailabilityZoneAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HyperflexLogicalAvailabilityZoneAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hyperflex logical availability zone a o1 p1
func (m *HyperflexLogicalAvailabilityZoneAO1P1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZoneAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZoneAO1P1) UnmarshalBinary(b []byte) error {
	var res HyperflexLogicalAvailabilityZoneAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
