// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowWaitTask Workflow:Wait Task
//
// A WaitTask will remain in progress until marked success or failed by an external trigger. The timeout for wait task is 180 days, so a workflow can wait for task status update for upto 180 days. Currently the only supported means to update the task status is through an API that provides the status of the task runtime instance. Once the wait task status has been set the workflow will continue with the execution based on the task status.
//
// swagger:model workflowWaitTask
type WorkflowWaitTask struct {
	WorkflowAbstractWorkerTask

	// List of prompts for this wait task. These prompts are useful to provide options to the user who is running a workflow that contains wait task on how to proceed after the wait task.
	Prompts []*WorkflowWaitTaskPrompt `json:"Prompts"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowWaitTask) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAbstractWorkerTask
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAbstractWorkerTask = aO0

	// AO1
	var dataAO1 struct {
		Prompts []*WorkflowWaitTaskPrompt `json:"Prompts"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Prompts = dataAO1.Prompts

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowWaitTask) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowAbstractWorkerTask)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Prompts []*WorkflowWaitTaskPrompt `json:"Prompts"`
	}

	dataAO1.Prompts = m.Prompts

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow wait task
func (m *WorkflowWaitTask) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAbstractWorkerTask
	if err := m.WorkflowAbstractWorkerTask.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrompts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowWaitTask) validatePrompts(formats strfmt.Registry) error {

	if swag.IsZero(m.Prompts) { // not required
		return nil
	}

	for i := 0; i < len(m.Prompts); i++ {
		if swag.IsZero(m.Prompts[i]) { // not required
			continue
		}

		if m.Prompts[i] != nil {
			if err := m.Prompts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Prompts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowWaitTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowWaitTask) UnmarshalBinary(b []byte) error {
	var res WorkflowWaitTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
