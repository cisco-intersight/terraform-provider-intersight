// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowCustomDataTypeDefinition Custom Datatype
//
// Captures a customized data type definition that can be used for task or workflow input/output.  This can be reused across multiple tasks and workflow definitions.
//
// swagger:model workflowCustomDataTypeDefinition
type WorkflowCustomDataTypeDefinition struct {
	MoBaseMo

	// The catalog under which the definition is present.
	Catalog *WorkflowCatalogRef `json:"Catalog,omitempty"`

	// When true this data type definition is a collection of type definitions to represent composite data like JSON.
	CompositeType *bool `json:"CompositeType,omitempty"`

	// A human-friendly description of this custom data type indicating it's domain and usage.
	Description string `json:"Description,omitempty"`

	// A user friendly short name to identify the custom data type definition.
	Label string `json:"Label,omitempty"`

	// The name of custom data type definition. The valid name can contain lower case and upper case alphabetic characters, degits and special characters '-' and '_'.
	Name string `json:"Name,omitempty"`

	// The properties of this custom data type definition.
	TypeDefinition []*WorkflowBaseDataType `json:"TypeDefinition"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowCustomDataTypeDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Catalog *WorkflowCatalogRef `json:"Catalog,omitempty"`

		CompositeType *bool `json:"CompositeType,omitempty"`

		Description string `json:"Description,omitempty"`

		Label string `json:"Label,omitempty"`

		Name string `json:"Name,omitempty"`

		TypeDefinition []*WorkflowBaseDataType `json:"TypeDefinition"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Catalog = dataAO1.Catalog

	m.CompositeType = dataAO1.CompositeType

	m.Description = dataAO1.Description

	m.Label = dataAO1.Label

	m.Name = dataAO1.Name

	m.TypeDefinition = dataAO1.TypeDefinition

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowCustomDataTypeDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Catalog *WorkflowCatalogRef `json:"Catalog,omitempty"`

		CompositeType *bool `json:"CompositeType,omitempty"`

		Description string `json:"Description,omitempty"`

		Label string `json:"Label,omitempty"`

		Name string `json:"Name,omitempty"`

		TypeDefinition []*WorkflowBaseDataType `json:"TypeDefinition"`
	}

	dataAO1.Catalog = m.Catalog

	dataAO1.CompositeType = m.CompositeType

	dataAO1.Description = m.Description

	dataAO1.Label = m.Label

	dataAO1.Name = m.Name

	dataAO1.TypeDefinition = m.TypeDefinition

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow custom data type definition
func (m *WorkflowCustomDataTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowCustomDataTypeDefinition) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Catalog")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowCustomDataTypeDefinition) validateTypeDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeDefinition) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeDefinition); i++ {
		if swag.IsZero(m.TypeDefinition[i]) { // not required
			continue
		}

		if m.TypeDefinition[i] != nil {
			if err := m.TypeDefinition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TypeDefinition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowCustomDataTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowCustomDataTypeDefinition) UnmarshalBinary(b []byte) error {
	var res WorkflowCustomDataTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
