// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PciLink Pci:Link
//
// PCI Switch Link connected to PCIe Switch.
//
// swagger:model pciLink
type PciLink struct {
	EquipmentBase

	// It shows the name of the pci device.
	// Read Only: true
	Adapter string `json:"Adapter,omitempty"`

	// It shows the upstream link speed for device.
	// Read Only: true
	LinkSpeed string `json:"LinkSpeed,omitempty"`

	// It shows the upstream link status for device.
	// Read Only: true
	LinkStatus string `json:"LinkStatus,omitempty"`

	// It shows the upstream link width for device.
	// Read Only: true
	LinkWidth string `json:"LinkWidth,omitempty"`

	// It shows pci slot name for the pci device.
	// Read Only: true
	PciSlot string `json:"PciSlot,omitempty"`

	// A collection of references to the [pci.Switch](mo://pci.Switch) Managed Object.
	// When this managed object is deleted, the referenced [pci.Switch](mo://pci.Switch) MO unsets its reference to this deleted MO.
	// Read Only: true
	PciSwitch *PciSwitchRef `json:"PciSwitch,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// It shows the health information for pci device.
	// Read Only: true
	SlotStatus string `json:"SlotStatus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PciLink) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		Adapter string `json:"Adapter,omitempty"`

		LinkSpeed string `json:"LinkSpeed,omitempty"`

		LinkStatus string `json:"LinkStatus,omitempty"`

		LinkWidth string `json:"LinkWidth,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		PciSwitch *PciSwitchRef `json:"PciSwitch,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SlotStatus string `json:"SlotStatus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Adapter = dataAO1.Adapter

	m.LinkSpeed = dataAO1.LinkSpeed

	m.LinkStatus = dataAO1.LinkStatus

	m.LinkWidth = dataAO1.LinkWidth

	m.PciSlot = dataAO1.PciSlot

	m.PciSwitch = dataAO1.PciSwitch

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SlotStatus = dataAO1.SlotStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PciLink) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Adapter string `json:"Adapter,omitempty"`

		LinkSpeed string `json:"LinkSpeed,omitempty"`

		LinkStatus string `json:"LinkStatus,omitempty"`

		LinkWidth string `json:"LinkWidth,omitempty"`

		PciSlot string `json:"PciSlot,omitempty"`

		PciSwitch *PciSwitchRef `json:"PciSwitch,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SlotStatus string `json:"SlotStatus,omitempty"`
	}

	dataAO1.Adapter = m.Adapter

	dataAO1.LinkSpeed = m.LinkSpeed

	dataAO1.LinkStatus = m.LinkStatus

	dataAO1.LinkWidth = m.LinkWidth

	dataAO1.PciSlot = m.PciSlot

	dataAO1.PciSwitch = m.PciSwitch

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SlotStatus = m.SlotStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pci link
func (m *PciLink) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePciSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PciLink) validatePciSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.PciSwitch) { // not required
		return nil
	}

	if m.PciSwitch != nil {
		if err := m.PciSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PciSwitch")
			}
			return err
		}
	}

	return nil
}

func (m *PciLink) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PciLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PciLink) UnmarshalBinary(b []byte) error {
	var res PciLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
