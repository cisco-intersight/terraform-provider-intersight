// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetClusterMember Asset:Cluster Member
//
// A node within a cluster of device connectors. A Device Registration may contain multiple ClusterMembers with each holding the connection details of the device connector as well as the nodes current leadership within the cluster.
//
// swagger:model assetClusterMember
type AssetClusterMember struct {
	AssetDeviceConnection

	// A collection of references to the [asset.DeviceRegistration](mo://asset.DeviceRegistration) Managed Object.
	// When this managed object is deleted, the referenced [asset.DeviceRegistration](mo://asset.DeviceRegistration) MO unsets its reference to this deleted MO.
	// Read Only: true
	Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

	// The current leadershipstate of this member. Updated by the device connector on failover or leadership change. If a member is elected as Primary within the cluster this connection will be the same as the DeviceRegistration connection. E.g a message addressed to the DeviceRegistration will be forwarded to the ClusterMember connection.
	// Read Only: true
	// Enum: [Unknown Primary Secondary]
	Leadership string `json:"Leadership,omitempty"`

	// Devices lock their leadership on failure to heartbeat with peers. Value acts as a third party tie breaker in election between nodes. Intersight enforces that only one cluster member exists with this value set to true.
	LockedLeader *bool `json:"LockedLeader,omitempty"`

	// The unique identity of the member within the cluster. The identity is retrieved from the platform and reported by the device connector at connection time.
	// Read Only: true
	MemberIdentity string `json:"MemberIdentity,omitempty"`

	// The member idenity of the cluster member through which this device is connected if applicable.
	// Read Only: true
	ParentClusterMemberIdentity string `json:"ParentClusterMemberIdentity,omitempty"`

	// The SUDI status read from the Trust Anchor Module on a device.
	// Read Only: true
	Sudi *AssetSudiInfo `json:"Sudi,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetClusterMember) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetDeviceConnection
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetDeviceConnection = aO0

	// AO1
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Leadership string `json:"Leadership,omitempty"`

		LockedLeader *bool `json:"LockedLeader,omitempty"`

		MemberIdentity string `json:"MemberIdentity,omitempty"`

		ParentClusterMemberIdentity string `json:"ParentClusterMemberIdentity,omitempty"`

		Sudi *AssetSudiInfo `json:"Sudi,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Device = dataAO1.Device

	m.Leadership = dataAO1.Leadership

	m.LockedLeader = dataAO1.LockedLeader

	m.MemberIdentity = dataAO1.MemberIdentity

	m.ParentClusterMemberIdentity = dataAO1.ParentClusterMemberIdentity

	m.Sudi = dataAO1.Sudi

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetClusterMember) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetDeviceConnection)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Device *AssetDeviceRegistrationRef `json:"Device,omitempty"`

		Leadership string `json:"Leadership,omitempty"`

		LockedLeader *bool `json:"LockedLeader,omitempty"`

		MemberIdentity string `json:"MemberIdentity,omitempty"`

		ParentClusterMemberIdentity string `json:"ParentClusterMemberIdentity,omitempty"`

		Sudi *AssetSudiInfo `json:"Sudi,omitempty"`
	}

	dataAO1.Device = m.Device

	dataAO1.Leadership = m.Leadership

	dataAO1.LockedLeader = m.LockedLeader

	dataAO1.MemberIdentity = m.MemberIdentity

	dataAO1.ParentClusterMemberIdentity = m.ParentClusterMemberIdentity

	dataAO1.Sudi = m.Sudi

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset cluster member
func (m *AssetClusterMember) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetDeviceConnection
	if err := m.AssetDeviceConnection.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeadership(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSudi(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetClusterMember) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Device")
			}
			return err
		}
	}

	return nil
}

var assetClusterMemberTypeLeadershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Primary","Secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetClusterMemberTypeLeadershipPropEnum = append(assetClusterMemberTypeLeadershipPropEnum, v)
	}
}

// property enum
func (m *AssetClusterMember) validateLeadershipEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetClusterMemberTypeLeadershipPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetClusterMember) validateLeadership(formats strfmt.Registry) error {

	if swag.IsZero(m.Leadership) { // not required
		return nil
	}

	// value enum
	if err := m.validateLeadershipEnum("Leadership", "body", m.Leadership); err != nil {
		return err
	}

	return nil
}

func (m *AssetClusterMember) validateSudi(formats strfmt.Registry) error {

	if swag.IsZero(m.Sudi) { // not required
		return nil
	}

	if m.Sudi != nil {
		if err := m.Sudi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Sudi")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetClusterMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetClusterMember) UnmarshalBinary(b []byte) error {
	var res AssetClusterMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
