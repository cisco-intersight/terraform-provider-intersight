// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoryPersistentMemoryConfigResult Memory:Persistent Memory Config Result
//
// Result of a previously applied Persistent Memory configuration on a server.
//
// swagger:model memoryPersistentMemoryConfigResult
type MemoryPersistentMemoryConfigResult struct {
	InventoryBase

	// Error in the result of a previously applied Persistent Memory configuration on a server.
	// Read Only: true
	ConfigErrorDesc string `json:"ConfigErrorDesc,omitempty"`

	// Result of a previously applied Persistent Memory configuration on a server.
	// Read Only: true
	ConfigResult string `json:"ConfigResult,omitempty"`

	// Sequence number of a previously applied Persistent Memory configuration on a server.
	// Read Only: true
	ConfigSequenceNo int64 `json:"ConfigSequenceNo,omitempty"`

	// State of a previously applied Persistent Memory configuration on a server.
	// Read Only: true
	ConfigState string `json:"ConfigState,omitempty"`

	// A collection of references to the [memory.PersistentMemoryConfiguration](mo://memory.PersistentMemoryConfiguration) Managed Object.
	// When this managed object is deleted, the referenced [memory.PersistentMemoryConfiguration](mo://memory.PersistentMemoryConfiguration) MO unsets its reference to this deleted MO.
	// Read Only: true
	MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

	// Collection of all the results of the previously applied Persistent Memory Namespaces on a server.
	// Read Only: true
	PersistentMemoryNamespaceConfigResults []*MemoryPersistentMemoryNamespaceConfigResultRef `json:"PersistentMemoryNamespaceConfigResults"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MemoryPersistentMemoryConfigResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		ConfigErrorDesc string `json:"ConfigErrorDesc,omitempty"`

		ConfigResult string `json:"ConfigResult,omitempty"`

		ConfigSequenceNo int64 `json:"ConfigSequenceNo,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

		PersistentMemoryNamespaceConfigResults []*MemoryPersistentMemoryNamespaceConfigResultRef `json:"PersistentMemoryNamespaceConfigResults"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConfigErrorDesc = dataAO1.ConfigErrorDesc

	m.ConfigResult = dataAO1.ConfigResult

	m.ConfigSequenceNo = dataAO1.ConfigSequenceNo

	m.ConfigState = dataAO1.ConfigState

	m.MemoryPersistentMemoryConfiguration = dataAO1.MemoryPersistentMemoryConfiguration

	m.PersistentMemoryNamespaceConfigResults = dataAO1.PersistentMemoryNamespaceConfigResults

	m.RegisteredDevice = dataAO1.RegisteredDevice

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MemoryPersistentMemoryConfigResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConfigErrorDesc string `json:"ConfigErrorDesc,omitempty"`

		ConfigResult string `json:"ConfigResult,omitempty"`

		ConfigSequenceNo int64 `json:"ConfigSequenceNo,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		MemoryPersistentMemoryConfiguration *MemoryPersistentMemoryConfigurationRef `json:"MemoryPersistentMemoryConfiguration,omitempty"`

		PersistentMemoryNamespaceConfigResults []*MemoryPersistentMemoryNamespaceConfigResultRef `json:"PersistentMemoryNamespaceConfigResults"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`
	}

	dataAO1.ConfigErrorDesc = m.ConfigErrorDesc

	dataAO1.ConfigResult = m.ConfigResult

	dataAO1.ConfigSequenceNo = m.ConfigSequenceNo

	dataAO1.ConfigState = m.ConfigState

	dataAO1.MemoryPersistentMemoryConfiguration = m.MemoryPersistentMemoryConfiguration

	dataAO1.PersistentMemoryNamespaceConfigResults = m.PersistentMemoryNamespaceConfigResults

	dataAO1.RegisteredDevice = m.RegisteredDevice

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this memory persistent memory config result
func (m *MemoryPersistentMemoryConfigResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryPersistentMemoryConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentMemoryNamespaceConfigResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemoryPersistentMemoryConfigResult) validateMemoryPersistentMemoryConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryPersistentMemoryConfiguration) { // not required
		return nil
	}

	if m.MemoryPersistentMemoryConfiguration != nil {
		if err := m.MemoryPersistentMemoryConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MemoryPersistentMemoryConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *MemoryPersistentMemoryConfigResult) validatePersistentMemoryNamespaceConfigResults(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentMemoryNamespaceConfigResults) { // not required
		return nil
	}

	for i := 0; i < len(m.PersistentMemoryNamespaceConfigResults); i++ {
		if swag.IsZero(m.PersistentMemoryNamespaceConfigResults[i]) { // not required
			continue
		}

		if m.PersistentMemoryNamespaceConfigResults[i] != nil {
			if err := m.PersistentMemoryNamespaceConfigResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PersistentMemoryNamespaceConfigResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemoryPersistentMemoryConfigResult) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemoryPersistentMemoryConfigResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoryPersistentMemoryConfigResult) UnmarshalBinary(b []byte) error {
	var res MemoryPersistentMemoryConfigResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
