// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageVirtualDrive Storage:Virtual Drive
//
// A Virtual Disk or LUN.
//
// swagger:model storageVirtualDrive
type StorageVirtualDrive struct {
	EquipmentBase

	// access policy
	// Read Only: true
	AccessPolicy string `json:"AccessPolicy,omitempty"`

	// actual write cache policy
	// Read Only: true
	ActualWriteCachePolicy string `json:"ActualWriteCachePolicy,omitempty"`

	// available size
	// Read Only: true
	AvailableSize string `json:"AvailableSize,omitempty"`

	// block size
	// Read Only: true
	BlockSize string `json:"BlockSize,omitempty"`

	// bootable
	// Read Only: true
	Bootable string `json:"Bootable,omitempty"`

	// config state
	// Read Only: true
	ConfigState string `json:"ConfigState,omitempty"`

	// configured write cache policy
	// Read Only: true
	ConfiguredWriteCachePolicy string `json:"ConfiguredWriteCachePolicy,omitempty"`

	// connection protocol
	// Read Only: true
	ConnectionProtocol string `json:"ConnectionProtocol,omitempty"`

	// drive cache
	// Read Only: true
	DriveCache string `json:"DriveCache,omitempty"`

	// drive security
	// Read Only: true
	DriveSecurity string `json:"DriveSecurity,omitempty"`

	// It shows the Virtual drive state.
	// Read Only: true
	DriveState string `json:"DriveState,omitempty"`

	// io policy
	// Read Only: true
	IoPolicy string `json:"IoPolicy,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// num blocks
	// Read Only: true
	NumBlocks string `json:"NumBlocks,omitempty"`

	// It shows the current operational state of Virtual drive.
	// Read Only: true
	OperState string `json:"OperState,omitempty"`

	// operability
	// Read Only: true
	Operability string `json:"Operability,omitempty"`

	// physical block size
	// Read Only: true
	PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

	// physical disk usages
	PhysicalDiskUsages []*StoragePhysicalDiskUsageRef `json:"PhysicalDiskUsages"`

	// presence
	// Read Only: true
	Presence string `json:"Presence,omitempty"`

	// read policy
	// Read Only: true
	ReadPolicy string `json:"ReadPolicy,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// security flags
	// Read Only: true
	SecurityFlags string `json:"SecurityFlags,omitempty"`

	// size
	// Read Only: true
	Size string `json:"Size,omitempty"`

	// A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.
	// When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageController *StorageControllerRef `json:"StorageController,omitempty"`

	// The strip size is the portion of a stripe that resides on a single drive in the drive group, this is measured in KB.
	// Read Only: true
	StripSize string `json:"StripSize,omitempty"`

	// type
	// Read Only: true
	Type string `json:"Type,omitempty"`

	// Uuid
	// Read Only: true
	UUID string `json:"Uuid,omitempty"`

	// It is a reference to LocalDisk to build up a VirtualDrive.
	// Read Only: true
	VdMemberEps []*StorageVdMemberEpRef `json:"VdMemberEps"`

	// vendor Uuid
	// Read Only: true
	VendorUUID string `json:"VendorUuid,omitempty"`

	// A collection of references to the [storage.VirtualDriveExtension](mo://storage.VirtualDriveExtension) Managed Object.
	// When this managed object is deleted, the referenced [storage.VirtualDriveExtension](mo://storage.VirtualDriveExtension) MO unsets its reference to this deleted MO.
	// Read Only: true
	VirtualDriveExtension *StorageVirtualDriveExtensionRef `json:"VirtualDriveExtension,omitempty"`

	// virtual drive Id
	// Read Only: true
	VirtualDriveID string `json:"VirtualDriveId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageVirtualDrive) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EquipmentBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EquipmentBase = aO0

	// AO1
	var dataAO1 struct {
		AccessPolicy string `json:"AccessPolicy,omitempty"`

		ActualWriteCachePolicy string `json:"ActualWriteCachePolicy,omitempty"`

		AvailableSize string `json:"AvailableSize,omitempty"`

		BlockSize string `json:"BlockSize,omitempty"`

		Bootable string `json:"Bootable,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		ConfiguredWriteCachePolicy string `json:"ConfiguredWriteCachePolicy,omitempty"`

		ConnectionProtocol string `json:"ConnectionProtocol,omitempty"`

		DriveCache string `json:"DriveCache,omitempty"`

		DriveSecurity string `json:"DriveSecurity,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		IoPolicy string `json:"IoPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

		PhysicalDiskUsages []*StoragePhysicalDiskUsageRef `json:"PhysicalDiskUsages"`

		Presence string `json:"Presence,omitempty"`

		ReadPolicy string `json:"ReadPolicy,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SecurityFlags string `json:"SecurityFlags,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		StripSize string `json:"StripSize,omitempty"`

		Type string `json:"Type,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		VdMemberEps []*StorageVdMemberEpRef `json:"VdMemberEps"`

		VendorUUID string `json:"VendorUuid,omitempty"`

		VirtualDriveExtension *StorageVirtualDriveExtensionRef `json:"VirtualDriveExtension,omitempty"`

		VirtualDriveID string `json:"VirtualDriveId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccessPolicy = dataAO1.AccessPolicy

	m.ActualWriteCachePolicy = dataAO1.ActualWriteCachePolicy

	m.AvailableSize = dataAO1.AvailableSize

	m.BlockSize = dataAO1.BlockSize

	m.Bootable = dataAO1.Bootable

	m.ConfigState = dataAO1.ConfigState

	m.ConfiguredWriteCachePolicy = dataAO1.ConfiguredWriteCachePolicy

	m.ConnectionProtocol = dataAO1.ConnectionProtocol

	m.DriveCache = dataAO1.DriveCache

	m.DriveSecurity = dataAO1.DriveSecurity

	m.DriveState = dataAO1.DriveState

	m.IoPolicy = dataAO1.IoPolicy

	m.Name = dataAO1.Name

	m.NumBlocks = dataAO1.NumBlocks

	m.OperState = dataAO1.OperState

	m.Operability = dataAO1.Operability

	m.PhysicalBlockSize = dataAO1.PhysicalBlockSize

	m.PhysicalDiskUsages = dataAO1.PhysicalDiskUsages

	m.Presence = dataAO1.Presence

	m.ReadPolicy = dataAO1.ReadPolicy

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SecurityFlags = dataAO1.SecurityFlags

	m.Size = dataAO1.Size

	m.StorageController = dataAO1.StorageController

	m.StripSize = dataAO1.StripSize

	m.Type = dataAO1.Type

	m.UUID = dataAO1.UUID

	m.VdMemberEps = dataAO1.VdMemberEps

	m.VendorUUID = dataAO1.VendorUUID

	m.VirtualDriveExtension = dataAO1.VirtualDriveExtension

	m.VirtualDriveID = dataAO1.VirtualDriveID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageVirtualDrive) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EquipmentBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccessPolicy string `json:"AccessPolicy,omitempty"`

		ActualWriteCachePolicy string `json:"ActualWriteCachePolicy,omitempty"`

		AvailableSize string `json:"AvailableSize,omitempty"`

		BlockSize string `json:"BlockSize,omitempty"`

		Bootable string `json:"Bootable,omitempty"`

		ConfigState string `json:"ConfigState,omitempty"`

		ConfiguredWriteCachePolicy string `json:"ConfiguredWriteCachePolicy,omitempty"`

		ConnectionProtocol string `json:"ConnectionProtocol,omitempty"`

		DriveCache string `json:"DriveCache,omitempty"`

		DriveSecurity string `json:"DriveSecurity,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		IoPolicy string `json:"IoPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		NumBlocks string `json:"NumBlocks,omitempty"`

		OperState string `json:"OperState,omitempty"`

		Operability string `json:"Operability,omitempty"`

		PhysicalBlockSize string `json:"PhysicalBlockSize,omitempty"`

		PhysicalDiskUsages []*StoragePhysicalDiskUsageRef `json:"PhysicalDiskUsages"`

		Presence string `json:"Presence,omitempty"`

		ReadPolicy string `json:"ReadPolicy,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SecurityFlags string `json:"SecurityFlags,omitempty"`

		Size string `json:"Size,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		StripSize string `json:"StripSize,omitempty"`

		Type string `json:"Type,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		VdMemberEps []*StorageVdMemberEpRef `json:"VdMemberEps"`

		VendorUUID string `json:"VendorUuid,omitempty"`

		VirtualDriveExtension *StorageVirtualDriveExtensionRef `json:"VirtualDriveExtension,omitempty"`

		VirtualDriveID string `json:"VirtualDriveId,omitempty"`
	}

	dataAO1.AccessPolicy = m.AccessPolicy

	dataAO1.ActualWriteCachePolicy = m.ActualWriteCachePolicy

	dataAO1.AvailableSize = m.AvailableSize

	dataAO1.BlockSize = m.BlockSize

	dataAO1.Bootable = m.Bootable

	dataAO1.ConfigState = m.ConfigState

	dataAO1.ConfiguredWriteCachePolicy = m.ConfiguredWriteCachePolicy

	dataAO1.ConnectionProtocol = m.ConnectionProtocol

	dataAO1.DriveCache = m.DriveCache

	dataAO1.DriveSecurity = m.DriveSecurity

	dataAO1.DriveState = m.DriveState

	dataAO1.IoPolicy = m.IoPolicy

	dataAO1.Name = m.Name

	dataAO1.NumBlocks = m.NumBlocks

	dataAO1.OperState = m.OperState

	dataAO1.Operability = m.Operability

	dataAO1.PhysicalBlockSize = m.PhysicalBlockSize

	dataAO1.PhysicalDiskUsages = m.PhysicalDiskUsages

	dataAO1.Presence = m.Presence

	dataAO1.ReadPolicy = m.ReadPolicy

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SecurityFlags = m.SecurityFlags

	dataAO1.Size = m.Size

	dataAO1.StorageController = m.StorageController

	dataAO1.StripSize = m.StripSize

	dataAO1.Type = m.Type

	dataAO1.UUID = m.UUID

	dataAO1.VdMemberEps = m.VdMemberEps

	dataAO1.VendorUUID = m.VendorUUID

	dataAO1.VirtualDriveExtension = m.VirtualDriveExtension

	dataAO1.VirtualDriveID = m.VirtualDriveID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage virtual drive
func (m *StorageVirtualDrive) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EquipmentBase
	if err := m.EquipmentBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalDiskUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdMemberEps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDriveExtension(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageVirtualDrive) validatePhysicalDiskUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalDiskUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalDiskUsages); i++ {
		if swag.IsZero(m.PhysicalDiskUsages[i]) { // not required
			continue
		}

		if m.PhysicalDiskUsages[i] != nil {
			if err := m.PhysicalDiskUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PhysicalDiskUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageVirtualDrive) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageVirtualDrive) validateStorageController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageController) { // not required
		return nil
	}

	if m.StorageController != nil {
		if err := m.StorageController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageController")
			}
			return err
		}
	}

	return nil
}

func (m *StorageVirtualDrive) validateVdMemberEps(formats strfmt.Registry) error {

	if swag.IsZero(m.VdMemberEps) { // not required
		return nil
	}

	for i := 0; i < len(m.VdMemberEps); i++ {
		if swag.IsZero(m.VdMemberEps[i]) { // not required
			continue
		}

		if m.VdMemberEps[i] != nil {
			if err := m.VdMemberEps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VdMemberEps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageVirtualDrive) validateVirtualDriveExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDriveExtension) { // not required
		return nil
	}

	if m.VirtualDriveExtension != nil {
		if err := m.VirtualDriveExtension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VirtualDriveExtension")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageVirtualDrive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageVirtualDrive) UnmarshalBinary(b []byte) error {
	var res StorageVirtualDrive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
