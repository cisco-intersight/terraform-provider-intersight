// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamPsirtSeverity Tam:Psirt Severity
//
// < Severity level of a security advisory. Each advisory type (psirt/field notice etc.) may have a different method of calculating the severity. For e.g. a PSIRT severity may depend upon the corresponding CVSS score where as field notices are always critical in nature.
//
// swagger:model tamPsirtSeverity
type TamPsirtSeverity struct {
	TamSeverity

	// Severity level associated with the security advisory.
	// Enum: [critical high medium info]
	Level *string `json:"Level,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamPsirtSeverity) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TamSeverity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TamSeverity = aO0

	// AO1
	var dataAO1 struct {
		Level *string `json:"Level,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Level = dataAO1.Level

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamPsirtSeverity) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TamSeverity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Level *string `json:"Level,omitempty"`
	}

	dataAO1.Level = m.Level

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam psirt severity
func (m *TamPsirtSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TamSeverity
	if err := m.TamSeverity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tamPsirtSeverityTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["critical","high","medium","info"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamPsirtSeverityTypeLevelPropEnum = append(tamPsirtSeverityTypeLevelPropEnum, v)
	}
}

// property enum
func (m *TamPsirtSeverity) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamPsirtSeverityTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamPsirtSeverity) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("Level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamPsirtSeverity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamPsirtSeverity) UnmarshalBinary(b []byte) error {
	var res TamPsirtSeverity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
