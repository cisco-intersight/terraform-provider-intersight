// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerConfigImport Server:Config Import
//
// Configuration import action will import the existing configuration from physical server and generate Intersight policies and server profile from it. At end of successful import, server will be assigned to the generated profile which has policies associated with it. No server profile or policies will be generated if configuration import fails.
//
// swagger:model serverConfigImport
type ServerConfigImport struct {
	MoBaseMo

	// Description of the imported profile.
	Description string `json:"Description,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Policy prefix for the policies of the imported server profile.
	PolicyPrefix string `json:"PolicyPrefix,omitempty"`

	// Types of the policies to be imported for the imported server profile.
	PolicyTypes []string `json:"PolicyTypes"`

	// Profile name for the imported server profile.
	ProfileName string `json:"ProfileName,omitempty"`

	// The physical server on which import action will be triggered.
	Server *ComputeRackUnitRef `json:"Server,omitempty"`

	// The server profile which will be generated upon successful import.
	// Read Only: true
	ServerProfile *ServerProfileRef `json:"ServerProfile,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ServerConfigImport) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PolicyPrefix string `json:"PolicyPrefix,omitempty"`

		PolicyTypes []string `json:"PolicyTypes"`

		ProfileName string `json:"ProfileName,omitempty"`

		Server *ComputeRackUnitRef `json:"Server,omitempty"`

		ServerProfile *ServerProfileRef `json:"ServerProfile,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.Organization = dataAO1.Organization

	m.PolicyPrefix = dataAO1.PolicyPrefix

	m.PolicyTypes = dataAO1.PolicyTypes

	m.ProfileName = dataAO1.ProfileName

	m.Server = dataAO1.Server

	m.ServerProfile = dataAO1.ServerProfile

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ServerConfigImport) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		PolicyPrefix string `json:"PolicyPrefix,omitempty"`

		PolicyTypes []string `json:"PolicyTypes"`

		ProfileName string `json:"ProfileName,omitempty"`

		Server *ComputeRackUnitRef `json:"Server,omitempty"`

		ServerProfile *ServerProfileRef `json:"ServerProfile,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.Organization = m.Organization

	dataAO1.PolicyPrefix = m.PolicyPrefix

	dataAO1.PolicyTypes = m.PolicyTypes

	dataAO1.ProfileName = m.ProfileName

	dataAO1.Server = m.Server

	dataAO1.ServerProfile = m.ServerProfile

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this server config import
func (m *ServerConfigImport) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerConfigImport) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfigImport) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Server")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfigImport) validateServerProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerProfile) { // not required
		return nil
	}

	if m.ServerProfile != nil {
		if err := m.ServerProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServerProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerConfigImport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerConfigImport) UnmarshalBinary(b []byte) error {
	var res ServerConfigImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
