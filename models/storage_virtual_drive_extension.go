// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageVirtualDriveExtension Storage:Virtual Drive Extension
//
// Information of virtual drives as reported by a storage controller. In certain cases like S-series servers, virtual drive information will be reported by the controller separately and this represents such information.
//
// swagger:model storageVirtualDriveExtension
type StorageVirtualDriveExtension struct {
	InventoryBase

	// It shows virtual drive is bootable.
	// Read Only: true
	Bootable string `json:"Bootable,omitempty"`

	// container Id
	// Read Only: true
	ContainerID int64 `json:"ContainerId,omitempty"`

	// drive state
	// Read Only: true
	DriveState string `json:"DriveState,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// oper device Id
	// Read Only: true
	OperDeviceID string `json:"OperDeviceId,omitempty"`

	// The Device to which this Managed Object is associated.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.
	// When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO.
	// Read Only: true
	StorageController *StorageControllerRef `json:"StorageController,omitempty"`

	// Uuid
	// Read Only: true
	UUID string `json:"Uuid,omitempty"`

	// vendor Uuid
	// Read Only: true
	VendorUUID string `json:"VendorUuid,omitempty"`

	// virtual drive
	// Read Only: true
	VirtualDrive *StorageVirtualDriveRef `json:"VirtualDrive,omitempty"`

	// virtual drive dn
	// Read Only: true
	VirtualDriveDn string `json:"VirtualDriveDn,omitempty"`

	// It shows virtual drive Id.
	// Read Only: true
	VirtualDriveID string `json:"VirtualDriveId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageVirtualDriveExtension) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InventoryBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InventoryBase = aO0

	// AO1
	var dataAO1 struct {
		Bootable string `json:"Bootable,omitempty"`

		ContainerID int64 `json:"ContainerId,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		Name string `json:"Name,omitempty"`

		OperDeviceID string `json:"OperDeviceId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		VendorUUID string `json:"VendorUuid,omitempty"`

		VirtualDrive *StorageVirtualDriveRef `json:"VirtualDrive,omitempty"`

		VirtualDriveDn string `json:"VirtualDriveDn,omitempty"`

		VirtualDriveID string `json:"VirtualDriveId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bootable = dataAO1.Bootable

	m.ContainerID = dataAO1.ContainerID

	m.DriveState = dataAO1.DriveState

	m.Name = dataAO1.Name

	m.OperDeviceID = dataAO1.OperDeviceID

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageController = dataAO1.StorageController

	m.UUID = dataAO1.UUID

	m.VendorUUID = dataAO1.VendorUUID

	m.VirtualDrive = dataAO1.VirtualDrive

	m.VirtualDriveDn = dataAO1.VirtualDriveDn

	m.VirtualDriveID = dataAO1.VirtualDriveID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageVirtualDriveExtension) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.InventoryBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bootable string `json:"Bootable,omitempty"`

		ContainerID int64 `json:"ContainerId,omitempty"`

		DriveState string `json:"DriveState,omitempty"`

		Name string `json:"Name,omitempty"`

		OperDeviceID string `json:"OperDeviceId,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageController *StorageControllerRef `json:"StorageController,omitempty"`

		UUID string `json:"Uuid,omitempty"`

		VendorUUID string `json:"VendorUuid,omitempty"`

		VirtualDrive *StorageVirtualDriveRef `json:"VirtualDrive,omitempty"`

		VirtualDriveDn string `json:"VirtualDriveDn,omitempty"`

		VirtualDriveID string `json:"VirtualDriveId,omitempty"`
	}

	dataAO1.Bootable = m.Bootable

	dataAO1.ContainerID = m.ContainerID

	dataAO1.DriveState = m.DriveState

	dataAO1.Name = m.Name

	dataAO1.OperDeviceID = m.OperDeviceID

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageController = m.StorageController

	dataAO1.UUID = m.UUID

	dataAO1.VendorUUID = m.VendorUUID

	dataAO1.VirtualDrive = m.VirtualDrive

	dataAO1.VirtualDriveDn = m.VirtualDriveDn

	dataAO1.VirtualDriveID = m.VirtualDriveID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage virtual drive extension
func (m *StorageVirtualDriveExtension) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InventoryBase
	if err := m.InventoryBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDrive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageVirtualDriveExtension) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StorageVirtualDriveExtension) validateStorageController(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageController) { // not required
		return nil
	}

	if m.StorageController != nil {
		if err := m.StorageController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageController")
			}
			return err
		}
	}

	return nil
}

func (m *StorageVirtualDriveExtension) validateVirtualDrive(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDrive) { // not required
		return nil
	}

	if m.VirtualDrive != nil {
		if err := m.VirtualDrive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VirtualDrive")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageVirtualDriveExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageVirtualDriveExtension) UnmarshalBinary(b []byte) error {
	var res StorageVirtualDriveExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
