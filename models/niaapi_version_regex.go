// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NiaapiVersionRegex Niaapi:Version Regex
//
// The regular expression pattern to recongnize the version string.
//
// swagger:model niaapiVersionRegex
type NiaapiVersionRegex struct {
	MoBaseMo

	// Version Regex mapping for APIC platform.
	Apic *NiaapiVersionRegexPlatform `json:"Apic,omitempty"`

	// Version Regex mapping for DCNM platform.
	Dcnm *NiaapiVersionRegexPlatform `json:"Dcnm,omitempty"`

	// Version number for the Version Regex data, also used as identity.
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiVersionRegex) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Apic *NiaapiVersionRegexPlatform `json:"Apic,omitempty"`

		Dcnm *NiaapiVersionRegexPlatform `json:"Dcnm,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Apic = dataAO1.Apic

	m.Dcnm = dataAO1.Dcnm

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiVersionRegex) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Apic *NiaapiVersionRegexPlatform `json:"Apic,omitempty"`

		Dcnm *NiaapiVersionRegexPlatform `json:"Dcnm,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.Apic = m.Apic

	dataAO1.Dcnm = m.Dcnm

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi version regex
func (m *NiaapiVersionRegex) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcnm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiVersionRegex) validateApic(formats strfmt.Registry) error {

	if swag.IsZero(m.Apic) { // not required
		return nil
	}

	if m.Apic != nil {
		if err := m.Apic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Apic")
			}
			return err
		}
	}

	return nil
}

func (m *NiaapiVersionRegex) validateDcnm(formats strfmt.Registry) error {

	if swag.IsZero(m.Dcnm) { // not required
		return nil
	}

	if m.Dcnm != nil {
		if err := m.Dcnm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dcnm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiVersionRegex) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiVersionRegex) UnmarshalBinary(b []byte) error {
	var res NiaapiVersionRegex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
