// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamPrivilegeSet Iam:Privilege Set
//
// A collection of privileges.
//
// swagger:model iamPrivilegeSet
type IamPrivilegeSet struct {
	MoBaseMo

	// A collection of references to the [iam.Account](mo://iam.Account) Managed Object.
	// When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO.
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// A privilege set can be associated to other privilege sets.
	AssociatedPrivilegeSets []*IamPrivilegeSetRef `json:"AssociatedPrivilegeSets"`

	// Description of the privilege set.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Name of the privilege set.
	Name string `json:"Name,omitempty"`

	// Names of the privileges in the privilege set.
	// Read Only: true
	PrivilegeNames []string `json:"PrivilegeNames"`

	// Reference to the privileges. Privilege represents an action which can be performed in Intersight such as creating server profile, deleting a user etc. Privileges are assigned to a user using privilege sets and roles.
	// Read Only: true
	Privileges []*IamPrivilegeRef `json:"Privileges"`

	// A collection of references to the [iam.System](mo://iam.System) Managed Object.
	// When this managed object is deleted, the referenced [iam.System](mo://iam.System) MO unsets its reference to this deleted MO.
	// Read Only: true
	System *IamSystemRef `json:"System,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamPrivilegeSet) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		AssociatedPrivilegeSets []*IamPrivilegeSetRef `json:"AssociatedPrivilegeSets"`

		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivilegeNames []string `json:"PrivilegeNames"`

		Privileges []*IamPrivilegeRef `json:"Privileges"`

		System *IamSystemRef `json:"System,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.AssociatedPrivilegeSets = dataAO1.AssociatedPrivilegeSets

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.PrivilegeNames = dataAO1.PrivilegeNames

	m.Privileges = dataAO1.Privileges

	m.System = dataAO1.System

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamPrivilegeSet) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		AssociatedPrivilegeSets []*IamPrivilegeSetRef `json:"AssociatedPrivilegeSets"`

		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivilegeNames []string `json:"PrivilegeNames"`

		Privileges []*IamPrivilegeRef `json:"Privileges"`

		System *IamSystemRef `json:"System,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.AssociatedPrivilegeSets = m.AssociatedPrivilegeSets

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.PrivilegeNames = m.PrivilegeNames

	dataAO1.Privileges = m.Privileges

	dataAO1.System = m.System

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam privilege set
func (m *IamPrivilegeSet) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedPrivilegeSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamPrivilegeSet) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *IamPrivilegeSet) validateAssociatedPrivilegeSets(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociatedPrivilegeSets) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedPrivilegeSets); i++ {
		if swag.IsZero(m.AssociatedPrivilegeSets[i]) { // not required
			continue
		}

		if m.AssociatedPrivilegeSets[i] != nil {
			if err := m.AssociatedPrivilegeSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AssociatedPrivilegeSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPrivilegeSet) validatePrivileges(formats strfmt.Registry) error {

	if swag.IsZero(m.Privileges) { // not required
		return nil
	}

	for i := 0; i < len(m.Privileges); i++ {
		if swag.IsZero(m.Privileges[i]) { // not required
			continue
		}

		if m.Privileges[i] != nil {
			if err := m.Privileges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamPrivilegeSet) validateSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("System")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamPrivilegeSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamPrivilegeSet) UnmarshalBinary(b []byte) error {
	var res IamPrivilegeSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
